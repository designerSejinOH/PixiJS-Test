/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_components_canvas_Scene_tsx",{

/***/ "./node_modules/@pixi/react/dist/index.es-dev.js":
/*!*******************************************************!*\
  !*** ./node_modules/@pixi/react/dist/index.es-dev.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AnimatedSprite\": function() { return /* binding */ AnimatedSprite; },\n/* harmony export */   \"AppConsumer\": function() { return /* binding */ AppConsumer; },\n/* harmony export */   \"AppContext\": function() { return /* binding */ Context; },\n/* harmony export */   \"AppProvider\": function() { return /* binding */ AppProvider; },\n/* harmony export */   \"BitmapText\": function() { return /* binding */ BitmapText; },\n/* harmony export */   \"Container\": function() { return /* binding */ Container; },\n/* harmony export */   \"Graphics\": function() { return /* binding */ Graphics; },\n/* harmony export */   \"NineSlicePlane\": function() { return /* binding */ NineSlicePlane; },\n/* harmony export */   \"ParticleContainer\": function() { return /* binding */ ParticleContainer; },\n/* harmony export */   \"PixiComponent\": function() { return /* binding */ PixiComponent; },\n/* harmony export */   \"PixiFiber\": function() { return /* binding */ PixiFiber; },\n/* harmony export */   \"SimpleMesh\": function() { return /* binding */ SimpleMesh; },\n/* harmony export */   \"SimpleRope\": function() { return /* binding */ SimpleRope; },\n/* harmony export */   \"Sprite\": function() { return /* binding */ Sprite; },\n/* harmony export */   \"Stage\": function() { return /* binding */ Stage$1; },\n/* harmony export */   \"TYPES\": function() { return /* binding */ TYPES; },\n/* harmony export */   \"Text\": function() { return /* binding */ Text; },\n/* harmony export */   \"TilingSprite\": function() { return /* binding */ TilingSprite; },\n/* harmony export */   \"applyDefaultProps\": function() { return /* binding */ applyDefaultProps; },\n/* harmony export */   \"createRoot\": function() { return /* binding */ createRoot; },\n/* harmony export */   \"eventHandlers\": function() { return /* binding */ eventHandlers; },\n/* harmony export */   \"render\": function() { return /* binding */ render; },\n/* harmony export */   \"unmountComponentAtNode\": function() { return /* binding */ unmountComponentAtNode; },\n/* harmony export */   \"useApp\": function() { return /* binding */ useApp; },\n/* harmony export */   \"useTick\": function() { return /* binding */ useTick; },\n/* harmony export */   \"withFilters\": function() { return /* binding */ withFilters; },\n/* harmony export */   \"withPixiApp\": function() { return /* binding */ withPixiApp; }\n/* harmony export */ });\n/* harmony import */ var _pixi_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/core */ \"./node_modules/@pixi/core/lib/index.mjs\");\n/* harmony import */ var _pixi_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pixi/display */ \"./node_modules/@pixi/display/lib/index.mjs\");\n/* harmony import */ var _pixi_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pixi/math */ \"./node_modules/@pixi/math/lib/index.mjs\");\n/* harmony import */ var _pixi_text_bitmap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pixi/text-bitmap */ \"./node_modules/@pixi/text-bitmap/lib/index.mjs\");\n/* harmony import */ var _pixi_graphics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pixi/graphics */ \"./node_modules/@pixi/graphics/lib/index.mjs\");\n/* harmony import */ var _pixi_mesh_extras__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pixi/mesh-extras */ \"./node_modules/@pixi/mesh-extras/lib/index.mjs\");\n/* harmony import */ var _pixi_particle_container__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @pixi/particle-container */ \"./node_modules/@pixi/particle-container/lib/index.mjs\");\n/* harmony import */ var _pixi_sprite__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @pixi/sprite */ \"./node_modules/@pixi/sprite/lib/index.mjs\");\n/* harmony import */ var _pixi_sprite_animated__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @pixi/sprite-animated */ \"./node_modules/@pixi/sprite-animated/lib/index.mjs\");\n/* harmony import */ var _pixi_text__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @pixi/text */ \"./node_modules/@pixi/text/lib/index.mjs\");\n/* harmony import */ var _pixi_sprite_tiling__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @pixi/sprite-tiling */ \"./node_modules/@pixi/sprite-tiling/lib/index.mjs\");\n/* harmony import */ var _pixi_constants__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @pixi/constants */ \"./node_modules/@pixi/constants/lib/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _pixi_app__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @pixi/app */ \"./node_modules/@pixi/app/lib/index.mjs\");\n/* harmony import */ var _pixi_ticker__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @pixi/ticker */ \"./node_modules/@pixi/ticker/lib/index.mjs\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_15__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\n// borrowed from fbjs\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n    error.framesToPop = 1; // Skip invariant's own stack frame.\n    throw error;\n  }\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\n/**\n * lodash 4.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nvar lodash_isnil = isNil;\n\n/**\n * Parse PIXI point value to array of coordinates\n *\n * @param {*} value\n * @returns {Array}\n */\nfunction parsePoint(value) {\n  var arr = [];\n  if (typeof value === 'undefined') {\n    return arr;\n  } else if (typeof value === 'string') {\n    arr = value.split(',');\n  } else if (typeof value === 'number') {\n    arr = [value];\n  } else if (Array.isArray(value)) {\n    arr = _toConsumableArray(value);\n  } else if (value !== null && _typeof(value) === 'object') {\n    var x = value && (value === null || value === void 0 ? void 0 : value.x) || 0;\n    var y = value && (value === null || value === void 0 ? void 0 : value.y) || 0;\n    arr = [x, y];\n  } else {\n    return arr;\n  }\n  return arr.filter(function (p) {\n    return !lodash_isnil(p) && !isNaN(p);\n  }).map(Number);\n}\n\n/**\n * Check if two points are equal\n *\n * @param {*} oldValue\n * @param {*} newValue\n * @returns {boolean}\n */\nfunction pointsAreEqual(oldValue, newValue) {\n  if (oldValue.length !== newValue.length) {\n    return false;\n  }\n  for (var i = 0; i < oldValue.length; i++) {\n    if (oldValue[i] !== newValue[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Determine value is type of Point or ObservablePoint\n * See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/utils.js#L48\n *\n * @param {*} value\n * @returns {boolean}\n */\nfunction isPointType(value) {\n  return value instanceof _pixi_math__WEBPACK_IMPORTED_MODULE_2__.Point || value instanceof _pixi_math__WEBPACK_IMPORTED_MODULE_2__.ObservablePoint;\n}\n\n/**\n * Event handlers\n *\n * @type {string[]}\n */\nvar eventHandlers = ['click', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mouseupoutside', 'tap', 'touchstart', 'touchmove', 'touchend', 'touchendoutside', 'pointercancel', 'pointerout', 'pointerover', 'pointertap', 'pointerdown', 'pointerup', 'pointerupoutside', 'pointermove', 'rightclick', 'rightdown', 'rightup', 'rightupoutside', 'touchcancel', 'touchendoutside', 'touchmove', 'touchstart'];\n\n/**\n * Set value on a PIXI.DisplayObject\n * See https://github.com/Izzimach/react-pixi/blob/a25196251a13ed9bb116a8576d93e9fceac2a14c/src/ReactPIXI.js#L114\n *\n * @param {PIXI.DisplayObject} instance\n * @param {string} prop\n * @param {*} value\n */\nfunction setValue(instance, prop, value) {\n  if (isPointType(instance[prop]) && isPointType(value)) {\n    // copy value\n    instance[prop].copyFrom(value);\n  } else if (isPointType(instance[prop])) {\n    // parse value if a non-Point type is being assigned to a Point type\n    var coordinates = parsePoint(value);\n    invariant(typeof coordinates !== 'undefined' && coordinates.length > 0 && coordinates.length < 3, 'The property `%s` is a `PIXI.Point` or `PIXI.ObservablePoint` and must be set to a comma-separated string of ' + 'either 1 or 2 coordinates, a 1 or 2 element array containing coordinates, or a PIXI Point/ObservablePoint. ' + 'If only one coordinate is given then X and Y will be set to the provided value. Received: `%s` of type `%s`.', prop, JSON.stringify(value), _typeof(value));\n    instance[prop].set(coordinates.shift(), coordinates.shift());\n  } else {\n    // just hard assign value\n    instance[prop] = value;\n  }\n}\n\nvar isFunction = function isFunction() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.every(function (v) {\n    return typeof v === 'function';\n  });\n};\nvar isObject = function isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n};\nvar hasKey = function hasKey(collection) {\n  var coll = collection;\n  if (!Array.isArray(coll)) {\n    if (isObject(collection)) {\n      coll = Object.keys(collection);\n    } else {\n      throw new Error('collection needs to be an Array or Object');\n    }\n  }\n  var index = {};\n  coll.forEach(function (key) {\n    index[key] = true;\n  });\n  return function (key) {\n    return typeof index[key] !== 'undefined';\n  };\n};\nvar not = function not(boolFn) {\n  return function () {\n    return !boolFn.apply(void 0, arguments);\n  };\n};\n\nvar _PROPS_RESERVED;\nvar CHILDREN = 'children';\n/**\n * Reserved props\n *\n * @type {Object}\n */\nvar PROPS_RESERVED = (_PROPS_RESERVED = {}, _defineProperty(_PROPS_RESERVED, CHILDREN, true), _defineProperty(_PROPS_RESERVED, \"parent\", true), _defineProperty(_PROPS_RESERVED, \"worldAlpha\", true), _defineProperty(_PROPS_RESERVED, \"worldTransform\", true), _defineProperty(_PROPS_RESERVED, \"worldVisible\", true), _PROPS_RESERVED);\n\n/**\n * Default display object props\n * See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/props.js#L9\n *\n * @type {Object}\n */\nvar PROPS_DISPLAY_OBJECT = {\n  alpha: 1,\n  buttonMode: false,\n  cacheAsBitmap: false,\n  cursor: null,\n  filterArea: null,\n  filters: null,\n  hitArea: null,\n  interactive: false,\n  mask: null,\n  pivot: 0,\n  position: 0,\n  renderable: true,\n  rotation: 0,\n  scale: 1,\n  skew: 0,\n  transform: null,\n  visible: true,\n  x: 0,\n  y: 0\n};\n\n/**\n * Helper util for fetching the texture from props\n * Can be either texture or image\n *\n * @param {string} elementType\n * @param {PIXI.Container} root\n * @param {object} props\n * @returns {PIXI.Texture|null}\n */\nvar getTextureFromProps = function getTextureFromProps(elementType, root) {\n  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var emitChange = function emitChange(texture) {\n    return requestAnimationFrame(function () {\n      var _texture$__reactpixi, _texture$__reactpixi$;\n      texture === null || texture === void 0 ? void 0 : (_texture$__reactpixi = texture.__reactpixi) === null || _texture$__reactpixi === void 0 ? void 0 : (_texture$__reactpixi$ = _texture$__reactpixi.root) === null || _texture$__reactpixi$ === void 0 ? void 0 : _texture$__reactpixi$.emit(\"__REACT_PIXI_REQUEST_RENDER__\");\n    });\n  };\n\n  // eslint-disable-next-line consistent-return\n  var check = function check(inType, validator) {\n    if (props.hasOwnProperty(inType)) {\n      var valid = validator.typeofs.some(function (t) {\n        return _typeof(props[inType]) === t;\n      }) || validator.instanceofs.some(function (i) {\n        return props[inType] instanceof i;\n      });\n      invariant(valid, \"\".concat(elementType, \" \").concat(inType, \" prop is invalid\"));\n      return props[inType];\n    }\n  };\n  if (props.texture) {\n    invariant(props.texture instanceof _pixi_core__WEBPACK_IMPORTED_MODULE_0__.Texture, \"\".concat(elementType, \" texture needs to be typeof `Texture`\"));\n    return props.texture;\n  }\n  var result = check('image', {\n    typeofs: ['string'],\n    instanceofs: [HTMLImageElement]\n  }) || check('video', {\n    typeofs: ['string'],\n    instanceofs: [HTMLVideoElement]\n  }) || check('source', {\n    typeofs: ['string', 'number'],\n    instanceofs: [HTMLImageElement, HTMLVideoElement, HTMLCanvasElement, _pixi_core__WEBPACK_IMPORTED_MODULE_0__.Texture]\n  });\n  invariant(!!result, \"\".concat(elementType, \" could not get texture from props\"));\n  var texture = _pixi_core__WEBPACK_IMPORTED_MODULE_0__.Texture.from(result);\n  texture.__reactpixi = {\n    root: root\n  };\n  texture.once('update', emitChange);\n  texture.once('loaded', emitChange);\n  if (texture.valid) {\n    emitChange(texture);\n  }\n  return texture;\n};\nvar filterProps = not(hasKey([].concat(_toConsumableArray(Object.keys(PROPS_RESERVED)), _toConsumableArray(eventHandlers))));\n\n/**\n * Apply default props on Display Object instance (which are all components)\n *\n * @param {PIXI.DisplayObject} instance\n * @param {Object} oldProps\n * @param {Object} newProps\n */\nfunction applyDefaultProps(instance, oldProps, newProps) {\n  var changed = false;\n  invariant(_pixi_display__WEBPACK_IMPORTED_MODULE_1__.DisplayObject.prototype.isPrototypeOf(instance), 'instance needs to be typeof `DisplayObject`, got `%s`', _typeof(instance));\n\n  // update event handlers\n  if (!newProps.ignoreEvents) {\n    var hasRemoveListener = typeof instance.removeListener === 'function';\n    var hasOn = typeof instance.on === 'function';\n    for (var i = 0; i < eventHandlers.length; i++) {\n      var evt = eventHandlers[i];\n      if (oldProps[evt] !== newProps[evt]) {\n        changed = true;\n        if (typeof oldProps[evt] === 'function' && hasRemoveListener) {\n          instance.removeListener(evt, oldProps[evt]);\n        }\n        if (typeof newProps[evt] === 'function' && hasOn) {\n          instance.on(evt, newProps[evt]);\n        }\n      }\n    }\n  }\n  var newPropKeys = Object.keys(newProps || {});\n\n  // hard overwrite all props? can speed up performance\n  if (newProps.overwriteProps) {\n    for (var _i = 0; _i < newPropKeys.length; _i++) {\n      var p = newPropKeys[_i];\n      if (oldProps[p] !== newProps[p]) {\n        changed = true;\n        setValue(instance, p, newProps[p]);\n      }\n    }\n\n    // TODO: previously this returned nothing ie. falsy, should we explicitly return false here instead or was it always\n    // a subtle bug, test the intention\n    return changed;\n  }\n  var props = newPropKeys.filter(filterProps);\n  for (var _i2 = 0; _i2 < props.length; _i2++) {\n    var prop = props[_i2];\n    var value = newProps[prop];\n    if (newProps[prop] !== oldProps[prop]) {\n      changed = true;\n    }\n    if (value !== undefined) {\n      // set value if defined\n      setValue(instance, prop, value);\n    } else if (prop in PROPS_DISPLAY_OBJECT) {\n      // is a default value, use that\n      console.warn(\"setting default value: \".concat(prop, \", from: \").concat(instance[prop], \" to: \").concat(value, \" for\"), instance);\n      changed = true;\n      setValue(instance, prop, PROPS_DISPLAY_OBJECT[prop]);\n    } else {\n      console.warn(\"ignoring prop: \".concat(prop, \", from \").concat(instance[prop], \" to \").concat(value, \" for\"), instance);\n    }\n  }\n  return changed;\n}\n\nvar BitmapText$1 = function BitmapText(root, props) {\n  var text = props.text,\n    style = props.style;\n  return new _pixi_text_bitmap__WEBPACK_IMPORTED_MODULE_3__.BitmapText(text, style);\n};\nvar BitmapText$2 = BitmapText$1;\n\nvar Container$1 = function Container() {\n  return new _pixi_display__WEBPACK_IMPORTED_MODULE_1__.Container();\n};\nvar Container$2 = Container$1;\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\nvar _excluded$7 = [\"draw\", \"geometry\"];\nvar Graphics$1 = function Graphics(root, _ref) {\n  var geometry = _ref.geometry;\n  invariant(!geometry || geometry instanceof _pixi_graphics__WEBPACK_IMPORTED_MODULE_4__.Graphics, \"Graphics geometry needs to be a `PIXI.Graphics`\");\n  var g = geometry ? new _pixi_graphics__WEBPACK_IMPORTED_MODULE_4__.Graphics(geometry.geometry) : new _pixi_graphics__WEBPACK_IMPORTED_MODULE_4__.Graphics();\n  g.applyProps = function (instance, oldProps, newProps) {\n    var draw = newProps.draw;\n      newProps.geometry;\n      var props = _objectWithoutProperties(newProps, _excluded$7);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (oldProps.draw !== draw && typeof draw === 'function') {\n      changed = true;\n      draw.call(g, g);\n    }\n    return changed;\n  };\n  return g;\n};\nvar Graphics$2 = Graphics$1;\n\nvar _excluded$6 = [\"image\", \"texture\"];\nvar NineSlicePlane$1 = function NineSlicePlane(root, props) {\n  var _props$leftWidth = props.leftWidth,\n    leftWidth = _props$leftWidth === void 0 ? 10 : _props$leftWidth,\n    _props$topHeight = props.topHeight,\n    topHeight = _props$topHeight === void 0 ? 10 : _props$topHeight,\n    _props$rightWidth = props.rightWidth,\n    rightWidth = _props$rightWidth === void 0 ? 10 : _props$rightWidth,\n    _props$bottomHeight = props.bottomHeight,\n    bottomHeight = _props$bottomHeight === void 0 ? 10 : _props$bottomHeight;\n  var texture = getTextureFromProps('NineSlicePlane', root, props);\n  var nineSlicePlane = new _pixi_mesh_extras__WEBPACK_IMPORTED_MODULE_5__.NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight);\n  nineSlicePlane.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$6);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (image || texture) {\n      // change = true not required for image, getTextureFromProps will call update\n      if (texture !== oldProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('NineSlicePlane', root, newProps);\n    }\n    return changed;\n  };\n  return nineSlicePlane;\n};\nvar NineSlicePlane$2 = NineSlicePlane$1;\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar ParticleContainer$1 = function ParticleContainer(root, props) {\n  var _props$maxSize = props.maxSize,\n    maxSize = _props$maxSize === void 0 ? 1500 : _props$maxSize,\n    _props$batchSize = props.batchSize,\n    batchSize = _props$batchSize === void 0 ? 16384 : _props$batchSize,\n    _props$autoResize = props.autoResize,\n    autoResize = _props$autoResize === void 0 ? false : _props$autoResize;\n  var properties = _objectSpread$3(_objectSpread$3({}, {\n    vertices: false,\n    scale: true,\n    position: true,\n    rotation: true,\n    uvs: true,\n    tint: true\n  }), props.properties || {});\n  var destroyOptions = _objectSpread$3(_objectSpread$3({}, {\n    children: false,\n    texture: false,\n    baseTexture: false\n  }), props.destroyOptions || {});\n  var container = new _pixi_particle_container__WEBPACK_IMPORTED_MODULE_6__.ParticleContainer(maxSize, properties, batchSize, autoResize);\n  container.willUnmount = function (instance, child, parent) {\n    instance.destroy(destroyOptions);\n  };\n  return container;\n};\nvar ParticleContainer$2 = ParticleContainer$1;\n\nvar _excluded$5 = [\"image\", \"texture\"];\nvar Sprite$1 = function Sprite(root, props) {\n  var sprite = new _pixi_sprite__WEBPACK_IMPORTED_MODULE_7__.Sprite(getTextureFromProps('Sprite', root, props));\n  sprite.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$5);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (texture && oldProps.texture !== newProps.texture || image && oldProps.image !== newProps.image) {\n      // getTextureFromProps will call update for image\n      if (oldProps.texture !== newProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('Sprite', root, newProps);\n    }\n    return changed;\n  };\n  return sprite;\n};\nvar Sprite$2 = Sprite$1;\n\nvar _excluded$4 = [\"textures\", \"isPlaying\", \"initialFrame\"];\nvar AnimatedSprite$1 = function AnimatedSprite(root, props) {\n  var textures = props.textures,\n    images = props.images,\n    _props$isPlaying = props.isPlaying,\n    isPlaying = _props$isPlaying === void 0 ? true : _props$isPlaying,\n    initialFrame = props.initialFrame;\n  var makeTexture = function makeTexture(textures) {\n    return textures.map(function (texture) {\n      invariant(texture instanceof _pixi_core__WEBPACK_IMPORTED_MODULE_0__.Texture || (texture === null || texture === void 0 ? void 0 : texture.texture), \"AnimationSprite texture needs to be an array of `PIXI.Texture` or `{ texture: PIXI.Texture, time:\\n                number }`\");\n      return texture;\n    });\n  };\n  var animatedSprite = images ? _pixi_sprite_animated__WEBPACK_IMPORTED_MODULE_8__.AnimatedSprite.fromImages(images) : new _pixi_sprite_animated__WEBPACK_IMPORTED_MODULE_8__.AnimatedSprite(makeTexture(textures));\n  animatedSprite[isPlaying ? 'gotoAndPlay' : 'gotoAndStop'](initialFrame || 0);\n  animatedSprite.applyProps = function (instance, oldProps, newProps) {\n    var textures = newProps.textures,\n      isPlaying = newProps.isPlaying,\n      initialFrame = newProps.initialFrame,\n      props = _objectWithoutProperties(newProps, _excluded$4);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (textures && oldProps.textures !== textures) {\n      instance.textures = makeTexture(textures);\n      changed = true;\n    }\n    if (isPlaying !== oldProps.isPlaying || initialFrame !== oldProps.initialFrame) {\n      var frame = typeof initialFrame === 'number' ? initialFrame : animatedSprite.currentFrame || 0;\n      animatedSprite[isPlaying ? 'gotoAndPlay' : 'gotoAndStop'](frame);\n      changed = true;\n    }\n    return changed;\n  };\n  return animatedSprite;\n};\nvar AnimatedSprite$2 = AnimatedSprite$1;\n\nvar Text$1 = function Text(root, props) {\n  var _props$text = props.text,\n    text = _props$text === void 0 ? '' : _props$text,\n    _props$style = props.style,\n    style = _props$style === void 0 ? {} : _props$style,\n    isSprite = props.isSprite;\n  var pixiText = new _pixi_text__WEBPACK_IMPORTED_MODULE_9__.Text(text, style);\n  if (isSprite) {\n    pixiText.updateText();\n    return new _pixi_sprite__WEBPACK_IMPORTED_MODULE_7__.Sprite(pixiText.texture);\n  }\n  return pixiText;\n};\nvar Text$2 = Text$1;\n\nvar _excluded$3 = [\"tileScale\", \"tilePosition\", \"image\", \"texture\"];\nvar TilingSprite$1 = function TilingSprite(root, props) {\n  var _props$width = props.width,\n    width = _props$width === void 0 ? 100 : _props$width,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 100 : _props$height;\n  var texture = getTextureFromProps('TilingSprite', root, props);\n  var ts = new _pixi_sprite_tiling__WEBPACK_IMPORTED_MODULE_10__.TilingSprite(texture, width, height);\n  ts.applyProps = function (instance, oldProps, newProps) {\n    var tileScale = newProps.tileScale,\n      tilePosition = newProps.tilePosition,\n      image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$3);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (tilePosition) {\n      var _instance$tilePositio;\n      var newTilePosition = parsePoint(tilePosition);\n      (_instance$tilePositio = instance.tilePosition).set.apply(_instance$tilePositio, _toConsumableArray(newTilePosition));\n      changed = !pointsAreEqual(parsePoint(oldProps.tilePosition), newTilePosition) || changed;\n    }\n    if (tileScale) {\n      var _instance$tileScale;\n      var newTileScale = parsePoint(tileScale);\n      (_instance$tileScale = instance.tileScale).set.apply(_instance$tileScale, _toConsumableArray(newTileScale));\n      changed = !pointsAreEqual(parsePoint(oldProps.tileScale), newTileScale) || changed;\n    }\n    if (image || texture) {\n      // change = true not required for image, getTextureFromProps will call update\n      if (texture !== oldProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('Sprite', root, newProps);\n    }\n    return changed;\n  };\n  return ts;\n};\nvar TilingSprite$2 = TilingSprite$1;\n\nvar _excluded$2 = [\"image\", \"texture\"];\nvar SimpleMesh$1 = function SimpleMesh(root, props) {\n  var texture = getTextureFromProps('Mesh', root, props);\n  var vertices = props.vertices,\n    uvs = props.uvs,\n    indices = props.indices,\n    _props$drawMode = props.drawMode,\n    drawMode = _props$drawMode === void 0 ? _pixi_constants__WEBPACK_IMPORTED_MODULE_11__.DRAW_MODES.TRIANGLES : _props$drawMode;\n  var simpleMesh = new _pixi_mesh_extras__WEBPACK_IMPORTED_MODULE_5__.SimpleMesh(texture, vertices, uvs, indices, drawMode);\n  simpleMesh.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$2);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (image || texture) {\n      // change = true not required for image, getTextureFromProps will call update\n      if (texture !== oldProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('Mesh', root, newProps);\n    }\n    return changed;\n  };\n  return simpleMesh;\n};\nvar SimpleMesh$2 = SimpleMesh$1;\n\nvar _excluded$1 = [\"image\", \"texture\"];\nvar SimpleRope$1 = function SimpleRope(root, props) {\n  var texture = getTextureFromProps('SimpleRope', root, props);\n  var points = props.points;\n  var rope = new _pixi_mesh_extras__WEBPACK_IMPORTED_MODULE_5__.SimpleRope(texture, points);\n  rope.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$1);\n    invariant(Array.isArray(newProps.points), 'SimpleRope points needs to be %s', 'Array<PIXI.Point>');\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (image || texture) {\n      if (texture !== oldProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('SimpleRope', root, newProps);\n    }\n    return changed;\n  };\n  return rope;\n};\nvar SimpleRope$2 = SimpleRope$1;\n\nvar components = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BitmapText: BitmapText$2,\n  Container: Container$2,\n  Graphics: Graphics$2,\n  NineSlicePlane: NineSlicePlane$2,\n  ParticleContainer: ParticleContainer$2,\n  Sprite: Sprite$2,\n  Text: Text$2,\n  TilingSprite: TilingSprite$2,\n  SimpleMesh: SimpleMesh$2,\n  SimpleRope: SimpleRope$2,\n  AnimatedSprite: AnimatedSprite$2\n});\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/**\n * Available tag types\n *\n * @type {Object}\n */\nvar TYPES = {\n  BitmapText: 'BitmapText',\n  Container: 'Container',\n  Graphics: 'Graphics',\n  NineSlicePlane: 'NineSlicePlane',\n  ParticleContainer: 'ParticleContainer',\n  Sprite: 'Sprite',\n  AnimatedSprite: 'AnimatedSprite',\n  Text: 'Text',\n  TilingSprite: 'TilingSprite',\n  SimpleMesh: 'SimpleMesh',\n  SimpleRope: 'SimpleRope'\n};\nvar ELEMENTS = Object.keys(TYPES).reduce(function (elements, type) {\n  return _objectSpread$2(_objectSpread$2({}, elements), {}, _defineProperty({}, type, components[type]));\n}, {});\n\n/**\n * Inject types\n *\n * @type {Object}\n */\nvar TYPES_INJECTED = {};\n\n/**\n * Create an element based on tag type\n * Similar to react-dom's `React.createElement()`\n *\n * @param {string} type Element type\n * @param {Object} props Component props\n * @param {Object} root Root instance\n */\nfunction createElement(type) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var fn = ELEMENTS[type];\n  var instance;\n  var applyProps;\n  if (typeof fn === 'function') {\n    instance = fn(root, props);\n  }\n  if (!instance) {\n    // not found, is there any injected custom component?\n    var injected = TYPES_INJECTED[type];\n    if (injected) {\n      instance = injected.create(props);\n      instance.didMount = injected.didMount ? injected.didMount.bind(instance) : undefined;\n      instance.willUnmount = injected.willUnmount ? injected.willUnmount.bind(instance) : undefined;\n      instance.applyProps = injected.applyProps ? injected.applyProps.bind(instance) : undefined;\n      instance.config = injected.config;\n    }\n  }\n\n  // apply initial props!\n  if (instance) {\n    var _instance;\n    applyProps = typeof ((_instance = instance) === null || _instance === void 0 ? void 0 : _instance.applyProps) === 'function' ? instance.applyProps : applyDefaultProps;\n    applyProps(instance, {}, props);\n    instance.__reactpixi = {\n      root: root\n    };\n  }\n  return instance;\n}\n\n/**\n * Create Component\n *\n * @param {string} type\n * @param {Object} lifecycle methods\n */\nfunction PixiComponent(type, lifecycle) {\n  invariant(!!type, 'Expect type to be defined, got `%s`', type);\n  invariant(!TYPES[type], 'Component `%s` could not be created, already exists in default components.', type);\n  TYPES_INJECTED[type] = lifecycle;\n  return type;\n}\n\nvar reactReconcilerExports = {};\nvar reactReconciler = {\n  get exports(){ return reactReconcilerExports; },\n  set exports(v){ reactReconcilerExports = v; },\n};\n\nvar schedulerExports = {};\nvar scheduler = {\n  get exports(){ return schedulerExports; },\n  set exports(v){ schedulerExports = v; },\n};\n\nvar scheduler_development = {};\n\n/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredScheduler_development;\n\nfunction requireScheduler_development () {\n\tif (hasRequiredScheduler_development) return scheduler_development;\n\thasRequiredScheduler_development = 1;\n\t(function (exports) {\n\n\t\t{\n\t\t  (function() {\n\n\t\t/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\t\tif (\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n\t\t    'function'\n\t\t) {\n\t\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n\t\t}\n\t\t          var enableSchedulerDebugging = false;\n\t\tvar enableProfiling = false;\n\t\tvar frameYieldMs = 5;\n\n\t\tfunction push(heap, node) {\n\t\t  var index = heap.length;\n\t\t  heap.push(node);\n\t\t  siftUp(heap, node, index);\n\t\t}\n\t\tfunction peek(heap) {\n\t\t  return heap.length === 0 ? null : heap[0];\n\t\t}\n\t\tfunction pop(heap) {\n\t\t  if (heap.length === 0) {\n\t\t    return null;\n\t\t  }\n\n\t\t  var first = heap[0];\n\t\t  var last = heap.pop();\n\n\t\t  if (last !== first) {\n\t\t    heap[0] = last;\n\t\t    siftDown(heap, last, 0);\n\t\t  }\n\n\t\t  return first;\n\t\t}\n\n\t\tfunction siftUp(heap, node, i) {\n\t\t  var index = i;\n\n\t\t  while (index > 0) {\n\t\t    var parentIndex = index - 1 >>> 1;\n\t\t    var parent = heap[parentIndex];\n\n\t\t    if (compare(parent, node) > 0) {\n\t\t      // The parent is larger. Swap positions.\n\t\t      heap[parentIndex] = node;\n\t\t      heap[index] = parent;\n\t\t      index = parentIndex;\n\t\t    } else {\n\t\t      // The parent is smaller. Exit.\n\t\t      return;\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction siftDown(heap, node, i) {\n\t\t  var index = i;\n\t\t  var length = heap.length;\n\t\t  var halfLength = length >>> 1;\n\n\t\t  while (index < halfLength) {\n\t\t    var leftIndex = (index + 1) * 2 - 1;\n\t\t    var left = heap[leftIndex];\n\t\t    var rightIndex = leftIndex + 1;\n\t\t    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n\t\t    if (compare(left, node) < 0) {\n\t\t      if (rightIndex < length && compare(right, left) < 0) {\n\t\t        heap[index] = right;\n\t\t        heap[rightIndex] = node;\n\t\t        index = rightIndex;\n\t\t      } else {\n\t\t        heap[index] = left;\n\t\t        heap[leftIndex] = node;\n\t\t        index = leftIndex;\n\t\t      }\n\t\t    } else if (rightIndex < length && compare(right, node) < 0) {\n\t\t      heap[index] = right;\n\t\t      heap[rightIndex] = node;\n\t\t      index = rightIndex;\n\t\t    } else {\n\t\t      // Neither child is smaller. Exit.\n\t\t      return;\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction compare(a, b) {\n\t\t  // Compare sort index first, then task id.\n\t\t  var diff = a.sortIndex - b.sortIndex;\n\t\t  return diff !== 0 ? diff : a.id - b.id;\n\t\t}\n\n\t\t// TODO: Use symbols?\n\t\tvar ImmediatePriority = 1;\n\t\tvar UserBlockingPriority = 2;\n\t\tvar NormalPriority = 3;\n\t\tvar LowPriority = 4;\n\t\tvar IdlePriority = 5;\n\n\t\tfunction markTaskErrored(task, ms) {\n\t\t}\n\n\t\t/* eslint-disable no-var */\n\n\t\tvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n\t\tif (hasPerformanceNow) {\n\t\t  var localPerformance = performance;\n\n\t\t  exports.unstable_now = function () {\n\t\t    return localPerformance.now();\n\t\t  };\n\t\t} else {\n\t\t  var localDate = Date;\n\t\t  var initialTime = localDate.now();\n\n\t\t  exports.unstable_now = function () {\n\t\t    return localDate.now() - initialTime;\n\t\t  };\n\t\t} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n\t\t// Math.pow(2, 30) - 1\n\t\t// 0b111111111111111111111111111111\n\n\n\t\tvar maxSigned31BitInt = 1073741823; // Times out immediately\n\n\t\tvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n\t\tvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n\t\tvar NORMAL_PRIORITY_TIMEOUT = 5000;\n\t\tvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n\t\tvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\n\t\tvar taskQueue = [];\n\t\tvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n\t\tvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\t\tvar currentTask = null;\n\t\tvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\n\t\tvar isPerformingWork = false;\n\t\tvar isHostCallbackScheduled = false;\n\t\tvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\n\t\tvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\n\t\tvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\n\t\tvar localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\n\t\ttypeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\n\n\t\tfunction advanceTimers(currentTime) {\n\t\t  // Check for tasks that are no longer delayed and add them to the queue.\n\t\t  var timer = peek(timerQueue);\n\n\t\t  while (timer !== null) {\n\t\t    if (timer.callback === null) {\n\t\t      // Timer was cancelled.\n\t\t      pop(timerQueue);\n\t\t    } else if (timer.startTime <= currentTime) {\n\t\t      // Timer fired. Transfer to the task queue.\n\t\t      pop(timerQueue);\n\t\t      timer.sortIndex = timer.expirationTime;\n\t\t      push(taskQueue, timer);\n\t\t    } else {\n\t\t      // Remaining timers are pending.\n\t\t      return;\n\t\t    }\n\n\t\t    timer = peek(timerQueue);\n\t\t  }\n\t\t}\n\n\t\tfunction handleTimeout(currentTime) {\n\t\t  isHostTimeoutScheduled = false;\n\t\t  advanceTimers(currentTime);\n\n\t\t  if (!isHostCallbackScheduled) {\n\t\t    if (peek(taskQueue) !== null) {\n\t\t      isHostCallbackScheduled = true;\n\t\t      requestHostCallback(flushWork);\n\t\t    } else {\n\t\t      var firstTimer = peek(timerQueue);\n\n\t\t      if (firstTimer !== null) {\n\t\t        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n\t\t  isHostCallbackScheduled = false;\n\n\t\t  if (isHostTimeoutScheduled) {\n\t\t    // We scheduled a timeout but it's no longer needed. Cancel it.\n\t\t    isHostTimeoutScheduled = false;\n\t\t    cancelHostTimeout();\n\t\t  }\n\n\t\t  isPerformingWork = true;\n\t\t  var previousPriorityLevel = currentPriorityLevel;\n\n\t\t  try {\n\t\t    var currentTime; if (enableProfiling) ; else {\n\t\t      // No catch in prod code path.\n\t\t      return workLoop(hasTimeRemaining, initialTime);\n\t\t    }\n\t\t  } finally {\n\t\t    currentTask = null;\n\t\t    currentPriorityLevel = previousPriorityLevel;\n\t\t    isPerformingWork = false;\n\t\t  }\n\t\t}\n\n\t\tfunction workLoop(hasTimeRemaining, initialTime) {\n\t\t  var currentTime = initialTime;\n\t\t  advanceTimers(currentTime);\n\t\t  currentTask = peek(taskQueue);\n\n\t\t  while (currentTask !== null && !(enableSchedulerDebugging )) {\n\t\t    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n\t\t      // This currentTask hasn't expired, and we've reached the deadline.\n\t\t      break;\n\t\t    }\n\n\t\t    var callback = currentTask.callback;\n\n\t\t    if (typeof callback === 'function') {\n\t\t      currentTask.callback = null;\n\t\t      currentPriorityLevel = currentTask.priorityLevel;\n\t\t      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n\t\t      var continuationCallback = callback(didUserCallbackTimeout);\n\t\t      currentTime = exports.unstable_now();\n\n\t\t      if (typeof continuationCallback === 'function') {\n\t\t        currentTask.callback = continuationCallback;\n\t\t      } else {\n\n\t\t        if (currentTask === peek(taskQueue)) {\n\t\t          pop(taskQueue);\n\t\t        }\n\t\t      }\n\n\t\t      advanceTimers(currentTime);\n\t\t    } else {\n\t\t      pop(taskQueue);\n\t\t    }\n\n\t\t    currentTask = peek(taskQueue);\n\t\t  } // Return whether there's additional work\n\n\n\t\t  if (currentTask !== null) {\n\t\t    return true;\n\t\t  } else {\n\t\t    var firstTimer = peek(timerQueue);\n\n\t\t    if (firstTimer !== null) {\n\t\t      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n\t\t    }\n\n\t\t    return false;\n\t\t  }\n\t\t}\n\n\t\tfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n\t\t  switch (priorityLevel) {\n\t\t    case ImmediatePriority:\n\t\t    case UserBlockingPriority:\n\t\t    case NormalPriority:\n\t\t    case LowPriority:\n\t\t    case IdlePriority:\n\t\t      break;\n\n\t\t    default:\n\t\t      priorityLevel = NormalPriority;\n\t\t  }\n\n\t\t  var previousPriorityLevel = currentPriorityLevel;\n\t\t  currentPriorityLevel = priorityLevel;\n\n\t\t  try {\n\t\t    return eventHandler();\n\t\t  } finally {\n\t\t    currentPriorityLevel = previousPriorityLevel;\n\t\t  }\n\t\t}\n\n\t\tfunction unstable_next(eventHandler) {\n\t\t  var priorityLevel;\n\n\t\t  switch (currentPriorityLevel) {\n\t\t    case ImmediatePriority:\n\t\t    case UserBlockingPriority:\n\t\t    case NormalPriority:\n\t\t      // Shift down to normal priority\n\t\t      priorityLevel = NormalPriority;\n\t\t      break;\n\n\t\t    default:\n\t\t      // Anything lower than normal priority should remain at the current level.\n\t\t      priorityLevel = currentPriorityLevel;\n\t\t      break;\n\t\t  }\n\n\t\t  var previousPriorityLevel = currentPriorityLevel;\n\t\t  currentPriorityLevel = priorityLevel;\n\n\t\t  try {\n\t\t    return eventHandler();\n\t\t  } finally {\n\t\t    currentPriorityLevel = previousPriorityLevel;\n\t\t  }\n\t\t}\n\n\t\tfunction unstable_wrapCallback(callback) {\n\t\t  var parentPriorityLevel = currentPriorityLevel;\n\t\t  return function () {\n\t\t    // This is a fork of runWithPriority, inlined for performance.\n\t\t    var previousPriorityLevel = currentPriorityLevel;\n\t\t    currentPriorityLevel = parentPriorityLevel;\n\n\t\t    try {\n\t\t      return callback.apply(this, arguments);\n\t\t    } finally {\n\t\t      currentPriorityLevel = previousPriorityLevel;\n\t\t    }\n\t\t  };\n\t\t}\n\n\t\tfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n\t\t  var currentTime = exports.unstable_now();\n\t\t  var startTime;\n\n\t\t  if (typeof options === 'object' && options !== null) {\n\t\t    var delay = options.delay;\n\n\t\t    if (typeof delay === 'number' && delay > 0) {\n\t\t      startTime = currentTime + delay;\n\t\t    } else {\n\t\t      startTime = currentTime;\n\t\t    }\n\t\t  } else {\n\t\t    startTime = currentTime;\n\t\t  }\n\n\t\t  var timeout;\n\n\t\t  switch (priorityLevel) {\n\t\t    case ImmediatePriority:\n\t\t      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n\t\t      break;\n\n\t\t    case UserBlockingPriority:\n\t\t      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n\t\t      break;\n\n\t\t    case IdlePriority:\n\t\t      timeout = IDLE_PRIORITY_TIMEOUT;\n\t\t      break;\n\n\t\t    case LowPriority:\n\t\t      timeout = LOW_PRIORITY_TIMEOUT;\n\t\t      break;\n\n\t\t    case NormalPriority:\n\t\t    default:\n\t\t      timeout = NORMAL_PRIORITY_TIMEOUT;\n\t\t      break;\n\t\t  }\n\n\t\t  var expirationTime = startTime + timeout;\n\t\t  var newTask = {\n\t\t    id: taskIdCounter++,\n\t\t    callback: callback,\n\t\t    priorityLevel: priorityLevel,\n\t\t    startTime: startTime,\n\t\t    expirationTime: expirationTime,\n\t\t    sortIndex: -1\n\t\t  };\n\n\t\t  if (startTime > currentTime) {\n\t\t    // This is a delayed task.\n\t\t    newTask.sortIndex = startTime;\n\t\t    push(timerQueue, newTask);\n\n\t\t    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n\t\t      // All tasks are delayed, and this is the task with the earliest delay.\n\t\t      if (isHostTimeoutScheduled) {\n\t\t        // Cancel an existing timeout.\n\t\t        cancelHostTimeout();\n\t\t      } else {\n\t\t        isHostTimeoutScheduled = true;\n\t\t      } // Schedule a timeout.\n\n\n\t\t      requestHostTimeout(handleTimeout, startTime - currentTime);\n\t\t    }\n\t\t  } else {\n\t\t    newTask.sortIndex = expirationTime;\n\t\t    push(taskQueue, newTask);\n\t\t    // wait until the next time we yield.\n\n\n\t\t    if (!isHostCallbackScheduled && !isPerformingWork) {\n\t\t      isHostCallbackScheduled = true;\n\t\t      requestHostCallback(flushWork);\n\t\t    }\n\t\t  }\n\n\t\t  return newTask;\n\t\t}\n\n\t\tfunction unstable_pauseExecution() {\n\t\t}\n\n\t\tfunction unstable_continueExecution() {\n\n\t\t  if (!isHostCallbackScheduled && !isPerformingWork) {\n\t\t    isHostCallbackScheduled = true;\n\t\t    requestHostCallback(flushWork);\n\t\t  }\n\t\t}\n\n\t\tfunction unstable_getFirstCallbackNode() {\n\t\t  return peek(taskQueue);\n\t\t}\n\n\t\tfunction unstable_cancelCallback(task) {\n\t\t  // remove from the queue because you can't remove arbitrary nodes from an\n\t\t  // array based heap, only the first one.)\n\n\n\t\t  task.callback = null;\n\t\t}\n\n\t\tfunction unstable_getCurrentPriorityLevel() {\n\t\t  return currentPriorityLevel;\n\t\t}\n\n\t\tvar isMessageLoopRunning = false;\n\t\tvar scheduledHostCallback = null;\n\t\tvar taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n\t\t// thread, like user events. By default, it yields multiple times per frame.\n\t\t// It does not attempt to align with frame boundaries, since most tasks don't\n\t\t// need to be frame aligned; for those that do, use requestAnimationFrame.\n\n\t\tvar frameInterval = frameYieldMs;\n\t\tvar startTime = -1;\n\n\t\tfunction shouldYieldToHost() {\n\t\t  var timeElapsed = exports.unstable_now() - startTime;\n\n\t\t  if (timeElapsed < frameInterval) {\n\t\t    // The main thread has only been blocked for a really short amount of time;\n\t\t    // smaller than a single frame. Don't yield yet.\n\t\t    return false;\n\t\t  } // The main thread has been blocked for a non-negligible amount of time. We\n\n\n\t\t  return true;\n\t\t}\n\n\t\tfunction requestPaint() {\n\n\t\t}\n\n\t\tfunction forceFrameRate(fps) {\n\t\t  if (fps < 0 || fps > 125) {\n\t\t    // Using console['error'] to evade Babel and ESLint\n\t\t    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n\t\t    return;\n\t\t  }\n\n\t\t  if (fps > 0) {\n\t\t    frameInterval = Math.floor(1000 / fps);\n\t\t  } else {\n\t\t    // reset the framerate\n\t\t    frameInterval = frameYieldMs;\n\t\t  }\n\t\t}\n\n\t\tvar performWorkUntilDeadline = function () {\n\t\t  if (scheduledHostCallback !== null) {\n\t\t    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n\t\t    // has been blocked.\n\n\t\t    startTime = currentTime;\n\t\t    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n\t\t    // error can be observed.\n\t\t    //\n\t\t    // Intentionally not using a try-catch, since that makes some debugging\n\t\t    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n\t\t    // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n\t\t    var hasMoreWork = true;\n\n\t\t    try {\n\t\t      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\t\t    } finally {\n\t\t      if (hasMoreWork) {\n\t\t        // If there's more work, schedule the next message event at the end\n\t\t        // of the preceding one.\n\t\t        schedulePerformWorkUntilDeadline();\n\t\t      } else {\n\t\t        isMessageLoopRunning = false;\n\t\t        scheduledHostCallback = null;\n\t\t      }\n\t\t    }\n\t\t  } else {\n\t\t    isMessageLoopRunning = false;\n\t\t  } // Yielding to the browser will give it a chance to paint, so we can\n\t\t};\n\n\t\tvar schedulePerformWorkUntilDeadline;\n\n\t\tif (typeof localSetImmediate === 'function') {\n\t\t  // Node.js and old IE.\n\t\t  // There's a few reasons for why we prefer setImmediate.\n\t\t  //\n\t\t  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n\t\t  // (Even though this is a DOM fork of the Scheduler, you could get here\n\t\t  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n\t\t  // https://github.com/facebook/react/issues/20756\n\t\t  //\n\t\t  // But also, it runs earlier which is the semantic we want.\n\t\t  // If other browsers ever implement it, it's better to use it.\n\t\t  // Although both of these would be inferior to native scheduling.\n\t\t  schedulePerformWorkUntilDeadline = function () {\n\t\t    localSetImmediate(performWorkUntilDeadline);\n\t\t  };\n\t\t} else if (typeof MessageChannel !== 'undefined') {\n\t\t  // DOM and Worker environments.\n\t\t  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n\t\t  var channel = new MessageChannel();\n\t\t  var port = channel.port2;\n\t\t  channel.port1.onmessage = performWorkUntilDeadline;\n\n\t\t  schedulePerformWorkUntilDeadline = function () {\n\t\t    port.postMessage(null);\n\t\t  };\n\t\t} else {\n\t\t  // We should only fallback here in non-browser environments.\n\t\t  schedulePerformWorkUntilDeadline = function () {\n\t\t    localSetTimeout(performWorkUntilDeadline, 0);\n\t\t  };\n\t\t}\n\n\t\tfunction requestHostCallback(callback) {\n\t\t  scheduledHostCallback = callback;\n\n\t\t  if (!isMessageLoopRunning) {\n\t\t    isMessageLoopRunning = true;\n\t\t    schedulePerformWorkUntilDeadline();\n\t\t  }\n\t\t}\n\n\t\tfunction requestHostTimeout(callback, ms) {\n\t\t  taskTimeoutID = localSetTimeout(function () {\n\t\t    callback(exports.unstable_now());\n\t\t  }, ms);\n\t\t}\n\n\t\tfunction cancelHostTimeout() {\n\t\t  localClearTimeout(taskTimeoutID);\n\t\t  taskTimeoutID = -1;\n\t\t}\n\n\t\tvar unstable_requestPaint = requestPaint;\n\t\tvar unstable_Profiling =  null;\n\n\t\texports.unstable_IdlePriority = IdlePriority;\n\t\texports.unstable_ImmediatePriority = ImmediatePriority;\n\t\texports.unstable_LowPriority = LowPriority;\n\t\texports.unstable_NormalPriority = NormalPriority;\n\t\texports.unstable_Profiling = unstable_Profiling;\n\t\texports.unstable_UserBlockingPriority = UserBlockingPriority;\n\t\texports.unstable_cancelCallback = unstable_cancelCallback;\n\t\texports.unstable_continueExecution = unstable_continueExecution;\n\t\texports.unstable_forceFrameRate = forceFrameRate;\n\t\texports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n\t\texports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n\t\texports.unstable_next = unstable_next;\n\t\texports.unstable_pauseExecution = unstable_pauseExecution;\n\t\texports.unstable_requestPaint = unstable_requestPaint;\n\t\texports.unstable_runWithPriority = unstable_runWithPriority;\n\t\texports.unstable_scheduleCallback = unstable_scheduleCallback;\n\t\texports.unstable_shouldYield = shouldYieldToHost;\n\t\texports.unstable_wrapCallback = unstable_wrapCallback;\n\t\t          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\t\tif (\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n\t\t    'function'\n\t\t) {\n\t\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n\t\t}\n\t\t        \n\t\t  })();\n\t\t}\n} (scheduler_development));\n\treturn scheduler_development;\n}\n\nvar hasRequiredScheduler;\n\nfunction requireScheduler () {\n\tif (hasRequiredScheduler) return schedulerExports;\n\thasRequiredScheduler = 1;\n\t(function (module) {\n\n\t\t{\n\t\t  module.exports = requireScheduler_development();\n\t\t}\n} (scheduler));\n\treturn schedulerExports;\n}\n\nvar reactReconciler_developmentExports = {};\nvar reactReconciler_development = {\n  get exports(){ return reactReconciler_developmentExports; },\n  set exports(v){ reactReconciler_developmentExports = v; },\n};\n\n/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredReactReconciler_development;\n\nfunction requireReactReconciler_development () {\n\tif (hasRequiredReactReconciler_development) return reactReconciler_developmentExports;\n\thasRequiredReactReconciler_development = 1;\n\n\t{\n\t  reactReconciler_development.exports = function $$$reconciler($$$hostConfig) {\n\t    var exports = {};\n\n\tvar React$1 = (react__WEBPACK_IMPORTED_MODULE_12___default());\n\tvar Scheduler = requireScheduler();\n\n\tvar ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n\tvar suppressWarning = false;\n\tfunction setSuppressWarning(newSuppressWarning) {\n\t  {\n\t    suppressWarning = newSuppressWarning;\n\t  }\n\t} // In DEV, calls to console.warn and console.error get replaced\n\t// by calls to these methods by a Babel plugin.\n\t//\n\t// In PROD (or in packages without access to React internals),\n\t// they are left as they are instead.\n\n\tfunction warn(format) {\n\t  {\n\t    if (!suppressWarning) {\n\t      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\n\t      printWarning('warn', format, args);\n\t    }\n\t  }\n\t}\n\tfunction error(format) {\n\t  {\n\t    if (!suppressWarning) {\n\t      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t        args[_key2 - 1] = arguments[_key2];\n\t      }\n\n\t      printWarning('error', format, args);\n\t    }\n\t  }\n\t}\n\n\tfunction printWarning(level, format, args) {\n\t  // When changing this logic, you might want to also\n\t  // update consoleWithStackDev.www.js as well.\n\t  {\n\t    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\t    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n\t    if (stack !== '') {\n\t      format += '%s';\n\t      args = args.concat([stack]);\n\t    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n\t    var argsWithFormat = args.map(function (item) {\n\t      return String(item);\n\t    }); // Careful: RN currently depends on this prefix\n\n\t    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n\t    // breaks IE9: https://github.com/facebook/react/issues/13610\n\t    // eslint-disable-next-line react-internal/no-production-logging\n\n\t    Function.prototype.apply.call(console[level], console, argsWithFormat);\n\t  }\n\t}\n\n\tvar assign = Object.assign;\n\n\t/**\n\t * `ReactInstanceMap` maintains a mapping from a public facing stateful\n\t * instance (key) and the internal representation (value). This allows public\n\t * methods to accept the user facing instance as an argument and map them back\n\t * to internal methods.\n\t *\n\t * Note that this module is currently shared and assumed to be stateless.\n\t * If this becomes an actual Map, that will break.\n\t */\n\tfunction get(key) {\n\t  return key._reactInternals;\n\t}\n\tfunction set(key, value) {\n\t  key._reactInternals = value;\n\t}\n\n\t// -----------------------------------------------------------------------------\n\t// the react-reconciler package.\n\n\tvar enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\n\tvar enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\n\tvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\n\tvar enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\n\tvar warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n\t// Debugging and DevTools\n\t// -----------------------------------------------------------------------------\n\t// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n\t// for an experimental timeline tool.\n\n\tvar enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\n\tvar enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\n\tvar enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\n\tvar FunctionComponent = 0;\n\tvar ClassComponent = 1;\n\tvar IndeterminateComponent = 2; // Before we know whether it is function or class\n\n\tvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n\tvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n\tvar HostComponent = 5;\n\tvar HostText = 6;\n\tvar Fragment = 7;\n\tvar Mode = 8;\n\tvar ContextConsumer = 9;\n\tvar ContextProvider = 10;\n\tvar ForwardRef = 11;\n\tvar Profiler = 12;\n\tvar SuspenseComponent = 13;\n\tvar MemoComponent = 14;\n\tvar SimpleMemoComponent = 15;\n\tvar LazyComponent = 16;\n\tvar IncompleteClassComponent = 17;\n\tvar DehydratedFragment = 18;\n\tvar SuspenseListComponent = 19;\n\tvar ScopeComponent = 21;\n\tvar OffscreenComponent = 22;\n\tvar LegacyHiddenComponent = 23;\n\tvar CacheComponent = 24;\n\tvar TracingMarkerComponent = 25;\n\n\t// ATTENTION\n\t// When adding new symbols to this file,\n\t// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\t// The Symbol used to tag the ReactElement-like types.\n\tvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\n\tvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\n\tvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n\tvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n\tvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n\tvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n\tvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\n\tvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n\tvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n\tvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n\tvar REACT_MEMO_TYPE = Symbol.for('react.memo');\n\tvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\n\tvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\n\tvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\n\tvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n\tvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\n\tvar REACT_CACHE_TYPE = Symbol.for('react.cache');\n\tvar REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\n\tvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n\tvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\tfunction getIteratorFn(maybeIterable) {\n\t  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n\t    return null;\n\t  }\n\n\t  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n\t  if (typeof maybeIterator === 'function') {\n\t    return maybeIterator;\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction getWrappedName(outerType, innerType, wrapperName) {\n\t  var displayName = outerType.displayName;\n\n\t  if (displayName) {\n\t    return displayName;\n\t  }\n\n\t  var functionName = innerType.displayName || innerType.name || '';\n\t  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n\t} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\n\tfunction getContextName(type) {\n\t  return type.displayName || 'Context';\n\t} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\n\tfunction getComponentNameFromType(type) {\n\t  if (type == null) {\n\t    // Host root, text node or just invalid type.\n\t    return null;\n\t  }\n\n\t  {\n\t    if (typeof type.tag === 'number') {\n\t      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n\t    }\n\t  }\n\n\t  if (typeof type === 'function') {\n\t    return type.displayName || type.name || null;\n\t  }\n\n\t  if (typeof type === 'string') {\n\t    return type;\n\t  }\n\n\t  switch (type) {\n\t    case REACT_FRAGMENT_TYPE:\n\t      return 'Fragment';\n\n\t    case REACT_PORTAL_TYPE:\n\t      return 'Portal';\n\n\t    case REACT_PROFILER_TYPE:\n\t      return 'Profiler';\n\n\t    case REACT_STRICT_MODE_TYPE:\n\t      return 'StrictMode';\n\n\t    case REACT_SUSPENSE_TYPE:\n\t      return 'Suspense';\n\n\t    case REACT_SUSPENSE_LIST_TYPE:\n\t      return 'SuspenseList';\n\n\t  }\n\n\t  if (typeof type === 'object') {\n\t    switch (type.$$typeof) {\n\t      case REACT_CONTEXT_TYPE:\n\t        var context = type;\n\t        return getContextName(context) + '.Consumer';\n\n\t      case REACT_PROVIDER_TYPE:\n\t        var provider = type;\n\t        return getContextName(provider._context) + '.Provider';\n\n\t      case REACT_FORWARD_REF_TYPE:\n\t        return getWrappedName(type, type.render, 'ForwardRef');\n\n\t      case REACT_MEMO_TYPE:\n\t        var outerName = type.displayName || null;\n\n\t        if (outerName !== null) {\n\t          return outerName;\n\t        }\n\n\t        return getComponentNameFromType(type.type) || 'Memo';\n\n\t      case REACT_LAZY_TYPE:\n\t        {\n\t          var lazyComponent = type;\n\t          var payload = lazyComponent._payload;\n\t          var init = lazyComponent._init;\n\n\t          try {\n\t            return getComponentNameFromType(init(payload));\n\t          } catch (x) {\n\t            return null;\n\t          }\n\t        }\n\n\t      // eslint-disable-next-line no-fallthrough\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction getWrappedName$1(outerType, innerType, wrapperName) {\n\t  var functionName = innerType.displayName || innerType.name || '';\n\t  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n\t} // Keep in sync with shared/getComponentNameFromType\n\n\n\tfunction getContextName$1(type) {\n\t  return type.displayName || 'Context';\n\t}\n\n\tfunction getComponentNameFromFiber(fiber) {\n\t  var tag = fiber.tag,\n\t      type = fiber.type;\n\n\t  switch (tag) {\n\t    case CacheComponent:\n\t      return 'Cache';\n\n\t    case ContextConsumer:\n\t      var context = type;\n\t      return getContextName$1(context) + '.Consumer';\n\n\t    case ContextProvider:\n\t      var provider = type;\n\t      return getContextName$1(provider._context) + '.Provider';\n\n\t    case DehydratedFragment:\n\t      return 'DehydratedFragment';\n\n\t    case ForwardRef:\n\t      return getWrappedName$1(type, type.render, 'ForwardRef');\n\n\t    case Fragment:\n\t      return 'Fragment';\n\n\t    case HostComponent:\n\t      // Host component type is the display name (e.g. \"div\", \"View\")\n\t      return type;\n\n\t    case HostPortal:\n\t      return 'Portal';\n\n\t    case HostRoot:\n\t      return 'Root';\n\n\t    case HostText:\n\t      return 'Text';\n\n\t    case LazyComponent:\n\t      // Name comes from the type in this case; we don't have a tag.\n\t      return getComponentNameFromType(type);\n\n\t    case Mode:\n\t      if (type === REACT_STRICT_MODE_TYPE) {\n\t        // Don't be less specific than shared/getComponentNameFromType\n\t        return 'StrictMode';\n\t      }\n\n\t      return 'Mode';\n\n\t    case OffscreenComponent:\n\t      return 'Offscreen';\n\n\t    case Profiler:\n\t      return 'Profiler';\n\n\t    case ScopeComponent:\n\t      return 'Scope';\n\n\t    case SuspenseComponent:\n\t      return 'Suspense';\n\n\t    case SuspenseListComponent:\n\t      return 'SuspenseList';\n\n\t    case TracingMarkerComponent:\n\t      return 'TracingMarker';\n\t    // The display name for this tags come from the user-provided type:\n\n\t    case ClassComponent:\n\t    case FunctionComponent:\n\t    case IncompleteClassComponent:\n\t    case IndeterminateComponent:\n\t    case MemoComponent:\n\t    case SimpleMemoComponent:\n\t      if (typeof type === 'function') {\n\t        return type.displayName || type.name || null;\n\t      }\n\n\t      if (typeof type === 'string') {\n\t        return type;\n\t      }\n\n\t      break;\n\n\t  }\n\n\t  return null;\n\t}\n\n\t// Don't change these two values. They're used by React Dev Tools.\n\tvar NoFlags =\n\t/*                      */\n\t0;\n\tvar PerformedWork =\n\t/*                */\n\t1; // You can change the rest (and add more).\n\n\tvar Placement =\n\t/*                    */\n\t2;\n\tvar Update =\n\t/*                       */\n\t4;\n\tvar ChildDeletion =\n\t/*                */\n\t16;\n\tvar ContentReset =\n\t/*                 */\n\t32;\n\tvar Callback =\n\t/*                     */\n\t64;\n\tvar DidCapture =\n\t/*                   */\n\t128;\n\tvar ForceClientRender =\n\t/*            */\n\t256;\n\tvar Ref =\n\t/*                          */\n\t512;\n\tvar Snapshot =\n\t/*                     */\n\t1024;\n\tvar Passive =\n\t/*                      */\n\t2048;\n\tvar Hydrating =\n\t/*                    */\n\t4096;\n\tvar Visibility =\n\t/*                   */\n\t8192;\n\tvar StoreConsistency =\n\t/*             */\n\t16384;\n\tvar LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\n\tvar HostEffectMask =\n\t/*               */\n\t32767; // These are not really side effects, but we still reuse this field.\n\n\tvar Incomplete =\n\t/*                   */\n\t32768;\n\tvar ShouldCapture =\n\t/*                */\n\t65536;\n\tvar ForceUpdateForLegacySuspense =\n\t/* */\n\t131072;\n\tvar Forked =\n\t/*                       */\n\t1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n\t// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n\t// This enables us to defer more work in the unmount case,\n\t// since we can defer traversing the tree during layout to look for Passive effects,\n\t// and instead rely on the static flag as a signal that there may be cleanup work.\n\n\tvar RefStatic =\n\t/*                    */\n\t2097152;\n\tvar LayoutStatic =\n\t/*                 */\n\t4194304;\n\tvar PassiveStatic =\n\t/*                */\n\t8388608; // These flags allow us to traverse to fibers that have effects on mount\n\t// without traversing the entire tree after every commit for\n\t// double invoking\n\n\tvar MountLayoutDev =\n\t/*               */\n\t16777216;\n\tvar MountPassiveDev =\n\t/*              */\n\t33554432; // Groups of flags that are used in the commit phase to skip over trees that\n\t// don't contain effects, by checking subtreeFlags.\n\n\tvar BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n\t// flag logic (see #20043)\n\tUpdate | Snapshot | ( 0);\n\tvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n\tvar LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\n\tvar PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n\t// This allows certain concepts to persist without recalculating them,\n\t// e.g. whether a subtree contains passive effects or portals.\n\n\tvar StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n\n\tvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\tfunction getNearestMountedFiber(fiber) {\n\t  var node = fiber;\n\t  var nearestMounted = fiber;\n\n\t  if (!fiber.alternate) {\n\t    // If there is no alternate, this might be a new tree that isn't inserted\n\t    // yet. If it is, then it will have a pending insertion effect on it.\n\t    var nextNode = node;\n\n\t    do {\n\t      node = nextNode;\n\n\t      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n\t        // This is an insertion or in-progress hydration. The nearest possible\n\t        // mounted fiber is the parent but we need to continue to figure out\n\t        // if that one is still mounted.\n\t        nearestMounted = node.return;\n\t      }\n\n\t      nextNode = node.return;\n\t    } while (nextNode);\n\t  } else {\n\t    while (node.return) {\n\t      node = node.return;\n\t    }\n\t  }\n\n\t  if (node.tag === HostRoot) {\n\t    // TODO: Check if this was a nested HostRoot when used with\n\t    // renderContainerIntoSubtree.\n\t    return nearestMounted;\n\t  } // If we didn't hit the root, that means that we're in an disconnected tree\n\t  // that has been unmounted.\n\n\n\t  return null;\n\t}\n\tfunction isFiberMounted(fiber) {\n\t  return getNearestMountedFiber(fiber) === fiber;\n\t}\n\tfunction isMounted(component) {\n\t  {\n\t    var owner = ReactCurrentOwner.current;\n\n\t    if (owner !== null && owner.tag === ClassComponent) {\n\t      var ownerFiber = owner;\n\t      var instance = ownerFiber.stateNode;\n\n\t      if (!instance._warnedAboutRefsInRender) {\n\t        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n\t      }\n\n\t      instance._warnedAboutRefsInRender = true;\n\t    }\n\t  }\n\n\t  var fiber = get(component);\n\n\t  if (!fiber) {\n\t    return false;\n\t  }\n\n\t  return getNearestMountedFiber(fiber) === fiber;\n\t}\n\n\tfunction assertIsMounted(fiber) {\n\t  if (getNearestMountedFiber(fiber) !== fiber) {\n\t    throw new Error('Unable to find node on an unmounted component.');\n\t  }\n\t}\n\n\tfunction findCurrentFiberUsingSlowPath(fiber) {\n\t  var alternate = fiber.alternate;\n\n\t  if (!alternate) {\n\t    // If there is no alternate, then we only need to check if it is mounted.\n\t    var nearestMounted = getNearestMountedFiber(fiber);\n\n\t    if (nearestMounted === null) {\n\t      throw new Error('Unable to find node on an unmounted component.');\n\t    }\n\n\t    if (nearestMounted !== fiber) {\n\t      return null;\n\t    }\n\n\t    return fiber;\n\t  } // If we have two possible branches, we'll walk backwards up to the root\n\t  // to see what path the root points to. On the way we may hit one of the\n\t  // special cases and we'll deal with them.\n\n\n\t  var a = fiber;\n\t  var b = alternate;\n\n\t  while (true) {\n\t    var parentA = a.return;\n\n\t    if (parentA === null) {\n\t      // We're at the root.\n\t      break;\n\t    }\n\n\t    var parentB = parentA.alternate;\n\n\t    if (parentB === null) {\n\t      // There is no alternate. This is an unusual case. Currently, it only\n\t      // happens when a Suspense component is hidden. An extra fragment fiber\n\t      // is inserted in between the Suspense fiber and its children. Skip\n\t      // over this extra fragment fiber and proceed to the next parent.\n\t      var nextParent = parentA.return;\n\n\t      if (nextParent !== null) {\n\t        a = b = nextParent;\n\t        continue;\n\t      } // If there's no parent, we're at the root.\n\n\n\t      break;\n\t    } // If both copies of the parent fiber point to the same child, we can\n\t    // assume that the child is current. This happens when we bailout on low\n\t    // priority: the bailed out fiber's child reuses the current child.\n\n\n\t    if (parentA.child === parentB.child) {\n\t      var child = parentA.child;\n\n\t      while (child) {\n\t        if (child === a) {\n\t          // We've determined that A is the current branch.\n\t          assertIsMounted(parentA);\n\t          return fiber;\n\t        }\n\n\t        if (child === b) {\n\t          // We've determined that B is the current branch.\n\t          assertIsMounted(parentA);\n\t          return alternate;\n\t        }\n\n\t        child = child.sibling;\n\t      } // We should never have an alternate for any mounting node. So the only\n\t      // way this could possibly happen is if this was unmounted, if at all.\n\n\n\t      throw new Error('Unable to find node on an unmounted component.');\n\t    }\n\n\t    if (a.return !== b.return) {\n\t      // The return pointer of A and the return pointer of B point to different\n\t      // fibers. We assume that return pointers never criss-cross, so A must\n\t      // belong to the child set of A.return, and B must belong to the child\n\t      // set of B.return.\n\t      a = parentA;\n\t      b = parentB;\n\t    } else {\n\t      // The return pointers point to the same fiber. We'll have to use the\n\t      // default, slow path: scan the child sets of each parent alternate to see\n\t      // which child belongs to which set.\n\t      //\n\t      // Search parent A's child set\n\t      var didFindChild = false;\n\t      var _child = parentA.child;\n\n\t      while (_child) {\n\t        if (_child === a) {\n\t          didFindChild = true;\n\t          a = parentA;\n\t          b = parentB;\n\t          break;\n\t        }\n\n\t        if (_child === b) {\n\t          didFindChild = true;\n\t          b = parentA;\n\t          a = parentB;\n\t          break;\n\t        }\n\n\t        _child = _child.sibling;\n\t      }\n\n\t      if (!didFindChild) {\n\t        // Search parent B's child set\n\t        _child = parentB.child;\n\n\t        while (_child) {\n\t          if (_child === a) {\n\t            didFindChild = true;\n\t            a = parentB;\n\t            b = parentA;\n\t            break;\n\t          }\n\n\t          if (_child === b) {\n\t            didFindChild = true;\n\t            b = parentB;\n\t            a = parentA;\n\t            break;\n\t          }\n\n\t          _child = _child.sibling;\n\t        }\n\n\t        if (!didFindChild) {\n\t          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n\t        }\n\t      }\n\t    }\n\n\t    if (a.alternate !== b) {\n\t      throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\t  } // If the root is not a host container, we're in a disconnected tree. I.e.\n\t  // unmounted.\n\n\n\t  if (a.tag !== HostRoot) {\n\t    throw new Error('Unable to find node on an unmounted component.');\n\t  }\n\n\t  if (a.stateNode.current === a) {\n\t    // We've determined that A is the current branch.\n\t    return fiber;\n\t  } // Otherwise B has to be current branch.\n\n\n\t  return alternate;\n\t}\n\tfunction findCurrentHostFiber(parent) {\n\t  var currentParent = findCurrentFiberUsingSlowPath(parent);\n\t  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n\t}\n\n\tfunction findCurrentHostFiberImpl(node) {\n\t  // Next we'll drill down this component to find the first HostComponent/Text.\n\t  if (node.tag === HostComponent || node.tag === HostText) {\n\t    return node;\n\t  }\n\n\t  var child = node.child;\n\n\t  while (child !== null) {\n\t    var match = findCurrentHostFiberImpl(child);\n\n\t    if (match !== null) {\n\t      return match;\n\t    }\n\n\t    child = child.sibling;\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction findCurrentHostFiberWithNoPortals(parent) {\n\t  var currentParent = findCurrentFiberUsingSlowPath(parent);\n\t  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n\t}\n\n\tfunction findCurrentHostFiberWithNoPortalsImpl(node) {\n\t  // Next we'll drill down this component to find the first HostComponent/Text.\n\t  if (node.tag === HostComponent || node.tag === HostText) {\n\t    return node;\n\t  }\n\n\t  var child = node.child;\n\n\t  while (child !== null) {\n\t    if (child.tag !== HostPortal) {\n\t      var match = findCurrentHostFiberWithNoPortalsImpl(child);\n\n\t      if (match !== null) {\n\t        return match;\n\t      }\n\t    }\n\n\t    child = child.sibling;\n\t  }\n\n\t  return null;\n\t}\n\n\tvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n\tfunction isArray(a) {\n\t  return isArrayImpl(a);\n\t}\n\n\t// This is a host config that's used for the `react-reconciler` package on npm.\n\t// It is only used by third-party renderers.\n\t//\n\t// Its API lets you pass the host config as an argument.\n\t// However, inside the `react-reconciler` we treat host config as a module.\n\t// This file is a shim between two worlds.\n\t//\n\t// It works because the `react-reconciler` bundle is wrapped in something like:\n\t//\n\t// module.exports = function ($$$config) {\n\t//   /* reconciler code */\n\t// }\n\t//\n\t// So `$$$config` looks like a global variable, but it's\n\t// really an argument to a top-level wrapping function.\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\t// eslint-disable-line no-undef\n\tvar getPublicInstance = $$$hostConfig.getPublicInstance;\n\tvar getRootHostContext = $$$hostConfig.getRootHostContext;\n\tvar getChildHostContext = $$$hostConfig.getChildHostContext;\n\tvar prepareForCommit = $$$hostConfig.prepareForCommit;\n\tvar resetAfterCommit = $$$hostConfig.resetAfterCommit;\n\tvar createInstance = $$$hostConfig.createInstance;\n\tvar appendInitialChild = $$$hostConfig.appendInitialChild;\n\tvar finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\n\tvar prepareUpdate = $$$hostConfig.prepareUpdate;\n\tvar shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\n\tvar createTextInstance = $$$hostConfig.createTextInstance;\n\tvar scheduleTimeout = $$$hostConfig.scheduleTimeout;\n\tvar cancelTimeout = $$$hostConfig.cancelTimeout;\n\tvar noTimeout = $$$hostConfig.noTimeout;\n\tvar isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\n\tvar warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\n\tvar supportsMutation = $$$hostConfig.supportsMutation;\n\tvar supportsPersistence = $$$hostConfig.supportsPersistence;\n\tvar supportsHydration = $$$hostConfig.supportsHydration;\n\tvar getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\n\t$$$hostConfig.beforeActiveInstanceBlur;\n\t$$$hostConfig.afterActiveInstanceBlur;\n\tvar preparePortalMount = $$$hostConfig.preparePortalMount;\n\t$$$hostConfig.prepareScopeUpdate;\n\t$$$hostConfig.getInstanceFromScope;\n\tvar getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\n\tvar detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n\t//      Microtasks\n\t//     (optional)\n\t// -------------------\n\n\tvar supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\n\tvar scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n\t//      Test selectors\n\t//     (optional)\n\t// -------------------\n\n\tvar supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\n\tvar findFiberRoot = $$$hostConfig.findFiberRoot;\n\tvar getBoundingRect = $$$hostConfig.getBoundingRect;\n\tvar getTextContent = $$$hostConfig.getTextContent;\n\tvar isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\n\tvar matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\n\tvar setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\n\tvar setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n\t//      Mutation\n\t//     (optional)\n\t// -------------------\n\n\tvar appendChild = $$$hostConfig.appendChild;\n\tvar appendChildToContainer = $$$hostConfig.appendChildToContainer;\n\tvar commitTextUpdate = $$$hostConfig.commitTextUpdate;\n\tvar commitMount = $$$hostConfig.commitMount;\n\tvar commitUpdate = $$$hostConfig.commitUpdate;\n\tvar insertBefore = $$$hostConfig.insertBefore;\n\tvar insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\n\tvar removeChild = $$$hostConfig.removeChild;\n\tvar removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\n\tvar resetTextContent = $$$hostConfig.resetTextContent;\n\tvar hideInstance = $$$hostConfig.hideInstance;\n\tvar hideTextInstance = $$$hostConfig.hideTextInstance;\n\tvar unhideInstance = $$$hostConfig.unhideInstance;\n\tvar unhideTextInstance = $$$hostConfig.unhideTextInstance;\n\tvar clearContainer = $$$hostConfig.clearContainer; // -------------------\n\t//     Persistence\n\t//     (optional)\n\t// -------------------\n\n\tvar cloneInstance = $$$hostConfig.cloneInstance;\n\tvar createContainerChildSet = $$$hostConfig.createContainerChildSet;\n\tvar appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\n\tvar finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\n\tvar replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\n\tvar cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\n\tvar cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n\t//     Hydration\n\t//     (optional)\n\t// -------------------\n\n\tvar canHydrateInstance = $$$hostConfig.canHydrateInstance;\n\tvar canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\n\tvar canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\n\tvar isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\n\tvar isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\n\tvar getSuspenseInstanceFallbackErrorDetails = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;\n\tvar registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\n\tvar getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\n\tvar getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\n\tvar getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\n\tvar getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\n\tvar hydrateInstance = $$$hostConfig.hydrateInstance;\n\tvar hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\n\tvar hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\n\tvar getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\n\tvar commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\n\tvar commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\n\tvar clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\n\tvar clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\n\tvar shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\n\tvar didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\n\tvar didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\n\tvar didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\n\tvar didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\n\tvar didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\n\tvar didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\n\tvar didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\n\tvar didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\n\tvar didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\n\tvar didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\n\tvar didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\n\tvar didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\n\tvar didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\n\tvar didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\n\tvar errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n\n\t// Helpers to patch console.logs to avoid logging during side-effect free\n\t// replaying on render function. This currently only patches the object\n\t// lazily which won't cover if the log function was extracted eagerly.\n\t// We could also eagerly patch the method.\n\tvar disabledDepth = 0;\n\tvar prevLog;\n\tvar prevInfo;\n\tvar prevWarn;\n\tvar prevError;\n\tvar prevGroup;\n\tvar prevGroupCollapsed;\n\tvar prevGroupEnd;\n\n\tfunction disabledLog() {}\n\n\tdisabledLog.__reactDisabledLog = true;\n\tfunction disableLogs() {\n\t  {\n\t    if (disabledDepth === 0) {\n\t      /* eslint-disable react-internal/no-production-logging */\n\t      prevLog = console.log;\n\t      prevInfo = console.info;\n\t      prevWarn = console.warn;\n\t      prevError = console.error;\n\t      prevGroup = console.group;\n\t      prevGroupCollapsed = console.groupCollapsed;\n\t      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n\t      var props = {\n\t        configurable: true,\n\t        enumerable: true,\n\t        value: disabledLog,\n\t        writable: true\n\t      }; // $FlowFixMe Flow thinks console is immutable.\n\n\t      Object.defineProperties(console, {\n\t        info: props,\n\t        log: props,\n\t        warn: props,\n\t        error: props,\n\t        group: props,\n\t        groupCollapsed: props,\n\t        groupEnd: props\n\t      });\n\t      /* eslint-enable react-internal/no-production-logging */\n\t    }\n\n\t    disabledDepth++;\n\t  }\n\t}\n\tfunction reenableLogs() {\n\t  {\n\t    disabledDepth--;\n\n\t    if (disabledDepth === 0) {\n\t      /* eslint-disable react-internal/no-production-logging */\n\t      var props = {\n\t        configurable: true,\n\t        enumerable: true,\n\t        writable: true\n\t      }; // $FlowFixMe Flow thinks console is immutable.\n\n\t      Object.defineProperties(console, {\n\t        log: assign({}, props, {\n\t          value: prevLog\n\t        }),\n\t        info: assign({}, props, {\n\t          value: prevInfo\n\t        }),\n\t        warn: assign({}, props, {\n\t          value: prevWarn\n\t        }),\n\t        error: assign({}, props, {\n\t          value: prevError\n\t        }),\n\t        group: assign({}, props, {\n\t          value: prevGroup\n\t        }),\n\t        groupCollapsed: assign({}, props, {\n\t          value: prevGroupCollapsed\n\t        }),\n\t        groupEnd: assign({}, props, {\n\t          value: prevGroupEnd\n\t        })\n\t      });\n\t      /* eslint-enable react-internal/no-production-logging */\n\t    }\n\n\t    if (disabledDepth < 0) {\n\t      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n\t    }\n\t  }\n\t}\n\n\tvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n\tvar prefix;\n\tfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n\t  {\n\t    if (prefix === undefined) {\n\t      // Extract the VM specific prefix used by each line.\n\t      try {\n\t        throw Error();\n\t      } catch (x) {\n\t        var match = x.stack.trim().match(/\\n( *(at )?)/);\n\t        prefix = match && match[1] || '';\n\t      }\n\t    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n\t    return '\\n' + prefix + name;\n\t  }\n\t}\n\tvar reentry = false;\n\tvar componentFrameCache;\n\n\t{\n\t  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\t  componentFrameCache = new PossiblyWeakMap();\n\t}\n\n\tfunction describeNativeComponentFrame(fn, construct) {\n\t  // If something asked for a stack inside a fake render, it should get ignored.\n\t  if ( !fn || reentry) {\n\t    return '';\n\t  }\n\n\t  {\n\t    var frame = componentFrameCache.get(fn);\n\n\t    if (frame !== undefined) {\n\t      return frame;\n\t    }\n\t  }\n\n\t  var control;\n\t  reentry = true;\n\t  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n\t  Error.prepareStackTrace = undefined;\n\t  var previousDispatcher;\n\n\t  {\n\t    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n\t    // for warnings.\n\n\t    ReactCurrentDispatcher.current = null;\n\t    disableLogs();\n\t  }\n\n\t  try {\n\t    // This should throw.\n\t    if (construct) {\n\t      // Something should be setting the props in the constructor.\n\t      var Fake = function () {\n\t        throw Error();\n\t      }; // $FlowFixMe\n\n\n\t      Object.defineProperty(Fake.prototype, 'props', {\n\t        set: function () {\n\t          // We use a throwing setter instead of frozen or non-writable props\n\t          // because that won't throw in a non-strict mode function.\n\t          throw Error();\n\t        }\n\t      });\n\n\t      if (typeof Reflect === 'object' && Reflect.construct) {\n\t        // We construct a different control for this case to include any extra\n\t        // frames added by the construct call.\n\t        try {\n\t          Reflect.construct(Fake, []);\n\t        } catch (x) {\n\t          control = x;\n\t        }\n\n\t        Reflect.construct(fn, [], Fake);\n\t      } else {\n\t        try {\n\t          Fake.call();\n\t        } catch (x) {\n\t          control = x;\n\t        }\n\n\t        fn.call(Fake.prototype);\n\t      }\n\t    } else {\n\t      try {\n\t        throw Error();\n\t      } catch (x) {\n\t        control = x;\n\t      }\n\n\t      fn();\n\t    }\n\t  } catch (sample) {\n\t    // This is inlined manually because closure doesn't do it for us.\n\t    if (sample && control && typeof sample.stack === 'string') {\n\t      // This extracts the first frame from the sample that isn't also in the control.\n\t      // Skipping one frame that we assume is the frame that calls the two.\n\t      var sampleLines = sample.stack.split('\\n');\n\t      var controlLines = control.stack.split('\\n');\n\t      var s = sampleLines.length - 1;\n\t      var c = controlLines.length - 1;\n\n\t      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n\t        // We expect at least one stack frame to be shared.\n\t        // Typically this will be the root most one. However, stack frames may be\n\t        // cut off due to maximum stack limits. In this case, one maybe cut off\n\t        // earlier than the other. We assume that the sample is longer or the same\n\t        // and there for cut off earlier. So we should find the root most frame in\n\t        // the sample somewhere in the control.\n\t        c--;\n\t      }\n\n\t      for (; s >= 1 && c >= 0; s--, c--) {\n\t        // Next we find the first one that isn't the same which should be the\n\t        // frame that called our sample function and the control.\n\t        if (sampleLines[s] !== controlLines[c]) {\n\t          // In V8, the first line is describing the message but other VMs don't.\n\t          // If we're about to return the first line, and the control is also on the same\n\t          // line, that's a pretty good indicator that our sample threw at same line as\n\t          // the control. I.e. before we entered the sample frame. So we ignore this result.\n\t          // This can happen if you passed a class to function component, or non-function.\n\t          if (s !== 1 || c !== 1) {\n\t            do {\n\t              s--;\n\t              c--; // We may still have similar intermediate frames from the construct call.\n\t              // The next one that isn't the same should be our match though.\n\n\t              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n\t                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n\t                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n\t                // but we have a user-provided \"displayName\"\n\t                // splice it in to make the stack more readable.\n\n\n\t                if (fn.displayName && _frame.includes('<anonymous>')) {\n\t                  _frame = _frame.replace('<anonymous>', fn.displayName);\n\t                }\n\n\t                {\n\t                  if (typeof fn === 'function') {\n\t                    componentFrameCache.set(fn, _frame);\n\t                  }\n\t                } // Return the line we found.\n\n\n\t                return _frame;\n\t              }\n\t            } while (s >= 1 && c >= 0);\n\t          }\n\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  } finally {\n\t    reentry = false;\n\n\t    {\n\t      ReactCurrentDispatcher.current = previousDispatcher;\n\t      reenableLogs();\n\t    }\n\n\t    Error.prepareStackTrace = previousPrepareStackTrace;\n\t  } // Fallback to just using the name if we couldn't make it throw.\n\n\n\t  var name = fn ? fn.displayName || fn.name : '';\n\t  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n\t  {\n\t    if (typeof fn === 'function') {\n\t      componentFrameCache.set(fn, syntheticFrame);\n\t    }\n\t  }\n\n\t  return syntheticFrame;\n\t}\n\n\tfunction describeClassComponentFrame(ctor, source, ownerFn) {\n\t  {\n\t    return describeNativeComponentFrame(ctor, true);\n\t  }\n\t}\n\tfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n\t  {\n\t    return describeNativeComponentFrame(fn, false);\n\t  }\n\t}\n\n\tfunction shouldConstruct(Component) {\n\t  var prototype = Component.prototype;\n\t  return !!(prototype && prototype.isReactComponent);\n\t}\n\n\tfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n\t  if (type == null) {\n\t    return '';\n\t  }\n\n\t  if (typeof type === 'function') {\n\t    {\n\t      return describeNativeComponentFrame(type, shouldConstruct(type));\n\t    }\n\t  }\n\n\t  if (typeof type === 'string') {\n\t    return describeBuiltInComponentFrame(type);\n\t  }\n\n\t  switch (type) {\n\t    case REACT_SUSPENSE_TYPE:\n\t      return describeBuiltInComponentFrame('Suspense');\n\n\t    case REACT_SUSPENSE_LIST_TYPE:\n\t      return describeBuiltInComponentFrame('SuspenseList');\n\t  }\n\n\t  if (typeof type === 'object') {\n\t    switch (type.$$typeof) {\n\t      case REACT_FORWARD_REF_TYPE:\n\t        return describeFunctionComponentFrame(type.render);\n\n\t      case REACT_MEMO_TYPE:\n\t        // Memo may contain any component type so we recursively resolve it.\n\t        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n\t      case REACT_LAZY_TYPE:\n\t        {\n\t          var lazyComponent = type;\n\t          var payload = lazyComponent._payload;\n\t          var init = lazyComponent._init;\n\n\t          try {\n\t            // Lazy may contain any component type so we recursively resolve it.\n\t            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n\t          } catch (x) {}\n\t        }\n\t    }\n\t  }\n\n\t  return '';\n\t}\n\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\tvar loggedTypeFailures = {};\n\tvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\n\tfunction setCurrentlyValidatingElement(element) {\n\t  {\n\t    if (element) {\n\t      var owner = element._owner;\n\t      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n\t      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n\t    } else {\n\t      ReactDebugCurrentFrame.setExtraStackFrame(null);\n\t    }\n\t  }\n\t}\n\n\tfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n\t  {\n\t    // $FlowFixMe This is okay but Flow doesn't know it.\n\t    var has = Function.call.bind(hasOwnProperty);\n\n\t    for (var typeSpecName in typeSpecs) {\n\t      if (has(typeSpecs, typeSpecName)) {\n\t        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n\t        // fail the render phase where it didn't fail before. So we log it.\n\t        // After these have been cleaned up, we'll let them throw.\n\n\t        try {\n\t          // This is intentionally an invariant that gets caught. It's the same\n\t          // behavior as without this statement except with a better message.\n\t          if (typeof typeSpecs[typeSpecName] !== 'function') {\n\t            // eslint-disable-next-line react-internal/prod-error-codes\n\t            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n\t            err.name = 'Invariant Violation';\n\t            throw err;\n\t          }\n\n\t          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n\t        } catch (ex) {\n\t          error$1 = ex;\n\t        }\n\n\t        if (error$1 && !(error$1 instanceof Error)) {\n\t          setCurrentlyValidatingElement(element);\n\n\t          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n\t          setCurrentlyValidatingElement(null);\n\t        }\n\n\t        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n\t          // Only monitor this failure once because there tends to be a lot of the\n\t          // same error.\n\t          loggedTypeFailures[error$1.message] = true;\n\t          setCurrentlyValidatingElement(element);\n\n\t          error('Failed %s type: %s', location, error$1.message);\n\n\t          setCurrentlyValidatingElement(null);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar valueStack = [];\n\tvar fiberStack;\n\n\t{\n\t  fiberStack = [];\n\t}\n\n\tvar index = -1;\n\n\tfunction createCursor(defaultValue) {\n\t  return {\n\t    current: defaultValue\n\t  };\n\t}\n\n\tfunction pop(cursor, fiber) {\n\t  if (index < 0) {\n\t    {\n\t      error('Unexpected pop.');\n\t    }\n\n\t    return;\n\t  }\n\n\t  {\n\t    if (fiber !== fiberStack[index]) {\n\t      error('Unexpected Fiber popped.');\n\t    }\n\t  }\n\n\t  cursor.current = valueStack[index];\n\t  valueStack[index] = null;\n\n\t  {\n\t    fiberStack[index] = null;\n\t  }\n\n\t  index--;\n\t}\n\n\tfunction push(cursor, value, fiber) {\n\t  index++;\n\t  valueStack[index] = cursor.current;\n\n\t  {\n\t    fiberStack[index] = fiber;\n\t  }\n\n\t  cursor.current = value;\n\t}\n\n\tvar warnedAboutMissingGetChildContext;\n\n\t{\n\t  warnedAboutMissingGetChildContext = {};\n\t}\n\n\tvar emptyContextObject = {};\n\n\t{\n\t  Object.freeze(emptyContextObject);\n\t} // A cursor to the current merged context object on the stack.\n\n\n\tvar contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\n\tvar didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n\t// We use this to get access to the parent context after we have already\n\t// pushed the next context provider, and now need to merge their contexts.\n\n\tvar previousContext = emptyContextObject;\n\n\tfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n\t  {\n\t    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n\t      // If the fiber is a context provider itself, when we read its context\n\t      // we may have already pushed its own child context on the stack. A context\n\t      // provider should not \"see\" its own child context. Therefore we read the\n\t      // previous (parent) context instead for a context provider.\n\t      return previousContext;\n\t    }\n\n\t    return contextStackCursor.current;\n\t  }\n\t}\n\n\tfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n\t  {\n\t    var instance = workInProgress.stateNode;\n\t    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n\t    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n\t  }\n\t}\n\n\tfunction getMaskedContext(workInProgress, unmaskedContext) {\n\t  {\n\t    var type = workInProgress.type;\n\t    var contextTypes = type.contextTypes;\n\n\t    if (!contextTypes) {\n\t      return emptyContextObject;\n\t    } // Avoid recreating masked context unless unmasked context has changed.\n\t    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n\t    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n\t    var instance = workInProgress.stateNode;\n\n\t    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n\t      return instance.__reactInternalMemoizedMaskedChildContext;\n\t    }\n\n\t    var context = {};\n\n\t    for (var key in contextTypes) {\n\t      context[key] = unmaskedContext[key];\n\t    }\n\n\t    {\n\t      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n\t      checkPropTypes(contextTypes, context, 'context', name);\n\t    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n\t    // Context is created before the class component is instantiated so check for instance.\n\n\n\t    if (instance) {\n\t      cacheContext(workInProgress, unmaskedContext, context);\n\t    }\n\n\t    return context;\n\t  }\n\t}\n\n\tfunction hasContextChanged() {\n\t  {\n\t    return didPerformWorkStackCursor.current;\n\t  }\n\t}\n\n\tfunction isContextProvider(type) {\n\t  {\n\t    var childContextTypes = type.childContextTypes;\n\t    return childContextTypes !== null && childContextTypes !== undefined;\n\t  }\n\t}\n\n\tfunction popContext(fiber) {\n\t  {\n\t    pop(didPerformWorkStackCursor, fiber);\n\t    pop(contextStackCursor, fiber);\n\t  }\n\t}\n\n\tfunction popTopLevelContextObject(fiber) {\n\t  {\n\t    pop(didPerformWorkStackCursor, fiber);\n\t    pop(contextStackCursor, fiber);\n\t  }\n\t}\n\n\tfunction pushTopLevelContextObject(fiber, context, didChange) {\n\t  {\n\t    if (contextStackCursor.current !== emptyContextObject) {\n\t      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\n\t    push(contextStackCursor, context, fiber);\n\t    push(didPerformWorkStackCursor, didChange, fiber);\n\t  }\n\t}\n\n\tfunction processChildContext(fiber, type, parentContext) {\n\t  {\n\t    var instance = fiber.stateNode;\n\t    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n\t    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n\t    if (typeof instance.getChildContext !== 'function') {\n\t      {\n\t        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n\t        if (!warnedAboutMissingGetChildContext[componentName]) {\n\t          warnedAboutMissingGetChildContext[componentName] = true;\n\n\t          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n\t        }\n\t      }\n\n\t      return parentContext;\n\t    }\n\n\t    var childContext = instance.getChildContext();\n\n\t    for (var contextKey in childContext) {\n\t      if (!(contextKey in childContextTypes)) {\n\t        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n\t      }\n\t    }\n\n\t    {\n\t      var name = getComponentNameFromFiber(fiber) || 'Unknown';\n\t      checkPropTypes(childContextTypes, childContext, 'child context', name);\n\t    }\n\n\t    return assign({}, parentContext, childContext);\n\t  }\n\t}\n\n\tfunction pushContextProvider(workInProgress) {\n\t  {\n\t    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n\t    // If the instance does not exist yet, we will push null at first,\n\t    // and replace it on the stack later when invalidating the context.\n\n\t    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n\t    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n\t    previousContext = contextStackCursor.current;\n\t    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n\t    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n\t    return true;\n\t  }\n\t}\n\n\tfunction invalidateContextProvider(workInProgress, type, didChange) {\n\t  {\n\t    var instance = workInProgress.stateNode;\n\n\t    if (!instance) {\n\t      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\n\t    if (didChange) {\n\t      // Merge parent and own context.\n\t      // Skip this if we're not updating due to sCU.\n\t      // This avoids unnecessarily recomputing memoized values.\n\t      var mergedContext = processChildContext(workInProgress, type, previousContext);\n\t      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n\t      // It is important to unwind the context in the reverse order.\n\n\t      pop(didPerformWorkStackCursor, workInProgress);\n\t      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n\t      push(contextStackCursor, mergedContext, workInProgress);\n\t      push(didPerformWorkStackCursor, didChange, workInProgress);\n\t    } else {\n\t      pop(didPerformWorkStackCursor, workInProgress);\n\t      push(didPerformWorkStackCursor, didChange, workInProgress);\n\t    }\n\t  }\n\t}\n\n\tfunction findCurrentUnmaskedContext(fiber) {\n\t  {\n\t    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n\t    // makes sense elsewhere\n\t    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n\t      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\n\t    var node = fiber;\n\n\t    do {\n\t      switch (node.tag) {\n\t        case HostRoot:\n\t          return node.stateNode.context;\n\n\t        case ClassComponent:\n\t          {\n\t            var Component = node.type;\n\n\t            if (isContextProvider(Component)) {\n\t              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n\t            }\n\n\t            break;\n\t          }\n\t      }\n\n\t      node = node.return;\n\t    } while (node !== null);\n\n\t    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\t}\n\n\tvar LegacyRoot = 0;\n\tvar ConcurrentRoot = 1;\n\n\tvar NoMode =\n\t/*                         */\n\t0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\n\tvar ConcurrentMode =\n\t/*                 */\n\t1;\n\tvar ProfileMode =\n\t/*                    */\n\t2;\n\tvar StrictLegacyMode =\n\t/*               */\n\t8;\n\tvar StrictEffectsMode =\n\t/*              */\n\t16;\n\n\t// TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\tvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n\t// Based on:\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n\tvar log = Math.log;\n\tvar LN2 = Math.LN2;\n\n\tfunction clz32Fallback(x) {\n\t  var asUint = x >>> 0;\n\n\t  if (asUint === 0) {\n\t    return 32;\n\t  }\n\n\t  return 31 - (log(asUint) / LN2 | 0) | 0;\n\t}\n\n\t// If those values are changed that package should be rebuilt and redeployed.\n\n\tvar TotalLanes = 31;\n\tvar NoLanes =\n\t/*                        */\n\t0;\n\tvar NoLane =\n\t/*                          */\n\t0;\n\tvar SyncLane =\n\t/*                        */\n\t1;\n\tvar InputContinuousHydrationLane =\n\t/*    */\n\t2;\n\tvar InputContinuousLane =\n\t/*             */\n\t4;\n\tvar DefaultHydrationLane =\n\t/*            */\n\t8;\n\tvar DefaultLane =\n\t/*                     */\n\t16;\n\tvar TransitionHydrationLane =\n\t/*                */\n\t32;\n\tvar TransitionLanes =\n\t/*                       */\n\t4194240;\n\tvar TransitionLane1 =\n\t/*                        */\n\t64;\n\tvar TransitionLane2 =\n\t/*                        */\n\t128;\n\tvar TransitionLane3 =\n\t/*                        */\n\t256;\n\tvar TransitionLane4 =\n\t/*                        */\n\t512;\n\tvar TransitionLane5 =\n\t/*                        */\n\t1024;\n\tvar TransitionLane6 =\n\t/*                        */\n\t2048;\n\tvar TransitionLane7 =\n\t/*                        */\n\t4096;\n\tvar TransitionLane8 =\n\t/*                        */\n\t8192;\n\tvar TransitionLane9 =\n\t/*                        */\n\t16384;\n\tvar TransitionLane10 =\n\t/*                       */\n\t32768;\n\tvar TransitionLane11 =\n\t/*                       */\n\t65536;\n\tvar TransitionLane12 =\n\t/*                       */\n\t131072;\n\tvar TransitionLane13 =\n\t/*                       */\n\t262144;\n\tvar TransitionLane14 =\n\t/*                       */\n\t524288;\n\tvar TransitionLane15 =\n\t/*                       */\n\t1048576;\n\tvar TransitionLane16 =\n\t/*                       */\n\t2097152;\n\tvar RetryLanes =\n\t/*                            */\n\t130023424;\n\tvar RetryLane1 =\n\t/*                             */\n\t4194304;\n\tvar RetryLane2 =\n\t/*                             */\n\t8388608;\n\tvar RetryLane3 =\n\t/*                             */\n\t16777216;\n\tvar RetryLane4 =\n\t/*                             */\n\t33554432;\n\tvar RetryLane5 =\n\t/*                             */\n\t67108864;\n\tvar SomeRetryLane = RetryLane1;\n\tvar SelectiveHydrationLane =\n\t/*          */\n\t134217728;\n\tvar NonIdleLanes =\n\t/*                          */\n\t268435455;\n\tvar IdleHydrationLane =\n\t/*               */\n\t268435456;\n\tvar IdleLane =\n\t/*                        */\n\t536870912;\n\tvar OffscreenLane =\n\t/*                   */\n\t1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n\t// It should be kept in sync with the Lanes values above.\n\n\tfunction getLabelForLane(lane) {\n\t  {\n\t    if (lane & SyncLane) {\n\t      return 'Sync';\n\t    }\n\n\t    if (lane & InputContinuousHydrationLane) {\n\t      return 'InputContinuousHydration';\n\t    }\n\n\t    if (lane & InputContinuousLane) {\n\t      return 'InputContinuous';\n\t    }\n\n\t    if (lane & DefaultHydrationLane) {\n\t      return 'DefaultHydration';\n\t    }\n\n\t    if (lane & DefaultLane) {\n\t      return 'Default';\n\t    }\n\n\t    if (lane & TransitionHydrationLane) {\n\t      return 'TransitionHydration';\n\t    }\n\n\t    if (lane & TransitionLanes) {\n\t      return 'Transition';\n\t    }\n\n\t    if (lane & RetryLanes) {\n\t      return 'Retry';\n\t    }\n\n\t    if (lane & SelectiveHydrationLane) {\n\t      return 'SelectiveHydration';\n\t    }\n\n\t    if (lane & IdleHydrationLane) {\n\t      return 'IdleHydration';\n\t    }\n\n\t    if (lane & IdleLane) {\n\t      return 'Idle';\n\t    }\n\n\t    if (lane & OffscreenLane) {\n\t      return 'Offscreen';\n\t    }\n\t  }\n\t}\n\tvar NoTimestamp = -1;\n\tvar nextTransitionLane = TransitionLane1;\n\tvar nextRetryLane = RetryLane1;\n\n\tfunction getHighestPriorityLanes(lanes) {\n\t  switch (getHighestPriorityLane(lanes)) {\n\t    case SyncLane:\n\t      return SyncLane;\n\n\t    case InputContinuousHydrationLane:\n\t      return InputContinuousHydrationLane;\n\n\t    case InputContinuousLane:\n\t      return InputContinuousLane;\n\n\t    case DefaultHydrationLane:\n\t      return DefaultHydrationLane;\n\n\t    case DefaultLane:\n\t      return DefaultLane;\n\n\t    case TransitionHydrationLane:\n\t      return TransitionHydrationLane;\n\n\t    case TransitionLane1:\n\t    case TransitionLane2:\n\t    case TransitionLane3:\n\t    case TransitionLane4:\n\t    case TransitionLane5:\n\t    case TransitionLane6:\n\t    case TransitionLane7:\n\t    case TransitionLane8:\n\t    case TransitionLane9:\n\t    case TransitionLane10:\n\t    case TransitionLane11:\n\t    case TransitionLane12:\n\t    case TransitionLane13:\n\t    case TransitionLane14:\n\t    case TransitionLane15:\n\t    case TransitionLane16:\n\t      return lanes & TransitionLanes;\n\n\t    case RetryLane1:\n\t    case RetryLane2:\n\t    case RetryLane3:\n\t    case RetryLane4:\n\t    case RetryLane5:\n\t      return lanes & RetryLanes;\n\n\t    case SelectiveHydrationLane:\n\t      return SelectiveHydrationLane;\n\n\t    case IdleHydrationLane:\n\t      return IdleHydrationLane;\n\n\t    case IdleLane:\n\t      return IdleLane;\n\n\t    case OffscreenLane:\n\t      return OffscreenLane;\n\n\t    default:\n\t      {\n\t        error('Should have found matching lanes. This is a bug in React.');\n\t      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n\n\t      return lanes;\n\t  }\n\t}\n\n\tfunction getNextLanes(root, wipLanes) {\n\t  // Early bailout if there's no pending work left.\n\t  var pendingLanes = root.pendingLanes;\n\n\t  if (pendingLanes === NoLanes) {\n\t    return NoLanes;\n\t  }\n\n\t  var nextLanes = NoLanes;\n\t  var suspendedLanes = root.suspendedLanes;\n\t  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n\t  // even if the work is suspended.\n\n\t  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n\t  if (nonIdlePendingLanes !== NoLanes) {\n\t    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n\t    if (nonIdleUnblockedLanes !== NoLanes) {\n\t      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n\t    } else {\n\t      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n\t      if (nonIdlePingedLanes !== NoLanes) {\n\t        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n\t      }\n\t    }\n\t  } else {\n\t    // The only remaining work is Idle.\n\t    var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n\t    if (unblockedLanes !== NoLanes) {\n\t      nextLanes = getHighestPriorityLanes(unblockedLanes);\n\t    } else {\n\t      if (pingedLanes !== NoLanes) {\n\t        nextLanes = getHighestPriorityLanes(pingedLanes);\n\t      }\n\t    }\n\t  }\n\n\t  if (nextLanes === NoLanes) {\n\t    // This should only be reachable if we're suspended\n\t    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n\t    return NoLanes;\n\t  } // If we're already in the middle of a render, switching lanes will interrupt\n\t  // it and we'll lose our progress. We should only do this if the new lanes are\n\t  // higher priority.\n\n\n\t  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n\t  // bother waiting until the root is complete.\n\t  (wipLanes & suspendedLanes) === NoLanes) {\n\t    var nextLane = getHighestPriorityLane(nextLanes);\n\t    var wipLane = getHighestPriorityLane(wipLanes);\n\n\t    if ( // Tests whether the next lane is equal or lower priority than the wip\n\t    // one. This works because the bits decrease in priority as you go left.\n\t    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n\t    // only difference between default updates and transition updates is that\n\t    // default updates do not support refresh transitions.\n\t    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n\t      // Keep working on the existing in-progress tree. Do not interrupt.\n\t      return wipLanes;\n\t    }\n\t  }\n\n\t  if ((nextLanes & InputContinuousLane) !== NoLanes) {\n\t    // When updates are sync by default, we entangle continuous priority updates\n\t    // and default updates, so they render in the same batch. The only reason\n\t    // they use separate lanes is because continuous updates should interrupt\n\t    // transitions, but default updates should not.\n\t    nextLanes |= pendingLanes & DefaultLane;\n\t  } // Check for entangled lanes and add them to the batch.\n\t  //\n\t  // A lane is said to be entangled with another when it's not allowed to render\n\t  // in a batch that does not also include the other lane. Typically we do this\n\t  // when multiple updates have the same source, and we only want to respond to\n\t  // the most recent event from that source.\n\t  //\n\t  // Note that we apply entanglements *after* checking for partial work above.\n\t  // This means that if a lane is entangled during an interleaved event while\n\t  // it's already rendering, we won't interrupt it. This is intentional, since\n\t  // entanglement is usually \"best effort\": we'll try our best to render the\n\t  // lanes in the same batch, but it's not worth throwing out partially\n\t  // completed work in order to do it.\n\t  // TODO: Reconsider this. The counter-argument is that the partial work\n\t  // represents an intermediate state, which we don't want to show to the user.\n\t  // And by spending extra time finishing it, we're increasing the amount of\n\t  // time it takes to show the final state, which is what they are actually\n\t  // waiting for.\n\t  //\n\t  // For those exceptions where entanglement is semantically important, like\n\t  // useMutableSource, we should ensure that there is no partial work at the\n\t  // time we apply the entanglement.\n\n\n\t  var entangledLanes = root.entangledLanes;\n\n\t  if (entangledLanes !== NoLanes) {\n\t    var entanglements = root.entanglements;\n\t    var lanes = nextLanes & entangledLanes;\n\n\t    while (lanes > 0) {\n\t      var index = pickArbitraryLaneIndex(lanes);\n\t      var lane = 1 << index;\n\t      nextLanes |= entanglements[index];\n\t      lanes &= ~lane;\n\t    }\n\t  }\n\n\t  return nextLanes;\n\t}\n\tfunction getMostRecentEventTime(root, lanes) {\n\t  var eventTimes = root.eventTimes;\n\t  var mostRecentEventTime = NoTimestamp;\n\n\t  while (lanes > 0) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\t    var eventTime = eventTimes[index];\n\n\t    if (eventTime > mostRecentEventTime) {\n\t      mostRecentEventTime = eventTime;\n\t    }\n\n\t    lanes &= ~lane;\n\t  }\n\n\t  return mostRecentEventTime;\n\t}\n\n\tfunction computeExpirationTime(lane, currentTime) {\n\t  switch (lane) {\n\t    case SyncLane:\n\t    case InputContinuousHydrationLane:\n\t    case InputContinuousLane:\n\t      // User interactions should expire slightly more quickly.\n\t      //\n\t      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n\t      // When we made it larger, a product metric in www regressed, suggesting\n\t      // there's a user interaction that's being starved by a series of\n\t      // synchronous updates. If that theory is correct, the proper solution is\n\t      // to fix the starvation. However, this scenario supports the idea that\n\t      // expiration times are an important safeguard when starvation\n\t      // does happen.\n\t      return currentTime + 250;\n\n\t    case DefaultHydrationLane:\n\t    case DefaultLane:\n\t    case TransitionHydrationLane:\n\t    case TransitionLane1:\n\t    case TransitionLane2:\n\t    case TransitionLane3:\n\t    case TransitionLane4:\n\t    case TransitionLane5:\n\t    case TransitionLane6:\n\t    case TransitionLane7:\n\t    case TransitionLane8:\n\t    case TransitionLane9:\n\t    case TransitionLane10:\n\t    case TransitionLane11:\n\t    case TransitionLane12:\n\t    case TransitionLane13:\n\t    case TransitionLane14:\n\t    case TransitionLane15:\n\t    case TransitionLane16:\n\t      return currentTime + 5000;\n\n\t    case RetryLane1:\n\t    case RetryLane2:\n\t    case RetryLane3:\n\t    case RetryLane4:\n\t    case RetryLane5:\n\t      // TODO: Retries should be allowed to expire if they are CPU bound for\n\t      // too long, but when I made this change it caused a spike in browser\n\t      // crashes. There must be some other underlying bug; not super urgent but\n\t      // ideally should figure out why and fix it. Unfortunately we don't have\n\t      // a repro for the crashes, only detected via production metrics.\n\t      return NoTimestamp;\n\n\t    case SelectiveHydrationLane:\n\t    case IdleHydrationLane:\n\t    case IdleLane:\n\t    case OffscreenLane:\n\t      // Anything idle priority or lower should never expire.\n\t      return NoTimestamp;\n\n\t    default:\n\t      {\n\t        error('Should have found matching lanes. This is a bug in React.');\n\t      }\n\n\t      return NoTimestamp;\n\t  }\n\t}\n\n\tfunction markStarvedLanesAsExpired(root, currentTime) {\n\t  // TODO: This gets called every time we yield. We can optimize by storing\n\t  // the earliest expiration time on the root. Then use that to quickly bail out\n\t  // of this function.\n\t  var pendingLanes = root.pendingLanes;\n\t  var suspendedLanes = root.suspendedLanes;\n\t  var pingedLanes = root.pingedLanes;\n\t  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n\t  // expiration time. If so, we'll assume the update is being starved and mark\n\t  // it as expired to force it to finish.\n\n\t  var lanes = pendingLanes;\n\n\t  while (lanes > 0) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\t    var expirationTime = expirationTimes[index];\n\n\t    if (expirationTime === NoTimestamp) {\n\t      // Found a pending lane with no expiration time. If it's not suspended, or\n\t      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n\t      // using the current time.\n\t      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n\t        // Assumes timestamps are monotonically increasing.\n\t        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n\t      }\n\t    } else if (expirationTime <= currentTime) {\n\t      // This lane expired\n\t      root.expiredLanes |= lane;\n\t    }\n\n\t    lanes &= ~lane;\n\t  }\n\t} // This returns the highest priority pending lanes regardless of whether they\n\t// are suspended.\n\n\tfunction getHighestPriorityPendingLanes(root) {\n\t  return getHighestPriorityLanes(root.pendingLanes);\n\t}\n\tfunction getLanesToRetrySynchronouslyOnError(root) {\n\t  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n\t  if (everythingButOffscreen !== NoLanes) {\n\t    return everythingButOffscreen;\n\t  }\n\n\t  if (everythingButOffscreen & OffscreenLane) {\n\t    return OffscreenLane;\n\t  }\n\n\t  return NoLanes;\n\t}\n\tfunction includesSyncLane(lanes) {\n\t  return (lanes & SyncLane) !== NoLanes;\n\t}\n\tfunction includesNonIdleWork(lanes) {\n\t  return (lanes & NonIdleLanes) !== NoLanes;\n\t}\n\tfunction includesOnlyRetries(lanes) {\n\t  return (lanes & RetryLanes) === lanes;\n\t}\n\tfunction includesOnlyNonUrgentLanes(lanes) {\n\t  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n\t  return (lanes & UrgentLanes) === NoLanes;\n\t}\n\tfunction includesOnlyTransitions(lanes) {\n\t  return (lanes & TransitionLanes) === lanes;\n\t}\n\tfunction includesBlockingLane(root, lanes) {\n\n\t  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n\t  return (lanes & SyncDefaultLanes) !== NoLanes;\n\t}\n\tfunction includesExpiredLane(root, lanes) {\n\t  // This is a separate check from includesBlockingLane because a lane can\n\t  // expire after a render has already started.\n\t  return (lanes & root.expiredLanes) !== NoLanes;\n\t}\n\tfunction isTransitionLane(lane) {\n\t  return (lane & TransitionLanes) !== NoLanes;\n\t}\n\tfunction claimNextTransitionLane() {\n\t  // Cycle through the lanes, assigning each new transition to the next lane.\n\t  // In most cases, this means every transition gets its own lane, until we\n\t  // run out of lanes and cycle back to the beginning.\n\t  var lane = nextTransitionLane;\n\t  nextTransitionLane <<= 1;\n\n\t  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n\t    nextTransitionLane = TransitionLane1;\n\t  }\n\n\t  return lane;\n\t}\n\tfunction claimNextRetryLane() {\n\t  var lane = nextRetryLane;\n\t  nextRetryLane <<= 1;\n\n\t  if ((nextRetryLane & RetryLanes) === NoLanes) {\n\t    nextRetryLane = RetryLane1;\n\t  }\n\n\t  return lane;\n\t}\n\tfunction getHighestPriorityLane(lanes) {\n\t  return lanes & -lanes;\n\t}\n\tfunction pickArbitraryLane(lanes) {\n\t  // This wrapper function gets inlined. Only exists so to communicate that it\n\t  // doesn't matter which bit is selected; you can pick any bit without\n\t  // affecting the algorithms where its used. Here I'm using\n\t  // getHighestPriorityLane because it requires the fewest operations.\n\t  return getHighestPriorityLane(lanes);\n\t}\n\n\tfunction pickArbitraryLaneIndex(lanes) {\n\t  return 31 - clz32(lanes);\n\t}\n\n\tfunction laneToIndex(lane) {\n\t  return pickArbitraryLaneIndex(lane);\n\t}\n\n\tfunction includesSomeLane(a, b) {\n\t  return (a & b) !== NoLanes;\n\t}\n\tfunction isSubsetOfLanes(set, subset) {\n\t  return (set & subset) === subset;\n\t}\n\tfunction mergeLanes(a, b) {\n\t  return a | b;\n\t}\n\tfunction removeLanes(set, subset) {\n\t  return set & ~subset;\n\t}\n\tfunction intersectLanes(a, b) {\n\t  return a & b;\n\t} // Seems redundant, but it changes the type from a single lane (used for\n\t// updates) to a group of lanes (used for flushing work).\n\n\tfunction laneToLanes(lane) {\n\t  return lane;\n\t}\n\tfunction higherPriorityLane(a, b) {\n\t  // This works because the bit ranges decrease in priority as you go left.\n\t  return a !== NoLane && a < b ? a : b;\n\t}\n\tfunction createLaneMap(initial) {\n\t  // Intentionally pushing one by one.\n\t  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n\t  var laneMap = [];\n\n\t  for (var i = 0; i < TotalLanes; i++) {\n\t    laneMap.push(initial);\n\t  }\n\n\t  return laneMap;\n\t}\n\tfunction markRootUpdated(root, updateLane, eventTime) {\n\t  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n\t  // could unblock them. Clear the suspended lanes so that we can try rendering\n\t  // them again.\n\t  //\n\t  // TODO: We really only need to unsuspend only lanes that are in the\n\t  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n\t  // path. This would exclude suspended updates in an unrelated sibling tree,\n\t  // since there's no way for this update to unblock it.\n\t  //\n\t  // We don't do this if the incoming update is idle, because we never process\n\t  // idle updates until after all the regular updates have finished; there's no\n\t  // way it could unblock a transition.\n\n\t  if (updateLane !== IdleLane) {\n\t    root.suspendedLanes = NoLanes;\n\t    root.pingedLanes = NoLanes;\n\t  }\n\n\t  var eventTimes = root.eventTimes;\n\t  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n\t  // recent event, and we assume time is monotonically increasing.\n\n\t  eventTimes[index] = eventTime;\n\t}\n\tfunction markRootSuspended(root, suspendedLanes) {\n\t  root.suspendedLanes |= suspendedLanes;\n\t  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n\t  var expirationTimes = root.expirationTimes;\n\t  var lanes = suspendedLanes;\n\n\t  while (lanes > 0) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\t    expirationTimes[index] = NoTimestamp;\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction markRootPinged(root, pingedLanes, eventTime) {\n\t  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n\t}\n\tfunction markRootFinished(root, remainingLanes) {\n\t  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\t  root.pendingLanes = remainingLanes; // Let's try everything again\n\n\t  root.suspendedLanes = NoLanes;\n\t  root.pingedLanes = NoLanes;\n\t  root.expiredLanes &= remainingLanes;\n\t  root.mutableReadLanes &= remainingLanes;\n\t  root.entangledLanes &= remainingLanes;\n\t  var entanglements = root.entanglements;\n\t  var eventTimes = root.eventTimes;\n\t  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n\t  var lanes = noLongerPendingLanes;\n\n\t  while (lanes > 0) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\t    entanglements[index] = NoLanes;\n\t    eventTimes[index] = NoTimestamp;\n\t    expirationTimes[index] = NoTimestamp;\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction markRootEntangled(root, entangledLanes) {\n\t  // In addition to entangling each of the given lanes with each other, we also\n\t  // have to consider _transitive_ entanglements. For each lane that is already\n\t  // entangled with *any* of the given lanes, that lane is now transitively\n\t  // entangled with *all* the given lanes.\n\t  //\n\t  // Translated: If C is entangled with A, then entangling A with B also\n\t  // entangles C with B.\n\t  //\n\t  // If this is hard to grasp, it might help to intentionally break this\n\t  // function and look at the tests that fail in ReactTransition-test.js. Try\n\t  // commenting out one of the conditions below.\n\t  var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n\t  var entanglements = root.entanglements;\n\t  var lanes = rootEntangledLanes;\n\n\t  while (lanes) {\n\t    var index = pickArbitraryLaneIndex(lanes);\n\t    var lane = 1 << index;\n\n\t    if ( // Is this one of the newly entangled lanes?\n\t    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n\t    entanglements[index] & entangledLanes) {\n\t      entanglements[index] |= entangledLanes;\n\t    }\n\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction getBumpedLaneForHydration(root, renderLanes) {\n\t  var renderLane = getHighestPriorityLane(renderLanes);\n\t  var lane;\n\n\t  switch (renderLane) {\n\t    case InputContinuousLane:\n\t      lane = InputContinuousHydrationLane;\n\t      break;\n\n\t    case DefaultLane:\n\t      lane = DefaultHydrationLane;\n\t      break;\n\n\t    case TransitionLane1:\n\t    case TransitionLane2:\n\t    case TransitionLane3:\n\t    case TransitionLane4:\n\t    case TransitionLane5:\n\t    case TransitionLane6:\n\t    case TransitionLane7:\n\t    case TransitionLane8:\n\t    case TransitionLane9:\n\t    case TransitionLane10:\n\t    case TransitionLane11:\n\t    case TransitionLane12:\n\t    case TransitionLane13:\n\t    case TransitionLane14:\n\t    case TransitionLane15:\n\t    case TransitionLane16:\n\t    case RetryLane1:\n\t    case RetryLane2:\n\t    case RetryLane3:\n\t    case RetryLane4:\n\t    case RetryLane5:\n\t      lane = TransitionHydrationLane;\n\t      break;\n\n\t    case IdleLane:\n\t      lane = IdleHydrationLane;\n\t      break;\n\n\t    default:\n\t      // Everything else is already either a hydration lane, or shouldn't\n\t      // be retried at a hydration lane.\n\t      lane = NoLane;\n\t      break;\n\t  } // Check if the lane we chose is suspended. If so, that indicates that we\n\t  // already attempted and failed to hydrate at that level. Also check if we're\n\t  // already rendering that lane, which is rare but could happen.\n\n\n\t  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n\t    // Give up trying to hydrate and fall back to client render.\n\t    return NoLane;\n\t  }\n\n\t  return lane;\n\t}\n\tfunction addFiberToLanesMap(root, fiber, lanes) {\n\n\t  if (!isDevToolsPresent) {\n\t    return;\n\t  }\n\n\t  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n\t  while (lanes > 0) {\n\t    var index = laneToIndex(lanes);\n\t    var lane = 1 << index;\n\t    var updaters = pendingUpdatersLaneMap[index];\n\t    updaters.add(fiber);\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction movePendingFibersToMemoized(root, lanes) {\n\n\t  if (!isDevToolsPresent) {\n\t    return;\n\t  }\n\n\t  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\t  var memoizedUpdaters = root.memoizedUpdaters;\n\n\t  while (lanes > 0) {\n\t    var index = laneToIndex(lanes);\n\t    var lane = 1 << index;\n\t    var updaters = pendingUpdatersLaneMap[index];\n\n\t    if (updaters.size > 0) {\n\t      updaters.forEach(function (fiber) {\n\t        var alternate = fiber.alternate;\n\n\t        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n\t          memoizedUpdaters.add(fiber);\n\t        }\n\t      });\n\t      updaters.clear();\n\t    }\n\n\t    lanes &= ~lane;\n\t  }\n\t}\n\tfunction getTransitionsForLanes(root, lanes) {\n\t  {\n\t    return null;\n\t  }\n\t}\n\n\tvar DiscreteEventPriority = SyncLane;\n\tvar ContinuousEventPriority = InputContinuousLane;\n\tvar DefaultEventPriority = DefaultLane;\n\tvar IdleEventPriority = IdleLane;\n\tvar currentUpdatePriority = NoLane;\n\tfunction getCurrentUpdatePriority() {\n\t  return currentUpdatePriority;\n\t}\n\tfunction setCurrentUpdatePriority(newPriority) {\n\t  currentUpdatePriority = newPriority;\n\t}\n\tfunction runWithPriority(priority, fn) {\n\t  var previousPriority = currentUpdatePriority;\n\n\t  try {\n\t    currentUpdatePriority = priority;\n\t    return fn();\n\t  } finally {\n\t    currentUpdatePriority = previousPriority;\n\t  }\n\t}\n\tfunction higherEventPriority(a, b) {\n\t  return a !== 0 && a < b ? a : b;\n\t}\n\tfunction lowerEventPriority(a, b) {\n\t  return a === 0 || a > b ? a : b;\n\t}\n\tfunction isHigherEventPriority(a, b) {\n\t  return a !== 0 && a < b;\n\t}\n\tfunction lanesToEventPriority(lanes) {\n\t  var lane = getHighestPriorityLane(lanes);\n\n\t  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n\t    return DiscreteEventPriority;\n\t  }\n\n\t  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n\t    return ContinuousEventPriority;\n\t  }\n\n\t  if (includesNonIdleWork(lane)) {\n\t    return DefaultEventPriority;\n\t  }\n\n\t  return IdleEventPriority;\n\t}\n\n\t// This module only exists as an ESM wrapper around the external CommonJS\n\tvar scheduleCallback = Scheduler.unstable_scheduleCallback;\n\tvar cancelCallback = Scheduler.unstable_cancelCallback;\n\tvar shouldYield = Scheduler.unstable_shouldYield;\n\tvar requestPaint = Scheduler.unstable_requestPaint;\n\tvar now = Scheduler.unstable_now;\n\tvar ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n\tvar UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n\tvar NormalPriority = Scheduler.unstable_NormalPriority;\n\tvar IdlePriority = Scheduler.unstable_IdlePriority;\n\t// this doesn't actually exist on the scheduler, but it *does*\n\t// on scheduler/unstable_mock, which we'll need for internal testing\n\tvar unstable_yieldValue = Scheduler.unstable_yieldValue;\n\tvar unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n\n\tvar rendererID = null;\n\tvar injectedHook = null;\n\tvar injectedProfilingHooks = null;\n\tvar hasLoggedError = false;\n\tvar isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\tfunction injectInternals(internals) {\n\t  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n\t    // No DevTools\n\t    return false;\n\t  }\n\n\t  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n\t  if (hook.isDisabled) {\n\t    // This isn't a real property on the hook, but it can be set to opt out\n\t    // of DevTools integration and associated warnings and logs.\n\t    // https://github.com/facebook/react/issues/3877\n\t    return true;\n\t  }\n\n\t  if (!hook.supportsFiber) {\n\t    {\n\t      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n\t    } // DevTools exists, even though it doesn't support Fiber.\n\n\n\t    return true;\n\t  }\n\n\t  try {\n\t    if (enableSchedulingProfiler) {\n\t      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n\t      // This gives DevTools a way to feature detect that isn't tied to version number\n\t      // (since profiling and timeline are controlled by different feature flags).\n\t      internals = assign({}, internals, {\n\t        getLaneLabelMap: getLaneLabelMap,\n\t        injectProfilingHooks: injectProfilingHooks\n\t      });\n\t    }\n\n\t    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n\t    injectedHook = hook;\n\t  } catch (err) {\n\t    // Catch all errors because it is unsafe to throw during initialization.\n\t    {\n\t      error('React instrumentation encountered an error: %s.', err);\n\t    }\n\t  }\n\n\t  if (hook.checkDCE) {\n\t    // This is the real DevTools.\n\t    return true;\n\t  } else {\n\t    // This is likely a hook installed by Fast Refresh runtime.\n\t    return false;\n\t  }\n\t}\n\tfunction onScheduleRoot(root, children) {\n\t  {\n\t    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n\t      try {\n\t        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n\t      } catch (err) {\n\t        if ( !hasLoggedError) {\n\t          hasLoggedError = true;\n\n\t          error('React instrumentation encountered an error: %s', err);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction onCommitRoot(root, eventPriority) {\n\t  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n\t    try {\n\t      var didError = (root.current.flags & DidCapture) === DidCapture;\n\n\t      if (enableProfilerTimer) {\n\t        var schedulerPriority;\n\n\t        switch (eventPriority) {\n\t          case DiscreteEventPriority:\n\t            schedulerPriority = ImmediatePriority;\n\t            break;\n\n\t          case ContinuousEventPriority:\n\t            schedulerPriority = UserBlockingPriority;\n\t            break;\n\n\t          case DefaultEventPriority:\n\t            schedulerPriority = NormalPriority;\n\t            break;\n\n\t          case IdleEventPriority:\n\t            schedulerPriority = IdlePriority;\n\t            break;\n\n\t          default:\n\t            schedulerPriority = NormalPriority;\n\t            break;\n\t        }\n\n\t        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n\t      }\n\t    } catch (err) {\n\t      {\n\t        if (!hasLoggedError) {\n\t          hasLoggedError = true;\n\n\t          error('React instrumentation encountered an error: %s', err);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction onPostCommitRoot(root) {\n\t  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n\t    try {\n\t      injectedHook.onPostCommitFiberRoot(rendererID, root);\n\t    } catch (err) {\n\t      {\n\t        if (!hasLoggedError) {\n\t          hasLoggedError = true;\n\n\t          error('React instrumentation encountered an error: %s', err);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction onCommitUnmount(fiber) {\n\t  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n\t    try {\n\t      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n\t    } catch (err) {\n\t      {\n\t        if (!hasLoggedError) {\n\t          hasLoggedError = true;\n\n\t          error('React instrumentation encountered an error: %s', err);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction setIsStrictModeForDevtools(newIsStrictMode) {\n\t  {\n\t    if (typeof unstable_yieldValue === 'function') {\n\t      // We're in a test because Scheduler.unstable_yieldValue only exists\n\t      // in SchedulerMock. To reduce the noise in strict mode tests,\n\t      // suppress warnings and disable scheduler yielding during the double render\n\t      unstable_setDisableYieldValue(newIsStrictMode);\n\t      setSuppressWarning(newIsStrictMode);\n\t    }\n\n\t    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n\t      try {\n\t        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n\t      } catch (err) {\n\t        {\n\t          if (!hasLoggedError) {\n\t            hasLoggedError = true;\n\n\t            error('React instrumentation encountered an error: %s', err);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t} // Profiler API hooks\n\n\tfunction injectProfilingHooks(profilingHooks) {\n\t  injectedProfilingHooks = profilingHooks;\n\t}\n\n\tfunction getLaneLabelMap() {\n\t  {\n\t    var map = new Map();\n\t    var lane = 1;\n\n\t    for (var index = 0; index < TotalLanes; index++) {\n\t      var label = getLabelForLane(lane);\n\t      map.set(lane, label);\n\t      lane *= 2;\n\t    }\n\n\t    return map;\n\t  }\n\t}\n\n\tfunction markCommitStarted(lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n\t      injectedProfilingHooks.markCommitStarted(lanes);\n\t    }\n\t  }\n\t}\n\tfunction markCommitStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n\t      injectedProfilingHooks.markCommitStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentRenderStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n\t      injectedProfilingHooks.markComponentRenderStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentRenderStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n\t      injectedProfilingHooks.markComponentRenderStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentPassiveEffectMountStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n\t      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentPassiveEffectMountStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n\t      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentPassiveEffectUnmountStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n\t      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentPassiveEffectUnmountStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n\t      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentLayoutEffectMountStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n\t      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentLayoutEffectMountStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n\t      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentLayoutEffectUnmountStarted(fiber) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n\t      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n\t    }\n\t  }\n\t}\n\tfunction markComponentLayoutEffectUnmountStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n\t      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n\t    }\n\t  }\n\t}\n\tfunction markComponentErrored(fiber, thrownValue, lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n\t      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n\t    }\n\t  }\n\t}\n\tfunction markComponentSuspended(fiber, wakeable, lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n\t      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n\t    }\n\t  }\n\t}\n\tfunction markLayoutEffectsStarted(lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n\t      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n\t    }\n\t  }\n\t}\n\tfunction markLayoutEffectsStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n\t      injectedProfilingHooks.markLayoutEffectsStopped();\n\t    }\n\t  }\n\t}\n\tfunction markPassiveEffectsStarted(lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n\t      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n\t    }\n\t  }\n\t}\n\tfunction markPassiveEffectsStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n\t      injectedProfilingHooks.markPassiveEffectsStopped();\n\t    }\n\t  }\n\t}\n\tfunction markRenderStarted(lanes) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n\t      injectedProfilingHooks.markRenderStarted(lanes);\n\t    }\n\t  }\n\t}\n\tfunction markRenderYielded() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n\t      injectedProfilingHooks.markRenderYielded();\n\t    }\n\t  }\n\t}\n\tfunction markRenderStopped() {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n\t      injectedProfilingHooks.markRenderStopped();\n\t    }\n\t  }\n\t}\n\tfunction markRenderScheduled(lane) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n\t      injectedProfilingHooks.markRenderScheduled(lane);\n\t    }\n\t  }\n\t}\n\tfunction markForceUpdateScheduled(fiber, lane) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n\t      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n\t    }\n\t  }\n\t}\n\tfunction markStateUpdateScheduled(fiber, lane) {\n\t  {\n\t    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n\t      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n\t    }\n\t  }\n\t}\n\n\t/**\n\t * inlined Object.is polyfill to avoid requiring consumers ship their own\n\t * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\t */\n\tfunction is(x, y) {\n\t  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n\t  ;\n\t}\n\n\tvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n\tvar syncQueue = null;\n\tvar includesLegacySyncCallbacks = false;\n\tvar isFlushingSyncQueue = false;\n\tfunction scheduleSyncCallback(callback) {\n\t  // Push this callback into an internal queue. We'll flush these either in\n\t  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n\t  if (syncQueue === null) {\n\t    syncQueue = [callback];\n\t  } else {\n\t    // Push onto existing queue. Don't need to schedule a callback because\n\t    // we already scheduled one when we created the queue.\n\t    syncQueue.push(callback);\n\t  }\n\t}\n\tfunction scheduleLegacySyncCallback(callback) {\n\t  includesLegacySyncCallbacks = true;\n\t  scheduleSyncCallback(callback);\n\t}\n\tfunction flushSyncCallbacksOnlyInLegacyMode() {\n\t  // Only flushes the queue if there's a legacy sync callback scheduled.\n\t  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n\t  // it might make more sense for the queue to be a list of roots instead of a\n\t  // list of generic callbacks. Then we can have two: one for legacy roots, one\n\t  // for concurrent roots. And this method would only flush the legacy ones.\n\t  if (includesLegacySyncCallbacks) {\n\t    flushSyncCallbacks();\n\t  }\n\t}\n\tfunction flushSyncCallbacks() {\n\t  if (!isFlushingSyncQueue && syncQueue !== null) {\n\t    // Prevent re-entrance.\n\t    isFlushingSyncQueue = true;\n\t    var i = 0;\n\t    var previousUpdatePriority = getCurrentUpdatePriority();\n\n\t    try {\n\t      var isSync = true;\n\t      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n\t      // queue is in the render or commit phases.\n\n\t      setCurrentUpdatePriority(DiscreteEventPriority);\n\n\t      for (; i < queue.length; i++) {\n\t        var callback = queue[i];\n\n\t        do {\n\t          callback = callback(isSync);\n\t        } while (callback !== null);\n\t      }\n\n\t      syncQueue = null;\n\t      includesLegacySyncCallbacks = false;\n\t    } catch (error) {\n\t      // If something throws, leave the remaining callbacks on the queue.\n\t      if (syncQueue !== null) {\n\t        syncQueue = syncQueue.slice(i + 1);\n\t      } // Resume flushing in the next tick\n\n\n\t      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n\t      throw error;\n\t    } finally {\n\t      setCurrentUpdatePriority(previousUpdatePriority);\n\t      isFlushingSyncQueue = false;\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\t// This is imported by the event replaying implementation in React DOM. It's\n\t// in a separate file to break a circular dependency between the renderer and\n\t// the reconciler.\n\tfunction isRootDehydrated(root) {\n\t  var currentState = root.current.memoizedState;\n\t  return currentState.isDehydrated;\n\t}\n\n\t// TODO: Use the unified fiber stack module instead of this local one?\n\t// Intentionally not using it yet to derisk the initial implementation, because\n\t// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n\t// rather the ids be wrong than crash the whole reconciler.\n\tvar forkStack = [];\n\tvar forkStackIndex = 0;\n\tvar treeForkProvider = null;\n\tvar treeForkCount = 0;\n\tvar idStack = [];\n\tvar idStackIndex = 0;\n\tvar treeContextProvider = null;\n\tvar treeContextId = 1;\n\tvar treeContextOverflow = '';\n\tfunction isForkedChild(workInProgress) {\n\t  warnIfNotHydrating();\n\t  return (workInProgress.flags & Forked) !== NoFlags;\n\t}\n\tfunction getForksAtLevel(workInProgress) {\n\t  warnIfNotHydrating();\n\t  return treeForkCount;\n\t}\n\tfunction getTreeId() {\n\t  var overflow = treeContextOverflow;\n\t  var idWithLeadingBit = treeContextId;\n\t  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n\t  return id.toString(32) + overflow;\n\t}\n\tfunction pushTreeFork(workInProgress, totalChildren) {\n\t  // This is called right after we reconcile an array (or iterator) of child\n\t  // fibers, because that's the only place where we know how many children in\n\t  // the whole set without doing extra work later, or storing addtional\n\t  // information on the fiber.\n\t  //\n\t  // That's why this function is separate from pushTreeId — it's called during\n\t  // the render phase of the fork parent, not the child, which is where we push\n\t  // the other context values.\n\t  //\n\t  // In the Fizz implementation this is much simpler because the child is\n\t  // rendered in the same callstack as the parent.\n\t  //\n\t  // It might be better to just add a `forks` field to the Fiber type. It would\n\t  // make this module simpler.\n\t  warnIfNotHydrating();\n\t  forkStack[forkStackIndex++] = treeForkCount;\n\t  forkStack[forkStackIndex++] = treeForkProvider;\n\t  treeForkProvider = workInProgress;\n\t  treeForkCount = totalChildren;\n\t}\n\tfunction pushTreeId(workInProgress, totalChildren, index) {\n\t  warnIfNotHydrating();\n\t  idStack[idStackIndex++] = treeContextId;\n\t  idStack[idStackIndex++] = treeContextOverflow;\n\t  idStack[idStackIndex++] = treeContextProvider;\n\t  treeContextProvider = workInProgress;\n\t  var baseIdWithLeadingBit = treeContextId;\n\t  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n\t  // of the id; we use it to account for leading 0s.\n\n\t  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n\t  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n\t  var slot = index + 1;\n\t  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n\t  // consideration the leading 1 we use to mark the end of the sequence.\n\n\t  if (length > 30) {\n\t    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n\t    // This branch assumes the length of the base id is greater than 5; it won't\n\t    // work for smaller ids, because you need 5 bits per character.\n\t    //\n\t    // We encode the id in multiple steps: first the base id, then the\n\t    // remaining digits.\n\t    //\n\t    // Each 5 bit sequence corresponds to a single base 32 character. So for\n\t    // example, if the current id is 23 bits long, we can convert 20 of those\n\t    // bits into a string of 4 characters, with 3 bits left over.\n\t    //\n\t    // First calculate how many bits in the base id represent a complete\n\t    // sequence of characters.\n\t    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n\t    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n\t    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n\t    var restOfBaseId = baseId >> numberOfOverflowBits;\n\t    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n\t    // we made more room, this time it won't overflow.\n\n\t    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n\t    var restOfNewBits = slot << restOfBaseLength;\n\t    var id = restOfNewBits | restOfBaseId;\n\t    var overflow = newOverflow + baseOverflow;\n\t    treeContextId = 1 << restOfLength | id;\n\t    treeContextOverflow = overflow;\n\t  } else {\n\t    // Normal path\n\t    var newBits = slot << baseLength;\n\n\t    var _id = newBits | baseId;\n\n\t    var _overflow = baseOverflow;\n\t    treeContextId = 1 << length | _id;\n\t    treeContextOverflow = _overflow;\n\t  }\n\t}\n\tfunction pushMaterializedTreeId(workInProgress) {\n\t  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n\t  // in its children.\n\n\t  var returnFiber = workInProgress.return;\n\n\t  if (returnFiber !== null) {\n\t    var numberOfForks = 1;\n\t    var slotIndex = 0;\n\t    pushTreeFork(workInProgress, numberOfForks);\n\t    pushTreeId(workInProgress, numberOfForks, slotIndex);\n\t  }\n\t}\n\n\tfunction getBitLength(number) {\n\t  return 32 - clz32(number);\n\t}\n\n\tfunction getLeadingBit(id) {\n\t  return 1 << getBitLength(id) - 1;\n\t}\n\n\tfunction popTreeContext(workInProgress) {\n\t  // Restore the previous values.\n\t  // This is a bit more complicated than other context-like modules in Fiber\n\t  // because the same Fiber may appear on the stack multiple times and for\n\t  // different reasons. We have to keep popping until the work-in-progress is\n\t  // no longer at the top of the stack.\n\t  while (workInProgress === treeForkProvider) {\n\t    treeForkProvider = forkStack[--forkStackIndex];\n\t    forkStack[forkStackIndex] = null;\n\t    treeForkCount = forkStack[--forkStackIndex];\n\t    forkStack[forkStackIndex] = null;\n\t  }\n\n\t  while (workInProgress === treeContextProvider) {\n\t    treeContextProvider = idStack[--idStackIndex];\n\t    idStack[idStackIndex] = null;\n\t    treeContextOverflow = idStack[--idStackIndex];\n\t    idStack[idStackIndex] = null;\n\t    treeContextId = idStack[--idStackIndex];\n\t    idStack[idStackIndex] = null;\n\t  }\n\t}\n\tfunction getSuspendedTreeContext() {\n\t  warnIfNotHydrating();\n\n\t  if (treeContextProvider !== null) {\n\t    return {\n\t      id: treeContextId,\n\t      overflow: treeContextOverflow\n\t    };\n\t  } else {\n\t    return null;\n\t  }\n\t}\n\tfunction restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n\t  warnIfNotHydrating();\n\t  idStack[idStackIndex++] = treeContextId;\n\t  idStack[idStackIndex++] = treeContextOverflow;\n\t  idStack[idStackIndex++] = treeContextProvider;\n\t  treeContextId = suspendedContext.id;\n\t  treeContextOverflow = suspendedContext.overflow;\n\t  treeContextProvider = workInProgress;\n\t}\n\n\tfunction warnIfNotHydrating() {\n\t  {\n\t    if (!getIsHydrating()) {\n\t      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n\t    }\n\t  }\n\t}\n\n\t// This may have been an insertion or a hydration.\n\n\tvar hydrationParentFiber = null;\n\tvar nextHydratableInstance = null;\n\tvar isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n\t// due to earlier mismatches or a suspended fiber.\n\n\tvar didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\n\n\tvar hydrationErrors = null;\n\n\tfunction warnIfHydrating() {\n\t  {\n\t    if (isHydrating) {\n\t      error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n\t    }\n\t  }\n\t}\n\n\tfunction markDidThrowWhileHydratingDEV() {\n\t  {\n\t    didSuspendOrErrorDEV = true;\n\t  }\n\t}\n\tfunction didSuspendOrErrorWhileHydratingDEV() {\n\t  {\n\t    return didSuspendOrErrorDEV;\n\t  }\n\t}\n\n\tfunction enterHydrationState(fiber) {\n\t  if (!supportsHydration) {\n\t    return false;\n\t  }\n\n\t  var parentInstance = fiber.stateNode.containerInfo;\n\t  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n\t  hydrationParentFiber = fiber;\n\t  isHydrating = true;\n\t  hydrationErrors = null;\n\t  didSuspendOrErrorDEV = false;\n\t  return true;\n\t}\n\n\tfunction reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n\t  if (!supportsHydration) {\n\t    return false;\n\t  }\n\n\t  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n\t  hydrationParentFiber = fiber;\n\t  isHydrating = true;\n\t  hydrationErrors = null;\n\t  didSuspendOrErrorDEV = false;\n\n\t  if (treeContext !== null) {\n\t    restoreSuspendedTreeContext(fiber, treeContext);\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction warnUnhydratedInstance(returnFiber, instance) {\n\t  {\n\t    switch (returnFiber.tag) {\n\t      case HostRoot:\n\t        {\n\t          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t        {\n\t          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\t          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.\n\t          isConcurrentMode);\n\t          break;\n\t        }\n\n\t      case SuspenseComponent:\n\t        {\n\t          var suspenseState = returnFiber.memoizedState;\n\t          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n\t          break;\n\t        }\n\t    }\n\t  }\n\t}\n\n\tfunction deleteHydratableInstance(returnFiber, instance) {\n\t  warnUnhydratedInstance(returnFiber, instance);\n\t  var childToDelete = createFiberFromHostInstanceForDeletion();\n\t  childToDelete.stateNode = instance;\n\t  childToDelete.return = returnFiber;\n\t  var deletions = returnFiber.deletions;\n\n\t  if (deletions === null) {\n\t    returnFiber.deletions = [childToDelete];\n\t    returnFiber.flags |= ChildDeletion;\n\t  } else {\n\t    deletions.push(childToDelete);\n\t  }\n\t}\n\n\tfunction warnNonhydratedInstance(returnFiber, fiber) {\n\t  {\n\t    if (didSuspendOrErrorDEV) {\n\t      // Inside a boundary that already suspended. We're currently rendering the\n\t      // siblings of a suspended node. The mismatch may be due to the missing\n\t      // data, so it's probably a false positive.\n\t      return;\n\t    }\n\n\t    switch (returnFiber.tag) {\n\t      case HostRoot:\n\t        {\n\t          var parentContainer = returnFiber.stateNode.containerInfo;\n\n\t          switch (fiber.tag) {\n\t            case HostComponent:\n\t              var type = fiber.type;\n\t              var props = fiber.pendingProps;\n\t              didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n\t              break;\n\n\t            case HostText:\n\t              var text = fiber.pendingProps;\n\t              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n\t              break;\n\n\t            case SuspenseComponent:\n\t              didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n\t              break;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t        {\n\t          var parentType = returnFiber.type;\n\t          var parentProps = returnFiber.memoizedProps;\n\t          var parentInstance = returnFiber.stateNode;\n\n\t          switch (fiber.tag) {\n\t            case HostComponent:\n\t              {\n\t                var _type = fiber.type;\n\t                var _props = fiber.pendingProps;\n\t                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\t                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.\n\t                isConcurrentMode);\n\t                break;\n\t              }\n\n\t            case HostText:\n\t              {\n\t                var _text = fiber.pendingProps;\n\n\t                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n\t                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.\n\t                _isConcurrentMode);\n\t                break;\n\t              }\n\n\t            case SuspenseComponent:\n\t              {\n\t                didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n\t                break;\n\t              }\n\t          }\n\n\t          break;\n\t        }\n\n\t      case SuspenseComponent:\n\t        {\n\t          var suspenseState = returnFiber.memoizedState;\n\t          var _parentInstance = suspenseState.dehydrated;\n\t          if (_parentInstance !== null) switch (fiber.tag) {\n\t            case HostComponent:\n\t              var _type2 = fiber.type;\n\t              var _props2 = fiber.pendingProps;\n\t              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n\t              break;\n\n\t            case HostText:\n\t              var _text2 = fiber.pendingProps;\n\t              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n\t              break;\n\n\t            case SuspenseComponent:\n\t              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n\t              break;\n\t          }\n\t          break;\n\t        }\n\n\t      default:\n\t        return;\n\t    }\n\t  }\n\t}\n\n\tfunction insertNonHydratedInstance(returnFiber, fiber) {\n\t  fiber.flags = fiber.flags & ~Hydrating | Placement;\n\t  warnNonhydratedInstance(returnFiber, fiber);\n\t}\n\n\tfunction tryHydrate(fiber, nextInstance) {\n\t  switch (fiber.tag) {\n\t    case HostComponent:\n\t      {\n\t        var type = fiber.type;\n\t        var props = fiber.pendingProps;\n\t        var instance = canHydrateInstance(nextInstance, type, props);\n\n\t        if (instance !== null) {\n\t          fiber.stateNode = instance;\n\t          hydrationParentFiber = fiber;\n\t          nextHydratableInstance = getFirstHydratableChild(instance);\n\t          return true;\n\t        }\n\n\t        return false;\n\t      }\n\n\t    case HostText:\n\t      {\n\t        var text = fiber.pendingProps;\n\t        var textInstance = canHydrateTextInstance(nextInstance, text);\n\n\t        if (textInstance !== null) {\n\t          fiber.stateNode = textInstance;\n\t          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n\t          nextHydratableInstance = null;\n\t          return true;\n\t        }\n\n\t        return false;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n\n\t        if (suspenseInstance !== null) {\n\t          var suspenseState = {\n\t            dehydrated: suspenseInstance,\n\t            treeContext: getSuspendedTreeContext(),\n\t            retryLane: OffscreenLane\n\t          };\n\t          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n\t          // This simplifies the code for getHostSibling and deleting nodes,\n\t          // since it doesn't have to consider all Suspense boundaries and\n\t          // check if they're dehydrated ones or not.\n\n\t          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n\t          dehydratedFragment.return = fiber;\n\t          fiber.child = dehydratedFragment;\n\t          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n\t          // it during the first pass. Instead, we'll reenter it later.\n\n\t          nextHydratableInstance = null;\n\t          return true;\n\t        }\n\n\t        return false;\n\t      }\n\n\t    default:\n\t      return false;\n\t  }\n\t}\n\n\tfunction shouldClientRenderOnMismatch(fiber) {\n\t  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n\t}\n\n\tfunction throwOnHydrationMismatch(fiber) {\n\t  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n\t}\n\n\tfunction tryToClaimNextHydratableInstance(fiber) {\n\t  if (!isHydrating) {\n\t    return;\n\t  }\n\n\t  var nextInstance = nextHydratableInstance;\n\n\t  if (!nextInstance) {\n\t    if (shouldClientRenderOnMismatch(fiber)) {\n\t      warnNonhydratedInstance(hydrationParentFiber, fiber);\n\t      throwOnHydrationMismatch();\n\t    } // Nothing to hydrate. Make it an insertion.\n\n\n\t    insertNonHydratedInstance(hydrationParentFiber, fiber);\n\t    isHydrating = false;\n\t    hydrationParentFiber = fiber;\n\t    return;\n\t  }\n\n\t  var firstAttemptedInstance = nextInstance;\n\n\t  if (!tryHydrate(fiber, nextInstance)) {\n\t    if (shouldClientRenderOnMismatch(fiber)) {\n\t      warnNonhydratedInstance(hydrationParentFiber, fiber);\n\t      throwOnHydrationMismatch();\n\t    } // If we can't hydrate this instance let's try the next one.\n\t    // We use this as a heuristic. It's based on intuition and not data so it\n\t    // might be flawed or unnecessary.\n\n\n\t    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n\t    var prevHydrationParentFiber = hydrationParentFiber;\n\n\t    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n\t      // Nothing to hydrate. Make it an insertion.\n\t      insertNonHydratedInstance(hydrationParentFiber, fiber);\n\t      isHydrating = false;\n\t      hydrationParentFiber = fiber;\n\t      return;\n\t    } // We matched the next one, we'll now assume that the first one was\n\t    // superfluous and we'll delete it. Since we can't eagerly delete it\n\t    // we'll have to schedule a deletion. To do that, this node needs a dummy\n\t    // fiber associated with it.\n\n\n\t    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n\t  }\n\t}\n\n\tfunction prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n\t  if (!supportsHydration) {\n\t    throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  var instance = fiber.stateNode;\n\t  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n\t  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n\t  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n\t  // is a new ref we mark this as an update.\n\n\t  if (updatePayload !== null) {\n\t    return true;\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction prepareToHydrateHostTextInstance(fiber) {\n\t  if (!supportsHydration) {\n\t    throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  var textInstance = fiber.stateNode;\n\t  var textContent = fiber.memoizedProps;\n\t  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n\t  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n\n\t  if (shouldUpdate) {\n\t    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n\t    // hydration parent is the parent host component of this host text.\n\t    var returnFiber = hydrationParentFiber;\n\n\t    if (returnFiber !== null) {\n\t      switch (returnFiber.tag) {\n\t        case HostRoot:\n\t          {\n\t            var parentContainer = returnFiber.stateNode.containerInfo;\n\t            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\t            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n\t            isConcurrentMode);\n\t            break;\n\t          }\n\n\t        case HostComponent:\n\t          {\n\t            var parentType = returnFiber.type;\n\t            var parentProps = returnFiber.memoizedProps;\n\t            var parentInstance = returnFiber.stateNode;\n\n\t            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n\t            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n\t            _isConcurrentMode2);\n\t            break;\n\t          }\n\t      }\n\t    }\n\t  }\n\n\t  return shouldUpdate;\n\t}\n\n\tfunction prepareToHydrateHostSuspenseInstance(fiber) {\n\t  if (!supportsHydration) {\n\t    throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  var suspenseState = fiber.memoizedState;\n\t  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n\t  if (!suspenseInstance) {\n\t    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  hydrateSuspenseInstance(suspenseInstance, fiber);\n\t}\n\n\tfunction skipPastDehydratedSuspenseInstance(fiber) {\n\t  if (!supportsHydration) {\n\t    throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  var suspenseState = fiber.memoizedState;\n\t  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n\t  if (!suspenseInstance) {\n\t    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t  }\n\n\t  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n\t}\n\n\tfunction popToNextHostParent(fiber) {\n\t  var parent = fiber.return;\n\n\t  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n\t    parent = parent.return;\n\t  }\n\n\t  hydrationParentFiber = parent;\n\t}\n\n\tfunction popHydrationState(fiber) {\n\t  if (!supportsHydration) {\n\t    return false;\n\t  }\n\n\t  if (fiber !== hydrationParentFiber) {\n\t    // We're deeper than the current hydration context, inside an inserted\n\t    // tree.\n\t    return false;\n\t  }\n\n\t  if (!isHydrating) {\n\t    // If we're not currently hydrating but we're in a hydration context, then\n\t    // we were an insertion and now need to pop up reenter hydration of our\n\t    // siblings.\n\t    popToNextHostParent(fiber);\n\t    isHydrating = true;\n\t    return false;\n\t  } // If we have any remaining hydratable nodes, we need to delete them now.\n\t  // We only do this deeper than head and body since they tend to have random\n\t  // other nodes in them. We also ignore components with pure text content in\n\t  // side of them. We also don't delete anything inside the root container.\n\n\n\t  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n\t    var nextInstance = nextHydratableInstance;\n\n\t    if (nextInstance) {\n\t      if (shouldClientRenderOnMismatch(fiber)) {\n\t        warnIfUnhydratedTailNodes(fiber);\n\t        throwOnHydrationMismatch();\n\t      } else {\n\t        while (nextInstance) {\n\t          deleteHydratableInstance(fiber, nextInstance);\n\t          nextInstance = getNextHydratableSibling(nextInstance);\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  popToNextHostParent(fiber);\n\n\t  if (fiber.tag === SuspenseComponent) {\n\t    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n\t  } else {\n\t    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction hasUnhydratedTailNodes() {\n\t  return isHydrating && nextHydratableInstance !== null;\n\t}\n\n\tfunction warnIfUnhydratedTailNodes(fiber) {\n\t  var nextInstance = nextHydratableInstance;\n\n\t  while (nextInstance) {\n\t    warnUnhydratedInstance(fiber, nextInstance);\n\t    nextInstance = getNextHydratableSibling(nextInstance);\n\t  }\n\t}\n\n\tfunction resetHydrationState() {\n\t  if (!supportsHydration) {\n\t    return;\n\t  }\n\n\t  hydrationParentFiber = null;\n\t  nextHydratableInstance = null;\n\t  isHydrating = false;\n\t  didSuspendOrErrorDEV = false;\n\t}\n\n\tfunction upgradeHydrationErrorsToRecoverable() {\n\t  if (hydrationErrors !== null) {\n\t    // Successfully completed a forced client render. The errors that occurred\n\t    // during the hydration attempt are now recovered. We will log them in\n\t    // commit phase, once the entire tree has finished.\n\t    queueRecoverableErrors(hydrationErrors);\n\t    hydrationErrors = null;\n\t  }\n\t}\n\n\tfunction getIsHydrating() {\n\t  return isHydrating;\n\t}\n\n\tfunction queueHydrationError(error) {\n\t  if (hydrationErrors === null) {\n\t    hydrationErrors = [error];\n\t  } else {\n\t    hydrationErrors.push(error);\n\t  }\n\t}\n\n\tvar ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\n\tvar NoTransition = null;\n\tfunction requestCurrentTransition() {\n\t  return ReactCurrentBatchConfig.transition;\n\t}\n\n\t/**\n\t * Performs equality by iterating through keys on an object and returning false\n\t * when any key has values which are not strictly equal between the arguments.\n\t * Returns true when the values of all keys are strictly equal.\n\t */\n\n\tfunction shallowEqual(objA, objB) {\n\t  if (objectIs(objA, objB)) {\n\t    return true;\n\t  }\n\n\t  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n\t    return false;\n\t  }\n\n\t  var keysA = Object.keys(objA);\n\t  var keysB = Object.keys(objB);\n\n\t  if (keysA.length !== keysB.length) {\n\t    return false;\n\t  } // Test for A's keys different from B.\n\n\n\t  for (var i = 0; i < keysA.length; i++) {\n\t    var currentKey = keysA[i];\n\n\t    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n\t      return false;\n\t    }\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction describeFiber(fiber) {\n\t  fiber._debugOwner ? fiber._debugOwner.type : null ;\n\t  fiber._debugSource ;\n\n\t  switch (fiber.tag) {\n\t    case HostComponent:\n\t      return describeBuiltInComponentFrame(fiber.type);\n\n\t    case LazyComponent:\n\t      return describeBuiltInComponentFrame('Lazy');\n\n\t    case SuspenseComponent:\n\t      return describeBuiltInComponentFrame('Suspense');\n\n\t    case SuspenseListComponent:\n\t      return describeBuiltInComponentFrame('SuspenseList');\n\n\t    case FunctionComponent:\n\t    case IndeterminateComponent:\n\t    case SimpleMemoComponent:\n\t      return describeFunctionComponentFrame(fiber.type);\n\n\t    case ForwardRef:\n\t      return describeFunctionComponentFrame(fiber.type.render);\n\n\t    case ClassComponent:\n\t      return describeClassComponentFrame(fiber.type);\n\n\t    default:\n\t      return '';\n\t  }\n\t}\n\n\tfunction getStackByFiberInDevAndProd(workInProgress) {\n\t  try {\n\t    var info = '';\n\t    var node = workInProgress;\n\n\t    do {\n\t      info += describeFiber(node);\n\t      node = node.return;\n\t    } while (node);\n\n\t    return info;\n\t  } catch (x) {\n\t    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n\t  }\n\t}\n\n\tvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\tvar current = null;\n\tvar isRendering = false;\n\tfunction getCurrentFiberOwnerNameInDevOrNull() {\n\t  {\n\t    if (current === null) {\n\t      return null;\n\t    }\n\n\t    var owner = current._debugOwner;\n\n\t    if (owner !== null && typeof owner !== 'undefined') {\n\t      return getComponentNameFromFiber(owner);\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction getCurrentFiberStackInDev() {\n\t  {\n\t    if (current === null) {\n\t      return '';\n\t    } // Safe because if current fiber exists, we are reconciling,\n\t    // and it is guaranteed to be the work-in-progress version.\n\n\n\t    return getStackByFiberInDevAndProd(current);\n\t  }\n\t}\n\n\tfunction resetCurrentFiber() {\n\t  {\n\t    ReactDebugCurrentFrame$1.getCurrentStack = null;\n\t    current = null;\n\t    isRendering = false;\n\t  }\n\t}\n\tfunction setCurrentFiber(fiber) {\n\t  {\n\t    ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n\t    current = fiber;\n\t    isRendering = false;\n\t  }\n\t}\n\tfunction getCurrentFiber() {\n\t  {\n\t    return current;\n\t  }\n\t}\n\tfunction setIsRendering(rendering) {\n\t  {\n\t    isRendering = rendering;\n\t  }\n\t}\n\n\tvar ReactStrictModeWarnings = {\n\t  recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n\t  flushPendingUnsafeLifecycleWarnings: function () {},\n\t  recordLegacyContextWarning: function (fiber, instance) {},\n\t  flushLegacyContextWarning: function () {},\n\t  discardPendingWarnings: function () {}\n\t};\n\n\t{\n\t  var findStrictRoot = function (fiber) {\n\t    var maybeStrictRoot = null;\n\t    var node = fiber;\n\n\t    while (node !== null) {\n\t      if (node.mode & StrictLegacyMode) {\n\t        maybeStrictRoot = node;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    return maybeStrictRoot;\n\t  };\n\n\t  var setToSortedString = function (set) {\n\t    var array = [];\n\t    set.forEach(function (value) {\n\t      array.push(value);\n\t    });\n\t    return array.sort().join(', ');\n\t  };\n\n\t  var pendingComponentWillMountWarnings = [];\n\t  var pendingUNSAFE_ComponentWillMountWarnings = [];\n\t  var pendingComponentWillReceivePropsWarnings = [];\n\t  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n\t  var pendingComponentWillUpdateWarnings = [];\n\t  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n\t  var didWarnAboutUnsafeLifecycles = new Set();\n\n\t  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n\t    // Dedupe strategy: Warn once per component.\n\t    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n\t      return;\n\t    }\n\n\t    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n\t    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n\t      pendingComponentWillMountWarnings.push(fiber);\n\t    }\n\n\t    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n\t      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n\t    }\n\n\t    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n\t      pendingComponentWillReceivePropsWarnings.push(fiber);\n\t    }\n\n\t    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n\t      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n\t    }\n\n\t    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n\t      pendingComponentWillUpdateWarnings.push(fiber);\n\t    }\n\n\t    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n\t      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n\t    }\n\t  };\n\n\t  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n\t    // We do an initial pass to gather component names\n\t    var componentWillMountUniqueNames = new Set();\n\n\t    if (pendingComponentWillMountWarnings.length > 0) {\n\t      pendingComponentWillMountWarnings.forEach(function (fiber) {\n\t        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingComponentWillMountWarnings = [];\n\t    }\n\n\t    var UNSAFE_componentWillMountUniqueNames = new Set();\n\n\t    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n\t      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n\t        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingUNSAFE_ComponentWillMountWarnings = [];\n\t    }\n\n\t    var componentWillReceivePropsUniqueNames = new Set();\n\n\t    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n\t      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n\t        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingComponentWillReceivePropsWarnings = [];\n\t    }\n\n\t    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n\t    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n\t      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n\t        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n\t    }\n\n\t    var componentWillUpdateUniqueNames = new Set();\n\n\t    if (pendingComponentWillUpdateWarnings.length > 0) {\n\t      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n\t        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingComponentWillUpdateWarnings = [];\n\t    }\n\n\t    var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n\t    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n\t      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n\t        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutUnsafeLifecycles.add(fiber.type);\n\t      });\n\t      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n\t    } // Finally, we flush all the warnings\n\t    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n\t    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n\t      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n\n\t      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n\t    }\n\n\t    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n\t      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n\t      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n\t    }\n\n\t    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n\t      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n\t      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n\t    }\n\n\t    if (componentWillMountUniqueNames.size > 0) {\n\t      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n\t      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n\t    }\n\n\t    if (componentWillReceivePropsUniqueNames.size > 0) {\n\t      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n\t      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n\t    }\n\n\t    if (componentWillUpdateUniqueNames.size > 0) {\n\t      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n\t      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n\t    }\n\t  };\n\n\t  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n\t  var didWarnAboutLegacyContext = new Set();\n\n\t  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n\t    var strictRoot = findStrictRoot(fiber);\n\n\t    if (strictRoot === null) {\n\t      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n\t      return;\n\t    } // Dedup strategy: Warn once per component.\n\n\n\t    if (didWarnAboutLegacyContext.has(fiber.type)) {\n\t      return;\n\t    }\n\n\t    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n\t    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n\t      if (warningsForRoot === undefined) {\n\t        warningsForRoot = [];\n\t        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n\t      }\n\n\t      warningsForRoot.push(fiber);\n\t    }\n\t  };\n\n\t  ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n\t    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n\t      if (fiberArray.length === 0) {\n\t        return;\n\t      }\n\n\t      var firstFiber = fiberArray[0];\n\t      var uniqueNames = new Set();\n\t      fiberArray.forEach(function (fiber) {\n\t        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n\t        didWarnAboutLegacyContext.add(fiber.type);\n\t      });\n\t      var sortedNames = setToSortedString(uniqueNames);\n\n\t      try {\n\t        setCurrentFiber(firstFiber);\n\n\t        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n\t      } finally {\n\t        resetCurrentFiber();\n\t      }\n\t    });\n\t  };\n\n\t  ReactStrictModeWarnings.discardPendingWarnings = function () {\n\t    pendingComponentWillMountWarnings = [];\n\t    pendingUNSAFE_ComponentWillMountWarnings = [];\n\t    pendingComponentWillReceivePropsWarnings = [];\n\t    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n\t    pendingComponentWillUpdateWarnings = [];\n\t    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n\t    pendingLegacyContextWarning = new Map();\n\t  };\n\t}\n\n\t/*\n\t * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n\t * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n\t *\n\t * The functions in this module will throw an easier-to-understand,\n\t * easier-to-debug exception with a clear errors message message explaining the\n\t * problem. (Instead of a confusing exception thrown inside the implementation\n\t * of the `value` object).\n\t */\n\t// $FlowFixMe only called in DEV, so void return is not possible.\n\tfunction typeName(value) {\n\t  {\n\t    // toStringTag is needed for namespaced types like Temporal.Instant\n\t    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n\t    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n\t    return type;\n\t  }\n\t} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\n\tfunction willCoercionThrow(value) {\n\t  {\n\t    try {\n\t      testStringCoercion(value);\n\t      return false;\n\t    } catch (e) {\n\t      return true;\n\t    }\n\t  }\n\t}\n\n\tfunction testStringCoercion(value) {\n\t  // If you ended up here by following an exception call stack, here's what's\n\t  // happened: you supplied an object or symbol value to React (as a prop, key,\n\t  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n\t  // coerce it to a string using `'' + value`, an exception was thrown.\n\t  //\n\t  // The most common types that will cause this exception are `Symbol` instances\n\t  // and Temporal objects like `Temporal.Instant`. But any object that has a\n\t  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n\t  // exception. (Library authors do this to prevent users from using built-in\n\t  // numeric operators like `+` or comparison operators like `>=` because custom\n\t  // methods are needed to perform accurate arithmetic or comparison.)\n\t  //\n\t  // To fix the problem, coerce this object or symbol value to a string before\n\t  // passing it to React. The most reliable way is usually `String(value)`.\n\t  //\n\t  // To find which value is throwing, check the browser or debugger console.\n\t  // Before this exception was thrown, there should be `console.error` output\n\t  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n\t  // problem and how that type was used: key, atrribute, input value prop, etc.\n\t  // In most cases, this console output also shows the component and its\n\t  // ancestor components where the exception happened.\n\t  //\n\t  // eslint-disable-next-line react-internal/safe-string-coercion\n\t  return '' + value;\n\t}\n\tfunction checkKeyStringCoercion(value) {\n\t  {\n\t    if (willCoercionThrow(value)) {\n\t      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n\t      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n\t    }\n\t  }\n\t}\n\tfunction checkPropStringCoercion(value, propName) {\n\t  {\n\t    if (willCoercionThrow(value)) {\n\t      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n\n\t      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n\t    }\n\t  }\n\t}\n\n\tfunction resolveDefaultProps(Component, baseProps) {\n\t  if (Component && Component.defaultProps) {\n\t    // Resolve default props. Taken from ReactElement\n\t    var props = assign({}, baseProps);\n\t    var defaultProps = Component.defaultProps;\n\n\t    for (var propName in defaultProps) {\n\t      if (props[propName] === undefined) {\n\t        props[propName] = defaultProps[propName];\n\t      }\n\t    }\n\n\t    return props;\n\t  }\n\n\t  return baseProps;\n\t}\n\n\tvar valueCursor = createCursor(null);\n\tvar rendererSigil;\n\n\t{\n\t  // Use this to detect multiple renderers using the same context\n\t  rendererSigil = {};\n\t}\n\n\tvar currentlyRenderingFiber = null;\n\tvar lastContextDependency = null;\n\tvar lastFullyObservedContext = null;\n\tvar isDisallowedContextReadInDEV = false;\n\tfunction resetContextDependencies() {\n\t  // This is called right before React yields execution, to ensure `readContext`\n\t  // cannot be called outside the render phase.\n\t  currentlyRenderingFiber = null;\n\t  lastContextDependency = null;\n\t  lastFullyObservedContext = null;\n\n\t  {\n\t    isDisallowedContextReadInDEV = false;\n\t  }\n\t}\n\tfunction enterDisallowedContextReadInDEV() {\n\t  {\n\t    isDisallowedContextReadInDEV = true;\n\t  }\n\t}\n\tfunction exitDisallowedContextReadInDEV() {\n\t  {\n\t    isDisallowedContextReadInDEV = false;\n\t  }\n\t}\n\tfunction pushProvider(providerFiber, context, nextValue) {\n\t  if (isPrimaryRenderer) {\n\t    push(valueCursor, context._currentValue, providerFiber);\n\t    context._currentValue = nextValue;\n\n\t    {\n\t      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n\t        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n\t      }\n\n\t      context._currentRenderer = rendererSigil;\n\t    }\n\t  } else {\n\t    push(valueCursor, context._currentValue2, providerFiber);\n\t    context._currentValue2 = nextValue;\n\n\t    {\n\t      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n\t        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n\t      }\n\n\t      context._currentRenderer2 = rendererSigil;\n\t    }\n\t  }\n\t}\n\tfunction popProvider(context, providerFiber) {\n\t  var currentValue = valueCursor.current;\n\t  pop(valueCursor, providerFiber);\n\n\t  if (isPrimaryRenderer) {\n\t    {\n\t      context._currentValue = currentValue;\n\t    }\n\t  } else {\n\t    {\n\t      context._currentValue2 = currentValue;\n\t    }\n\t  }\n\t}\n\tfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n\t  // Update the child lanes of all the ancestors, including the alternates.\n\t  var node = parent;\n\n\t  while (node !== null) {\n\t    var alternate = node.alternate;\n\n\t    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n\t      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n\t      if (alternate !== null) {\n\t        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n\t      }\n\t    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n\t      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n\t    }\n\n\t    if (node === propagationRoot) {\n\t      break;\n\t    }\n\n\t    node = node.return;\n\t  }\n\n\t  {\n\t    if (node !== propagationRoot) {\n\t      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\t  }\n\t}\n\tfunction propagateContextChange(workInProgress, context, renderLanes) {\n\t  {\n\t    propagateContextChange_eager(workInProgress, context, renderLanes);\n\t  }\n\t}\n\n\tfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n\n\t  var fiber = workInProgress.child;\n\n\t  if (fiber !== null) {\n\t    // Set the return pointer of the child to the work-in-progress fiber.\n\t    fiber.return = workInProgress;\n\t  }\n\n\t  while (fiber !== null) {\n\t    var nextFiber = void 0; // Visit this fiber.\n\n\t    var list = fiber.dependencies;\n\n\t    if (list !== null) {\n\t      nextFiber = fiber.child;\n\t      var dependency = list.firstContext;\n\n\t      while (dependency !== null) {\n\t        // Check if the context matches.\n\t        if (dependency.context === context) {\n\t          // Match! Schedule an update on this fiber.\n\t          if (fiber.tag === ClassComponent) {\n\t            // Schedule a force update on the work-in-progress.\n\t            var lane = pickArbitraryLane(renderLanes);\n\t            var update = createUpdate(NoTimestamp, lane);\n\t            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n\t            // update to the current fiber, too, which means it will persist even if\n\t            // this render is thrown away. Since it's a race condition, not sure it's\n\t            // worth fixing.\n\t            // Inlined `enqueueUpdate` to remove interleaved update check\n\n\t            var updateQueue = fiber.updateQueue;\n\n\t            if (updateQueue === null) ; else {\n\t              var sharedQueue = updateQueue.shared;\n\t              var pending = sharedQueue.pending;\n\n\t              if (pending === null) {\n\t                // This is the first update. Create a circular list.\n\t                update.next = update;\n\t              } else {\n\t                update.next = pending.next;\n\t                pending.next = update;\n\t              }\n\n\t              sharedQueue.pending = update;\n\t            }\n\t          }\n\n\t          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n\t          var alternate = fiber.alternate;\n\n\t          if (alternate !== null) {\n\t            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n\t          }\n\n\t          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n\t          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n\t          // dependency list.\n\n\t          break;\n\t        }\n\n\t        dependency = dependency.next;\n\t      }\n\t    } else if (fiber.tag === ContextProvider) {\n\t      // Don't scan deeper if this is a matching provider\n\t      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n\t    } else if (fiber.tag === DehydratedFragment) {\n\t      // If a dehydrated suspense boundary is in this subtree, we don't know\n\t      // if it will have any context consumers in it. The best we can do is\n\t      // mark it as having updates.\n\t      var parentSuspense = fiber.return;\n\n\t      if (parentSuspense === null) {\n\t        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n\t      }\n\n\t      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n\t      var _alternate = parentSuspense.alternate;\n\n\t      if (_alternate !== null) {\n\t        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n\t      } // This is intentionally passing this fiber as the parent\n\t      // because we want to schedule this fiber as having work\n\t      // on its children. We'll use the childLanes on\n\t      // this fiber to indicate that a context has changed.\n\n\n\t      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n\t      nextFiber = fiber.sibling;\n\t    } else {\n\t      // Traverse down.\n\t      nextFiber = fiber.child;\n\t    }\n\n\t    if (nextFiber !== null) {\n\t      // Set the return pointer of the child to the work-in-progress fiber.\n\t      nextFiber.return = fiber;\n\t    } else {\n\t      // No child. Traverse to next sibling.\n\t      nextFiber = fiber;\n\n\t      while (nextFiber !== null) {\n\t        if (nextFiber === workInProgress) {\n\t          // We're back to the root of this subtree. Exit.\n\t          nextFiber = null;\n\t          break;\n\t        }\n\n\t        var sibling = nextFiber.sibling;\n\n\t        if (sibling !== null) {\n\t          // Set the return pointer of the sibling to the work-in-progress fiber.\n\t          sibling.return = nextFiber.return;\n\t          nextFiber = sibling;\n\t          break;\n\t        } // No more siblings. Traverse up.\n\n\n\t        nextFiber = nextFiber.return;\n\t      }\n\t    }\n\n\t    fiber = nextFiber;\n\t  }\n\t}\n\tfunction prepareToReadContext(workInProgress, renderLanes) {\n\t  currentlyRenderingFiber = workInProgress;\n\t  lastContextDependency = null;\n\t  lastFullyObservedContext = null;\n\t  var dependencies = workInProgress.dependencies;\n\n\t  if (dependencies !== null) {\n\t    {\n\t      var firstContext = dependencies.firstContext;\n\n\t      if (firstContext !== null) {\n\t        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n\t          // Context list has a pending update. Mark that this fiber performed work.\n\t          markWorkInProgressReceivedUpdate();\n\t        } // Reset the work-in-progress list\n\n\n\t        dependencies.firstContext = null;\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction readContext(context) {\n\t  {\n\t    // This warning would fire if you read context inside a Hook like useMemo.\n\t    // Unlike the class check below, it's not enforced in production for perf.\n\t    if (isDisallowedContextReadInDEV) {\n\t      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n\t    }\n\t  }\n\n\t  var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n\n\t  if (lastFullyObservedContext === context) ; else {\n\t    var contextItem = {\n\t      context: context,\n\t      memoizedValue: value,\n\t      next: null\n\t    };\n\n\t    if (lastContextDependency === null) {\n\t      if (currentlyRenderingFiber === null) {\n\t        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n\t      } // This is the first dependency for this component. Create a new list.\n\n\n\t      lastContextDependency = contextItem;\n\t      currentlyRenderingFiber.dependencies = {\n\t        lanes: NoLanes,\n\t        firstContext: contextItem\n\t      };\n\t    } else {\n\t      // Append a new context item.\n\t      lastContextDependency = lastContextDependency.next = contextItem;\n\t    }\n\t  }\n\n\t  return value;\n\t}\n\n\t// render. When this render exits, either because it finishes or because it is\n\t// interrupted, the interleaved updates will be transferred onto the main part\n\t// of the queue.\n\n\tvar concurrentQueues = null;\n\tfunction pushConcurrentUpdateQueue(queue) {\n\t  if (concurrentQueues === null) {\n\t    concurrentQueues = [queue];\n\t  } else {\n\t    concurrentQueues.push(queue);\n\t  }\n\t}\n\tfunction finishQueueingConcurrentUpdates() {\n\t  // Transfer the interleaved updates onto the main queue. Each queue has a\n\t  // `pending` field and an `interleaved` field. When they are not null, they\n\t  // point to the last node in a circular linked list. We need to append the\n\t  // interleaved list to the end of the pending list by joining them into a\n\t  // single, circular list.\n\t  if (concurrentQueues !== null) {\n\t    for (var i = 0; i < concurrentQueues.length; i++) {\n\t      var queue = concurrentQueues[i];\n\t      var lastInterleavedUpdate = queue.interleaved;\n\n\t      if (lastInterleavedUpdate !== null) {\n\t        queue.interleaved = null;\n\t        var firstInterleavedUpdate = lastInterleavedUpdate.next;\n\t        var lastPendingUpdate = queue.pending;\n\n\t        if (lastPendingUpdate !== null) {\n\t          var firstPendingUpdate = lastPendingUpdate.next;\n\t          lastPendingUpdate.next = firstInterleavedUpdate;\n\t          lastInterleavedUpdate.next = firstPendingUpdate;\n\t        }\n\n\t        queue.pending = lastInterleavedUpdate;\n\t      }\n\t    }\n\n\t    concurrentQueues = null;\n\t  }\n\t}\n\tfunction enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n\t  var interleaved = queue.interleaved;\n\n\t  if (interleaved === null) {\n\t    // This is the first update. Create a circular list.\n\t    update.next = update; // At the end of the current render, this queue's interleaved updates will\n\t    // be transferred to the pending queue.\n\n\t    pushConcurrentUpdateQueue(queue);\n\t  } else {\n\t    update.next = interleaved.next;\n\t    interleaved.next = update;\n\t  }\n\n\t  queue.interleaved = update;\n\t  return markUpdateLaneFromFiberToRoot(fiber, lane);\n\t}\n\tfunction enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {\n\t  var interleaved = queue.interleaved;\n\n\t  if (interleaved === null) {\n\t    // This is the first update. Create a circular list.\n\t    update.next = update; // At the end of the current render, this queue's interleaved updates will\n\t    // be transferred to the pending queue.\n\n\t    pushConcurrentUpdateQueue(queue);\n\t  } else {\n\t    update.next = interleaved.next;\n\t    interleaved.next = update;\n\t  }\n\n\t  queue.interleaved = update;\n\t}\n\tfunction enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n\t  var interleaved = queue.interleaved;\n\n\t  if (interleaved === null) {\n\t    // This is the first update. Create a circular list.\n\t    update.next = update; // At the end of the current render, this queue's interleaved updates will\n\t    // be transferred to the pending queue.\n\n\t    pushConcurrentUpdateQueue(queue);\n\t  } else {\n\t    update.next = interleaved.next;\n\t    interleaved.next = update;\n\t  }\n\n\t  queue.interleaved = update;\n\t  return markUpdateLaneFromFiberToRoot(fiber, lane);\n\t}\n\tfunction enqueueConcurrentRenderForLane(fiber, lane) {\n\t  return markUpdateLaneFromFiberToRoot(fiber, lane);\n\t} // Calling this function outside this module should only be done for backwards\n\t// compatibility and should always be accompanied by a warning.\n\n\tvar unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n\n\tfunction markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n\t  // Update the source fiber's lanes\n\t  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n\t  var alternate = sourceFiber.alternate;\n\n\t  if (alternate !== null) {\n\t    alternate.lanes = mergeLanes(alternate.lanes, lane);\n\t  }\n\n\t  {\n\t    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n\t      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n\t    }\n\t  } // Walk the parent path to the root and update the child lanes.\n\n\n\t  var node = sourceFiber;\n\t  var parent = sourceFiber.return;\n\n\t  while (parent !== null) {\n\t    parent.childLanes = mergeLanes(parent.childLanes, lane);\n\t    alternate = parent.alternate;\n\n\t    if (alternate !== null) {\n\t      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n\t    } else {\n\t      {\n\t        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n\t          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n\t        }\n\t      }\n\t    }\n\n\t    node = parent;\n\t    parent = parent.return;\n\t  }\n\n\t  if (node.tag === HostRoot) {\n\t    var root = node.stateNode;\n\t    return root;\n\t  } else {\n\t    return null;\n\t  }\n\t}\n\n\tvar UpdateState = 0;\n\tvar ReplaceState = 1;\n\tvar ForceUpdate = 2;\n\tvar CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n\t// It should only be read right after calling `processUpdateQueue`, via\n\t// `checkHasForceUpdateAfterProcessing`.\n\n\tvar hasForceUpdate = false;\n\tvar didWarnUpdateInsideUpdate;\n\tvar currentlyProcessingQueue;\n\n\t{\n\t  didWarnUpdateInsideUpdate = false;\n\t  currentlyProcessingQueue = null;\n\t}\n\n\tfunction initializeUpdateQueue(fiber) {\n\t  var queue = {\n\t    baseState: fiber.memoizedState,\n\t    firstBaseUpdate: null,\n\t    lastBaseUpdate: null,\n\t    shared: {\n\t      pending: null,\n\t      interleaved: null,\n\t      lanes: NoLanes\n\t    },\n\t    effects: null\n\t  };\n\t  fiber.updateQueue = queue;\n\t}\n\tfunction cloneUpdateQueue(current, workInProgress) {\n\t  // Clone the update queue from current. Unless it's already a clone.\n\t  var queue = workInProgress.updateQueue;\n\t  var currentQueue = current.updateQueue;\n\n\t  if (queue === currentQueue) {\n\t    var clone = {\n\t      baseState: currentQueue.baseState,\n\t      firstBaseUpdate: currentQueue.firstBaseUpdate,\n\t      lastBaseUpdate: currentQueue.lastBaseUpdate,\n\t      shared: currentQueue.shared,\n\t      effects: currentQueue.effects\n\t    };\n\t    workInProgress.updateQueue = clone;\n\t  }\n\t}\n\tfunction createUpdate(eventTime, lane) {\n\t  var update = {\n\t    eventTime: eventTime,\n\t    lane: lane,\n\t    tag: UpdateState,\n\t    payload: null,\n\t    callback: null,\n\t    next: null\n\t  };\n\t  return update;\n\t}\n\tfunction enqueueUpdate(fiber, update, lane) {\n\t  var updateQueue = fiber.updateQueue;\n\n\t  if (updateQueue === null) {\n\t    // Only occurs if the fiber has been unmounted.\n\t    return null;\n\t  }\n\n\t  var sharedQueue = updateQueue.shared;\n\n\t  {\n\t    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n\t      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n\n\t      didWarnUpdateInsideUpdate = true;\n\t    }\n\t  }\n\n\t  if (isUnsafeClassRenderPhaseUpdate()) {\n\t    // This is an unsafe render phase update. Add directly to the update\n\t    // queue so we can process it immediately during the current render.\n\t    var pending = sharedQueue.pending;\n\n\t    if (pending === null) {\n\t      // This is the first update. Create a circular list.\n\t      update.next = update;\n\t    } else {\n\t      update.next = pending.next;\n\t      pending.next = update;\n\t    }\n\n\t    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n\t    // this fiber. This is for backwards compatibility in the case where you\n\t    // update a different component during render phase than the one that is\n\t    // currently renderings (a pattern that is accompanied by a warning).\n\n\t    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n\t  } else {\n\t    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n\t  }\n\t}\n\tfunction entangleTransitions(root, fiber, lane) {\n\t  var updateQueue = fiber.updateQueue;\n\n\t  if (updateQueue === null) {\n\t    // Only occurs if the fiber has been unmounted.\n\t    return;\n\t  }\n\n\t  var sharedQueue = updateQueue.shared;\n\n\t  if (isTransitionLane(lane)) {\n\t    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n\t    // have finished. We can remove them from the shared queue, which represents\n\t    // a superset of the actually pending lanes. In some cases we may entangle\n\t    // more than we need to, but that's OK. In fact it's worse if we *don't*\n\t    // entangle when we should.\n\n\t    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n\t    var newQueueLanes = mergeLanes(queueLanes, lane);\n\t    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n\t    // the lane finished since the last time we entangled it. So we need to\n\t    // entangle it again, just to be sure.\n\n\t    markRootEntangled(root, newQueueLanes);\n\t  }\n\t}\n\tfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n\t  // Captured updates are updates that are thrown by a child during the render\n\t  // phase. They should be discarded if the render is aborted. Therefore,\n\t  // we should only put them on the work-in-progress queue, not the current one.\n\t  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n\t  var current = workInProgress.alternate;\n\n\t  if (current !== null) {\n\t    var currentQueue = current.updateQueue;\n\n\t    if (queue === currentQueue) {\n\t      // The work-in-progress queue is the same as current. This happens when\n\t      // we bail out on a parent fiber that then captures an error thrown by\n\t      // a child. Since we want to append the update only to the work-in\n\t      // -progress queue, we need to clone the updates. We usually clone during\n\t      // processUpdateQueue, but that didn't happen in this case because we\n\t      // skipped over the parent when we bailed out.\n\t      var newFirst = null;\n\t      var newLast = null;\n\t      var firstBaseUpdate = queue.firstBaseUpdate;\n\n\t      if (firstBaseUpdate !== null) {\n\t        // Loop through the updates and clone them.\n\t        var update = firstBaseUpdate;\n\n\t        do {\n\t          var clone = {\n\t            eventTime: update.eventTime,\n\t            lane: update.lane,\n\t            tag: update.tag,\n\t            payload: update.payload,\n\t            callback: update.callback,\n\t            next: null\n\t          };\n\n\t          if (newLast === null) {\n\t            newFirst = newLast = clone;\n\t          } else {\n\t            newLast.next = clone;\n\t            newLast = clone;\n\t          }\n\n\t          update = update.next;\n\t        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n\t        if (newLast === null) {\n\t          newFirst = newLast = capturedUpdate;\n\t        } else {\n\t          newLast.next = capturedUpdate;\n\t          newLast = capturedUpdate;\n\t        }\n\t      } else {\n\t        // There are no base updates.\n\t        newFirst = newLast = capturedUpdate;\n\t      }\n\n\t      queue = {\n\t        baseState: currentQueue.baseState,\n\t        firstBaseUpdate: newFirst,\n\t        lastBaseUpdate: newLast,\n\t        shared: currentQueue.shared,\n\t        effects: currentQueue.effects\n\t      };\n\t      workInProgress.updateQueue = queue;\n\t      return;\n\t    }\n\t  } // Append the update to the end of the list.\n\n\n\t  var lastBaseUpdate = queue.lastBaseUpdate;\n\n\t  if (lastBaseUpdate === null) {\n\t    queue.firstBaseUpdate = capturedUpdate;\n\t  } else {\n\t    lastBaseUpdate.next = capturedUpdate;\n\t  }\n\n\t  queue.lastBaseUpdate = capturedUpdate;\n\t}\n\n\tfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n\t  switch (update.tag) {\n\t    case ReplaceState:\n\t      {\n\t        var payload = update.payload;\n\n\t        if (typeof payload === 'function') {\n\t          // Updater function\n\t          {\n\t            enterDisallowedContextReadInDEV();\n\t          }\n\n\t          var nextState = payload.call(instance, prevState, nextProps);\n\n\t          {\n\t            if ( workInProgress.mode & StrictLegacyMode) {\n\t              setIsStrictModeForDevtools(true);\n\n\t              try {\n\t                payload.call(instance, prevState, nextProps);\n\t              } finally {\n\t                setIsStrictModeForDevtools(false);\n\t              }\n\t            }\n\n\t            exitDisallowedContextReadInDEV();\n\t          }\n\n\t          return nextState;\n\t        } // State object\n\n\n\t        return payload;\n\t      }\n\n\t    case CaptureUpdate:\n\t      {\n\t        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n\t      }\n\t    // Intentional fallthrough\n\n\t    case UpdateState:\n\t      {\n\t        var _payload = update.payload;\n\t        var partialState;\n\n\t        if (typeof _payload === 'function') {\n\t          // Updater function\n\t          {\n\t            enterDisallowedContextReadInDEV();\n\t          }\n\n\t          partialState = _payload.call(instance, prevState, nextProps);\n\n\t          {\n\t            if ( workInProgress.mode & StrictLegacyMode) {\n\t              setIsStrictModeForDevtools(true);\n\n\t              try {\n\t                _payload.call(instance, prevState, nextProps);\n\t              } finally {\n\t                setIsStrictModeForDevtools(false);\n\t              }\n\t            }\n\n\t            exitDisallowedContextReadInDEV();\n\t          }\n\t        } else {\n\t          // Partial state object\n\t          partialState = _payload;\n\t        }\n\n\t        if (partialState === null || partialState === undefined) {\n\t          // Null and undefined are treated as no-ops.\n\t          return prevState;\n\t        } // Merge the partial state and the previous state.\n\n\n\t        return assign({}, prevState, partialState);\n\t      }\n\n\t    case ForceUpdate:\n\t      {\n\t        hasForceUpdate = true;\n\t        return prevState;\n\t      }\n\t  }\n\n\t  return prevState;\n\t}\n\n\tfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n\t  // This is always non-null on a ClassComponent or HostRoot\n\t  var queue = workInProgress.updateQueue;\n\t  hasForceUpdate = false;\n\n\t  {\n\t    currentlyProcessingQueue = queue.shared;\n\t  }\n\n\t  var firstBaseUpdate = queue.firstBaseUpdate;\n\t  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n\t  var pendingQueue = queue.shared.pending;\n\n\t  if (pendingQueue !== null) {\n\t    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n\t    // and last so that it's non-circular.\n\n\t    var lastPendingUpdate = pendingQueue;\n\t    var firstPendingUpdate = lastPendingUpdate.next;\n\t    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n\t    if (lastBaseUpdate === null) {\n\t      firstBaseUpdate = firstPendingUpdate;\n\t    } else {\n\t      lastBaseUpdate.next = firstPendingUpdate;\n\t    }\n\n\t    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n\t    // we need to transfer the updates to that queue, too. Because the base\n\t    // queue is a singly-linked list with no cycles, we can append to both\n\t    // lists and take advantage of structural sharing.\n\t    // TODO: Pass `current` as argument\n\n\t    var current = workInProgress.alternate;\n\n\t    if (current !== null) {\n\t      // This is always non-null on a ClassComponent or HostRoot\n\t      var currentQueue = current.updateQueue;\n\t      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n\t      if (currentLastBaseUpdate !== lastBaseUpdate) {\n\t        if (currentLastBaseUpdate === null) {\n\t          currentQueue.firstBaseUpdate = firstPendingUpdate;\n\t        } else {\n\t          currentLastBaseUpdate.next = firstPendingUpdate;\n\t        }\n\n\t        currentQueue.lastBaseUpdate = lastPendingUpdate;\n\t      }\n\t    }\n\t  } // These values may change as we process the queue.\n\n\n\t  if (firstBaseUpdate !== null) {\n\t    // Iterate through the list of updates to compute the result.\n\t    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n\t    // from the original lanes.\n\n\t    var newLanes = NoLanes;\n\t    var newBaseState = null;\n\t    var newFirstBaseUpdate = null;\n\t    var newLastBaseUpdate = null;\n\t    var update = firstBaseUpdate;\n\n\t    do {\n\t      var updateLane = update.lane;\n\t      var updateEventTime = update.eventTime;\n\n\t      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n\t        // Priority is insufficient. Skip this update. If this is the first\n\t        // skipped update, the previous update/state is the new base\n\t        // update/state.\n\t        var clone = {\n\t          eventTime: updateEventTime,\n\t          lane: updateLane,\n\t          tag: update.tag,\n\t          payload: update.payload,\n\t          callback: update.callback,\n\t          next: null\n\t        };\n\n\t        if (newLastBaseUpdate === null) {\n\t          newFirstBaseUpdate = newLastBaseUpdate = clone;\n\t          newBaseState = newState;\n\t        } else {\n\t          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n\t        } // Update the remaining priority in the queue.\n\n\n\t        newLanes = mergeLanes(newLanes, updateLane);\n\t      } else {\n\t        // This update does have sufficient priority.\n\t        if (newLastBaseUpdate !== null) {\n\t          var _clone = {\n\t            eventTime: updateEventTime,\n\t            // This update is going to be committed so we never want uncommit\n\t            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n\t            // this will never be skipped by the check above.\n\t            lane: NoLane,\n\t            tag: update.tag,\n\t            payload: update.payload,\n\t            callback: update.callback,\n\t            next: null\n\t          };\n\t          newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n\t        } // Process this update.\n\n\n\t        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n\t        var callback = update.callback;\n\n\t        if (callback !== null && // If the update was already committed, we should not queue its\n\t        // callback again.\n\t        update.lane !== NoLane) {\n\t          workInProgress.flags |= Callback;\n\t          var effects = queue.effects;\n\n\t          if (effects === null) {\n\t            queue.effects = [update];\n\t          } else {\n\t            effects.push(update);\n\t          }\n\t        }\n\t      }\n\n\t      update = update.next;\n\n\t      if (update === null) {\n\t        pendingQueue = queue.shared.pending;\n\n\t        if (pendingQueue === null) {\n\t          break;\n\t        } else {\n\t          // An update was scheduled from inside a reducer. Add the new\n\t          // pending updates to the end of the list and keep processing.\n\t          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n\t          // unravel them when transferring them to the base queue.\n\n\t          var _firstPendingUpdate = _lastPendingUpdate.next;\n\t          _lastPendingUpdate.next = null;\n\t          update = _firstPendingUpdate;\n\t          queue.lastBaseUpdate = _lastPendingUpdate;\n\t          queue.shared.pending = null;\n\t        }\n\t      }\n\t    } while (true);\n\n\t    if (newLastBaseUpdate === null) {\n\t      newBaseState = newState;\n\t    }\n\n\t    queue.baseState = newBaseState;\n\t    queue.firstBaseUpdate = newFirstBaseUpdate;\n\t    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n\t    // process them during this render, but we do need to track which lanes\n\t    // are remaining.\n\n\t    var lastInterleaved = queue.shared.interleaved;\n\n\t    if (lastInterleaved !== null) {\n\t      var interleaved = lastInterleaved;\n\n\t      do {\n\t        newLanes = mergeLanes(newLanes, interleaved.lane);\n\t        interleaved = interleaved.next;\n\t      } while (interleaved !== lastInterleaved);\n\t    } else if (firstBaseUpdate === null) {\n\t      // `queue.lanes` is used for entangling transitions. We can set it back to\n\t      // zero once the queue is empty.\n\t      queue.shared.lanes = NoLanes;\n\t    } // Set the remaining expiration time to be whatever is remaining in the queue.\n\t    // This should be fine because the only two other things that contribute to\n\t    // expiration time are props and context. We're already in the middle of the\n\t    // begin phase by the time we start processing the queue, so we've already\n\t    // dealt with the props. Context in components that specify\n\t    // shouldComponentUpdate is tricky; but we'll have to account for\n\t    // that regardless.\n\n\n\t    markSkippedUpdateLanes(newLanes);\n\t    workInProgress.lanes = newLanes;\n\t    workInProgress.memoizedState = newState;\n\t  }\n\n\t  {\n\t    currentlyProcessingQueue = null;\n\t  }\n\t}\n\n\tfunction callCallback(callback, context) {\n\t  if (typeof callback !== 'function') {\n\t    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n\t  }\n\n\t  callback.call(context);\n\t}\n\n\tfunction resetHasForceUpdateBeforeProcessing() {\n\t  hasForceUpdate = false;\n\t}\n\tfunction checkHasForceUpdateAfterProcessing() {\n\t  return hasForceUpdate;\n\t}\n\tfunction commitUpdateQueue(finishedWork, finishedQueue, instance) {\n\t  // Commit the effects\n\t  var effects = finishedQueue.effects;\n\t  finishedQueue.effects = null;\n\n\t  if (effects !== null) {\n\t    for (var i = 0; i < effects.length; i++) {\n\t      var effect = effects[i];\n\t      var callback = effect.callback;\n\n\t      if (callback !== null) {\n\t        effect.callback = null;\n\t        callCallback(callback, instance);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n\t// We'll use it to determine whether we need to initialize legacy refs.\n\n\tvar emptyRefsObject = new React$1.Component().refs;\n\tvar didWarnAboutStateAssignmentForComponent;\n\tvar didWarnAboutUninitializedState;\n\tvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n\tvar didWarnAboutLegacyLifecyclesAndDerivedState;\n\tvar didWarnAboutUndefinedDerivedState;\n\tvar warnOnUndefinedDerivedState;\n\tvar warnOnInvalidCallback;\n\tvar didWarnAboutDirectlyAssigningPropsToState;\n\tvar didWarnAboutContextTypeAndContextTypes;\n\tvar didWarnAboutInvalidateContextType;\n\n\t{\n\t  didWarnAboutStateAssignmentForComponent = new Set();\n\t  didWarnAboutUninitializedState = new Set();\n\t  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n\t  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n\t  didWarnAboutDirectlyAssigningPropsToState = new Set();\n\t  didWarnAboutUndefinedDerivedState = new Set();\n\t  didWarnAboutContextTypeAndContextTypes = new Set();\n\t  didWarnAboutInvalidateContextType = new Set();\n\t  var didWarnOnInvalidCallback = new Set();\n\n\t  warnOnInvalidCallback = function (callback, callerName) {\n\t    if (callback === null || typeof callback === 'function') {\n\t      return;\n\t    }\n\n\t    var key = callerName + '_' + callback;\n\n\t    if (!didWarnOnInvalidCallback.has(key)) {\n\t      didWarnOnInvalidCallback.add(key);\n\n\t      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n\t    }\n\t  };\n\n\t  warnOnUndefinedDerivedState = function (type, partialState) {\n\t    if (partialState === undefined) {\n\t      var componentName = getComponentNameFromType(type) || 'Component';\n\n\t      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n\t        didWarnAboutUndefinedDerivedState.add(componentName);\n\n\t        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n\t      }\n\t    }\n\t  }; // This is so gross but it's at least non-critical and can be removed if\n\t  // it causes problems. This is meant to give a nicer error message for\n\t  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n\t  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n\t  // exception.\n\n\n\t  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n\t    enumerable: false,\n\t    value: function () {\n\t      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n\t    }\n\t  });\n\t  Object.freeze(fakeInternalInstance);\n\t}\n\n\tfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n\t  var prevState = workInProgress.memoizedState;\n\t  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n\t  {\n\t    if ( workInProgress.mode & StrictLegacyMode) {\n\t      setIsStrictModeForDevtools(true);\n\n\t      try {\n\t        // Invoke the function an extra time to help detect side-effects.\n\t        partialState = getDerivedStateFromProps(nextProps, prevState);\n\t      } finally {\n\t        setIsStrictModeForDevtools(false);\n\t      }\n\t    }\n\n\t    warnOnUndefinedDerivedState(ctor, partialState);\n\t  } // Merge the partial state and the previous state.\n\n\n\t  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n\t  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n\t  // base state.\n\n\t  if (workInProgress.lanes === NoLanes) {\n\t    // Queue is always non-null for classes\n\t    var updateQueue = workInProgress.updateQueue;\n\t    updateQueue.baseState = memoizedState;\n\t  }\n\t}\n\n\tvar classComponentUpdater = {\n\t  isMounted: isMounted,\n\t  enqueueSetState: function (inst, payload, callback) {\n\t    var fiber = get(inst);\n\t    var eventTime = requestEventTime();\n\t    var lane = requestUpdateLane(fiber);\n\t    var update = createUpdate(eventTime, lane);\n\t    update.payload = payload;\n\n\t    if (callback !== undefined && callback !== null) {\n\t      {\n\t        warnOnInvalidCallback(callback, 'setState');\n\t      }\n\n\t      update.callback = callback;\n\t    }\n\n\t    var root = enqueueUpdate(fiber, update, lane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitions(root, fiber, lane);\n\t    }\n\n\t    {\n\t      markStateUpdateScheduled(fiber, lane);\n\t    }\n\t  },\n\t  enqueueReplaceState: function (inst, payload, callback) {\n\t    var fiber = get(inst);\n\t    var eventTime = requestEventTime();\n\t    var lane = requestUpdateLane(fiber);\n\t    var update = createUpdate(eventTime, lane);\n\t    update.tag = ReplaceState;\n\t    update.payload = payload;\n\n\t    if (callback !== undefined && callback !== null) {\n\t      {\n\t        warnOnInvalidCallback(callback, 'replaceState');\n\t      }\n\n\t      update.callback = callback;\n\t    }\n\n\t    var root = enqueueUpdate(fiber, update, lane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitions(root, fiber, lane);\n\t    }\n\n\t    {\n\t      markStateUpdateScheduled(fiber, lane);\n\t    }\n\t  },\n\t  enqueueForceUpdate: function (inst, callback) {\n\t    var fiber = get(inst);\n\t    var eventTime = requestEventTime();\n\t    var lane = requestUpdateLane(fiber);\n\t    var update = createUpdate(eventTime, lane);\n\t    update.tag = ForceUpdate;\n\n\t    if (callback !== undefined && callback !== null) {\n\t      {\n\t        warnOnInvalidCallback(callback, 'forceUpdate');\n\t      }\n\n\t      update.callback = callback;\n\t    }\n\n\t    var root = enqueueUpdate(fiber, update, lane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitions(root, fiber, lane);\n\t    }\n\n\t    {\n\t      markForceUpdateScheduled(fiber, lane);\n\t    }\n\t  }\n\t};\n\n\tfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n\t  var instance = workInProgress.stateNode;\n\n\t  if (typeof instance.shouldComponentUpdate === 'function') {\n\t    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n\t    {\n\t      if ( workInProgress.mode & StrictLegacyMode) {\n\t        setIsStrictModeForDevtools(true);\n\n\t        try {\n\t          // Invoke the function an extra time to help detect side-effects.\n\t          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\t        } finally {\n\t          setIsStrictModeForDevtools(false);\n\t        }\n\t      }\n\n\t      if (shouldUpdate === undefined) {\n\t        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n\t      }\n\t    }\n\n\t    return shouldUpdate;\n\t  }\n\n\t  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n\t    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction checkClassInstance(workInProgress, ctor, newProps) {\n\t  var instance = workInProgress.stateNode;\n\n\t  {\n\t    var name = getComponentNameFromType(ctor) || 'Component';\n\t    var renderPresent = instance.render;\n\n\t    if (!renderPresent) {\n\t      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n\t        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n\t      } else {\n\t        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n\t      }\n\t    }\n\n\t    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n\t      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n\t    }\n\n\t    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n\t      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n\t    }\n\n\t    if (instance.propTypes) {\n\t      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n\t    }\n\n\t    if (instance.contextType) {\n\t      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n\t    }\n\n\t    {\n\t      if (instance.contextTypes) {\n\t        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n\t      }\n\n\t      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n\t        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n\t        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n\t      }\n\t    }\n\n\t    if (typeof instance.componentShouldUpdate === 'function') {\n\t      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n\t    }\n\n\t    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n\t      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n\t    }\n\n\t    if (typeof instance.componentDidUnmount === 'function') {\n\t      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n\t    }\n\n\t    if (typeof instance.componentDidReceiveProps === 'function') {\n\t      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n\t    }\n\n\t    if (typeof instance.componentWillRecieveProps === 'function') {\n\t      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n\t    }\n\n\t    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n\t      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n\t    }\n\n\t    var hasMutatedProps = instance.props !== newProps;\n\n\t    if (instance.props !== undefined && hasMutatedProps) {\n\t      error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n\t    }\n\n\t    if (instance.defaultProps) {\n\t      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n\t    }\n\n\t    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n\t      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n\t      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n\t    }\n\n\t    if (typeof instance.getDerivedStateFromProps === 'function') {\n\t      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n\t    }\n\n\t    if (typeof instance.getDerivedStateFromError === 'function') {\n\t      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n\t    }\n\n\t    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n\t      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n\t    }\n\n\t    var _state = instance.state;\n\n\t    if (_state && (typeof _state !== 'object' || isArray(_state))) {\n\t      error('%s.state: must be set to an object or null', name);\n\t    }\n\n\t    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n\t      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n\t    }\n\t  }\n\t}\n\n\tfunction adoptClassInstance(workInProgress, instance) {\n\t  instance.updater = classComponentUpdater;\n\t  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n\t  set(instance, workInProgress);\n\n\t  {\n\t    instance._reactInternalInstance = fakeInternalInstance;\n\t  }\n\t}\n\n\tfunction constructClassInstance(workInProgress, ctor, props) {\n\t  var isLegacyContextConsumer = false;\n\t  var unmaskedContext = emptyContextObject;\n\t  var context = emptyContextObject;\n\t  var contextType = ctor.contextType;\n\n\t  {\n\t    if ('contextType' in ctor) {\n\t      var isValid = // Allow null for conditional declaration\n\t      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n\t      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n\t        didWarnAboutInvalidateContextType.add(ctor);\n\t        var addendum = '';\n\n\t        if (contextType === undefined) {\n\t          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n\t        } else if (typeof contextType !== 'object') {\n\t          addendum = ' However, it is set to a ' + typeof contextType + '.';\n\t        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n\t          addendum = ' Did you accidentally pass the Context.Provider instead?';\n\t        } else if (contextType._context !== undefined) {\n\t          // <Context.Consumer>\n\t          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n\t        } else {\n\t          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n\t        }\n\n\t        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n\t      }\n\t    }\n\t  }\n\n\t  if (typeof contextType === 'object' && contextType !== null) {\n\t    context = readContext(contextType);\n\t  } else {\n\t    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n\t    var contextTypes = ctor.contextTypes;\n\t    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n\t    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n\t  }\n\n\t  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n\t  {\n\t    if ( workInProgress.mode & StrictLegacyMode) {\n\t      setIsStrictModeForDevtools(true);\n\n\t      try {\n\t        instance = new ctor(props, context); // eslint-disable-line no-new\n\t      } finally {\n\t        setIsStrictModeForDevtools(false);\n\t      }\n\t    }\n\t  }\n\n\t  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n\t  adoptClassInstance(workInProgress, instance);\n\n\t  {\n\t    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n\t      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n\t      if (!didWarnAboutUninitializedState.has(componentName)) {\n\t        didWarnAboutUninitializedState.add(componentName);\n\n\t        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n\t      }\n\t    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n\t    // Warn about these lifecycles if they are present.\n\t    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n\t    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n\t      var foundWillMountName = null;\n\t      var foundWillReceivePropsName = null;\n\t      var foundWillUpdateName = null;\n\n\t      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n\t        foundWillMountName = 'componentWillMount';\n\t      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n\t        foundWillMountName = 'UNSAFE_componentWillMount';\n\t      }\n\n\t      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n\t        foundWillReceivePropsName = 'componentWillReceiveProps';\n\t      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n\t        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n\t      }\n\n\t      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n\t        foundWillUpdateName = 'componentWillUpdate';\n\t      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n\t        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n\t      }\n\n\t      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n\t        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n\t        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n\t        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n\t          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n\t          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n\t        }\n\t      }\n\t    }\n\t  } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n\t  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n\t  if (isLegacyContextConsumer) {\n\t    cacheContext(workInProgress, unmaskedContext, context);\n\t  }\n\n\t  return instance;\n\t}\n\n\tfunction callComponentWillMount(workInProgress, instance) {\n\t  var oldState = instance.state;\n\n\t  if (typeof instance.componentWillMount === 'function') {\n\t    instance.componentWillMount();\n\t  }\n\n\t  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n\t    instance.UNSAFE_componentWillMount();\n\t  }\n\n\t  if (oldState !== instance.state) {\n\t    {\n\t      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n\t    }\n\n\t    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n\t  }\n\t}\n\n\tfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n\t  var oldState = instance.state;\n\n\t  if (typeof instance.componentWillReceiveProps === 'function') {\n\t    instance.componentWillReceiveProps(newProps, nextContext);\n\t  }\n\n\t  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n\t    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n\t  }\n\n\t  if (instance.state !== oldState) {\n\t    {\n\t      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n\t      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n\t        didWarnAboutStateAssignmentForComponent.add(componentName);\n\n\t        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n\t      }\n\t    }\n\n\t    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n\t  }\n\t} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\n\tfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n\t  {\n\t    checkClassInstance(workInProgress, ctor, newProps);\n\t  }\n\n\t  var instance = workInProgress.stateNode;\n\t  instance.props = newProps;\n\t  instance.state = workInProgress.memoizedState;\n\t  instance.refs = emptyRefsObject;\n\t  initializeUpdateQueue(workInProgress);\n\t  var contextType = ctor.contextType;\n\n\t  if (typeof contextType === 'object' && contextType !== null) {\n\t    instance.context = readContext(contextType);\n\t  } else {\n\t    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n\t    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n\t  }\n\n\t  {\n\t    if (instance.state === newProps) {\n\t      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n\t      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n\t        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n\t        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n\t      }\n\t    }\n\n\t    if (workInProgress.mode & StrictLegacyMode) {\n\t      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n\t    }\n\n\t    {\n\t      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n\t    }\n\t  }\n\n\t  instance.state = workInProgress.memoizedState;\n\t  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n\t  if (typeof getDerivedStateFromProps === 'function') {\n\t    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n\t    instance.state = workInProgress.memoizedState;\n\t  } // In order to support react-lifecycles-compat polyfilled components,\n\t  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n\t  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n\t    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n\t    // process them now.\n\n\t    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n\t    instance.state = workInProgress.memoizedState;\n\t  }\n\n\t  if (typeof instance.componentDidMount === 'function') {\n\t    var fiberFlags = Update;\n\n\t    {\n\t      fiberFlags |= LayoutStatic;\n\t    }\n\n\t    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t      fiberFlags |= MountLayoutDev;\n\t    }\n\n\t    workInProgress.flags |= fiberFlags;\n\t  }\n\t}\n\n\tfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n\t  var instance = workInProgress.stateNode;\n\t  var oldProps = workInProgress.memoizedProps;\n\t  instance.props = oldProps;\n\t  var oldContext = instance.context;\n\t  var contextType = ctor.contextType;\n\t  var nextContext = emptyContextObject;\n\n\t  if (typeof contextType === 'object' && contextType !== null) {\n\t    nextContext = readContext(contextType);\n\t  } else {\n\t    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n\t    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n\t  }\n\n\t  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\t  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n\t  // ever the previously attempted to render - not the \"current\". However,\n\t  // during componentDidUpdate we pass the \"current\" props.\n\t  // In order to support react-lifecycles-compat polyfilled components,\n\t  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\t  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n\t    if (oldProps !== newProps || oldContext !== nextContext) {\n\t      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n\t    }\n\t  }\n\n\t  resetHasForceUpdateBeforeProcessing();\n\t  var oldState = workInProgress.memoizedState;\n\t  var newState = instance.state = oldState;\n\t  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n\t  newState = workInProgress.memoizedState;\n\n\t  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n\t    // If an update was already in progress, we should schedule an Update\n\t    // effect even though we're bailing out, so that cWU/cDU are called.\n\t    if (typeof instance.componentDidMount === 'function') {\n\t      var fiberFlags = Update;\n\n\t      {\n\t        fiberFlags |= LayoutStatic;\n\t      }\n\n\t      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t        fiberFlags |= MountLayoutDev;\n\t      }\n\n\t      workInProgress.flags |= fiberFlags;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  if (typeof getDerivedStateFromProps === 'function') {\n\t    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n\t    newState = workInProgress.memoizedState;\n\t  }\n\n\t  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n\t  if (shouldUpdate) {\n\t    // In order to support react-lifecycles-compat polyfilled components,\n\t    // Unsafe lifecycles should not be invoked for components using the new APIs.\n\t    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n\t      if (typeof instance.componentWillMount === 'function') {\n\t        instance.componentWillMount();\n\t      }\n\n\t      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n\t        instance.UNSAFE_componentWillMount();\n\t      }\n\t    }\n\n\t    if (typeof instance.componentDidMount === 'function') {\n\t      var _fiberFlags = Update;\n\n\t      {\n\t        _fiberFlags |= LayoutStatic;\n\t      }\n\n\t      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t        _fiberFlags |= MountLayoutDev;\n\t      }\n\n\t      workInProgress.flags |= _fiberFlags;\n\t    }\n\t  } else {\n\t    // If an update was already in progress, we should schedule an Update\n\t    // effect even though we're bailing out, so that cWU/cDU are called.\n\t    if (typeof instance.componentDidMount === 'function') {\n\t      var _fiberFlags2 = Update;\n\n\t      {\n\t        _fiberFlags2 |= LayoutStatic;\n\t      }\n\n\t      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t        _fiberFlags2 |= MountLayoutDev;\n\t      }\n\n\t      workInProgress.flags |= _fiberFlags2;\n\t    } // If shouldComponentUpdate returned false, we should still update the\n\t    // memoized state to indicate that this work can be reused.\n\n\n\t    workInProgress.memoizedProps = newProps;\n\t    workInProgress.memoizedState = newState;\n\t  } // Update the existing instance's state, props, and context pointers even\n\t  // if shouldComponentUpdate returns false.\n\n\n\t  instance.props = newProps;\n\t  instance.state = newState;\n\t  instance.context = nextContext;\n\t  return shouldUpdate;\n\t} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\n\tfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n\t  var instance = workInProgress.stateNode;\n\t  cloneUpdateQueue(current, workInProgress);\n\t  var unresolvedOldProps = workInProgress.memoizedProps;\n\t  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n\t  instance.props = oldProps;\n\t  var unresolvedNewProps = workInProgress.pendingProps;\n\t  var oldContext = instance.context;\n\t  var contextType = ctor.contextType;\n\t  var nextContext = emptyContextObject;\n\n\t  if (typeof contextType === 'object' && contextType !== null) {\n\t    nextContext = readContext(contextType);\n\t  } else {\n\t    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n\t    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n\t  }\n\n\t  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\t  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n\t  // ever the previously attempted to render - not the \"current\". However,\n\t  // during componentDidUpdate we pass the \"current\" props.\n\t  // In order to support react-lifecycles-compat polyfilled components,\n\t  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\t  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n\t    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n\t      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n\t    }\n\t  }\n\n\t  resetHasForceUpdateBeforeProcessing();\n\t  var oldState = workInProgress.memoizedState;\n\t  var newState = instance.state = oldState;\n\t  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n\t  newState = workInProgress.memoizedState;\n\n\t  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\n\t    // If an update was already in progress, we should schedule an Update\n\t    // effect even though we're bailing out, so that cWU/cDU are called.\n\t    if (typeof instance.componentDidUpdate === 'function') {\n\t      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n\t        workInProgress.flags |= Update;\n\t      }\n\t    }\n\n\t    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n\t      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n\t        workInProgress.flags |= Snapshot;\n\t      }\n\t    }\n\n\t    return false;\n\t  }\n\n\t  if (typeof getDerivedStateFromProps === 'function') {\n\t    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n\t    newState = workInProgress.memoizedState;\n\t  }\n\n\t  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n\t  // both before and after `shouldComponentUpdate` has been called. Not ideal,\n\t  // but I'm loath to refactor this function. This only happens for memoized\n\t  // components so it's not that common.\n\t  enableLazyContextPropagation   ;\n\n\t  if (shouldUpdate) {\n\t    // In order to support react-lifecycles-compat polyfilled components,\n\t    // Unsafe lifecycles should not be invoked for components using the new APIs.\n\t    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n\t      if (typeof instance.componentWillUpdate === 'function') {\n\t        instance.componentWillUpdate(newProps, newState, nextContext);\n\t      }\n\n\t      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n\t        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n\t      }\n\t    }\n\n\t    if (typeof instance.componentDidUpdate === 'function') {\n\t      workInProgress.flags |= Update;\n\t    }\n\n\t    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n\t      workInProgress.flags |= Snapshot;\n\t    }\n\t  } else {\n\t    // If an update was already in progress, we should schedule an Update\n\t    // effect even though we're bailing out, so that cWU/cDU are called.\n\t    if (typeof instance.componentDidUpdate === 'function') {\n\t      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n\t        workInProgress.flags |= Update;\n\t      }\n\t    }\n\n\t    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n\t      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n\t        workInProgress.flags |= Snapshot;\n\t      }\n\t    } // If shouldComponentUpdate returned false, we should still update the\n\t    // memoized props/state to indicate that this work can be reused.\n\n\n\t    workInProgress.memoizedProps = newProps;\n\t    workInProgress.memoizedState = newState;\n\t  } // Update the existing instance's state, props, and context pointers even\n\t  // if shouldComponentUpdate returns false.\n\n\n\t  instance.props = newProps;\n\t  instance.state = newState;\n\t  instance.context = nextContext;\n\t  return shouldUpdate;\n\t}\n\n\tvar didWarnAboutMaps;\n\tvar didWarnAboutGenerators;\n\tvar didWarnAboutStringRefs;\n\tvar ownerHasKeyUseWarning;\n\tvar ownerHasFunctionTypeWarning;\n\n\tvar warnForMissingKey = function (child, returnFiber) {};\n\n\t{\n\t  didWarnAboutMaps = false;\n\t  didWarnAboutGenerators = false;\n\t  didWarnAboutStringRefs = {};\n\t  /**\n\t   * Warn if there's no key explicitly set on dynamic arrays of children or\n\t   * object keys are not valid. This allows us to keep track of children between\n\t   * updates.\n\t   */\n\n\t  ownerHasKeyUseWarning = {};\n\t  ownerHasFunctionTypeWarning = {};\n\n\t  warnForMissingKey = function (child, returnFiber) {\n\t    if (child === null || typeof child !== 'object') {\n\t      return;\n\t    }\n\n\t    if (!child._store || child._store.validated || child.key != null) {\n\t      return;\n\t    }\n\n\t    if (typeof child._store !== 'object') {\n\t      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\t    }\n\n\t    child._store.validated = true;\n\t    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n\t    if (ownerHasKeyUseWarning[componentName]) {\n\t      return;\n\t    }\n\n\t    ownerHasKeyUseWarning[componentName] = true;\n\n\t    error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n\t  };\n\t}\n\n\tfunction coerceRef(returnFiber, current, element) {\n\t  var mixedRef = element.ref;\n\n\t  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n\t    {\n\t      // TODO: Clean this up once we turn on the string ref warning for\n\t      // everyone, because the strict mode case will no longer be relevant\n\t      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n\t      // because these cannot be automatically converted to an arrow function\n\t      // using a codemod. Therefore, we don't have to warn about string refs again.\n\t      !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n\t        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n\t        if (!didWarnAboutStringRefs[componentName]) {\n\t          {\n\t            error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n\t          }\n\n\t          didWarnAboutStringRefs[componentName] = true;\n\t        }\n\t      }\n\t    }\n\n\t    if (element._owner) {\n\t      var owner = element._owner;\n\t      var inst;\n\n\t      if (owner) {\n\t        var ownerFiber = owner;\n\n\t        if (ownerFiber.tag !== ClassComponent) {\n\t          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n\t        }\n\n\t        inst = ownerFiber.stateNode;\n\t      }\n\n\t      if (!inst) {\n\t        throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n\t      } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n\t      var resolvedInst = inst;\n\n\t      {\n\t        checkPropStringCoercion(mixedRef, 'ref');\n\t      }\n\n\t      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n\t      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n\t        return current.ref;\n\t      }\n\n\t      var ref = function (value) {\n\t        var refs = resolvedInst.refs;\n\n\t        if (refs === emptyRefsObject) {\n\t          // This is a lazy pooled frozen object, so we need to initialize.\n\t          refs = resolvedInst.refs = {};\n\t        }\n\n\t        if (value === null) {\n\t          delete refs[stringRef];\n\t        } else {\n\t          refs[stringRef] = value;\n\t        }\n\t      };\n\n\t      ref._stringRef = stringRef;\n\t      return ref;\n\t    } else {\n\t      if (typeof mixedRef !== 'string') {\n\t        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n\t      }\n\n\t      if (!element._owner) {\n\t        throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n\t      }\n\t    }\n\t  }\n\n\t  return mixedRef;\n\t}\n\n\tfunction throwOnInvalidObjectType(returnFiber, newChild) {\n\t  var childString = Object.prototype.toString.call(newChild);\n\t  throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n\t}\n\n\tfunction warnOnFunctionType(returnFiber) {\n\t  {\n\t    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n\t    if (ownerHasFunctionTypeWarning[componentName]) {\n\t      return;\n\t    }\n\n\t    ownerHasFunctionTypeWarning[componentName] = true;\n\n\t    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n\t  }\n\t}\n\n\tfunction resolveLazy(lazyType) {\n\t  var payload = lazyType._payload;\n\t  var init = lazyType._init;\n\t  return init(payload);\n\t} // This wrapper function exists because I expect to clone the code in each path\n\t// to be able to optimize each path individually by branching early. This needs\n\t// a compiler or we can do it manually. Helpers that don't need this branching\n\t// live outside of this function.\n\n\n\tfunction ChildReconciler(shouldTrackSideEffects) {\n\t  function deleteChild(returnFiber, childToDelete) {\n\t    if (!shouldTrackSideEffects) {\n\t      // Noop.\n\t      return;\n\t    }\n\n\t    var deletions = returnFiber.deletions;\n\n\t    if (deletions === null) {\n\t      returnFiber.deletions = [childToDelete];\n\t      returnFiber.flags |= ChildDeletion;\n\t    } else {\n\t      deletions.push(childToDelete);\n\t    }\n\t  }\n\n\t  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n\t    if (!shouldTrackSideEffects) {\n\t      // Noop.\n\t      return null;\n\t    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n\t    // assuming that after the first child we've already added everything.\n\n\n\t    var childToDelete = currentFirstChild;\n\n\t    while (childToDelete !== null) {\n\t      deleteChild(returnFiber, childToDelete);\n\t      childToDelete = childToDelete.sibling;\n\t    }\n\n\t    return null;\n\t  }\n\n\t  function mapRemainingChildren(returnFiber, currentFirstChild) {\n\t    // Add the remaining children to a temporary map so that we can find them by\n\t    // keys quickly. Implicit (null) keys get added to this set with their index\n\t    // instead.\n\t    var existingChildren = new Map();\n\t    var existingChild = currentFirstChild;\n\n\t    while (existingChild !== null) {\n\t      if (existingChild.key !== null) {\n\t        existingChildren.set(existingChild.key, existingChild);\n\t      } else {\n\t        existingChildren.set(existingChild.index, existingChild);\n\t      }\n\n\t      existingChild = existingChild.sibling;\n\t    }\n\n\t    return existingChildren;\n\t  }\n\n\t  function useFiber(fiber, pendingProps) {\n\t    // We currently set sibling to null and index to 0 here because it is easy\n\t    // to forget to do before returning it. E.g. for the single child case.\n\t    var clone = createWorkInProgress(fiber, pendingProps);\n\t    clone.index = 0;\n\t    clone.sibling = null;\n\t    return clone;\n\t  }\n\n\t  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n\t    newFiber.index = newIndex;\n\n\t    if (!shouldTrackSideEffects) {\n\t      // During hydration, the useId algorithm needs to know which fibers are\n\t      // part of a list of children (arrays, iterators).\n\t      newFiber.flags |= Forked;\n\t      return lastPlacedIndex;\n\t    }\n\n\t    var current = newFiber.alternate;\n\n\t    if (current !== null) {\n\t      var oldIndex = current.index;\n\n\t      if (oldIndex < lastPlacedIndex) {\n\t        // This is a move.\n\t        newFiber.flags |= Placement;\n\t        return lastPlacedIndex;\n\t      } else {\n\t        // This item can stay in place.\n\t        return oldIndex;\n\t      }\n\t    } else {\n\t      // This is an insertion.\n\t      newFiber.flags |= Placement;\n\t      return lastPlacedIndex;\n\t    }\n\t  }\n\n\t  function placeSingleChild(newFiber) {\n\t    // This is simpler for the single child case. We only need to do a\n\t    // placement for inserting new children.\n\t    if (shouldTrackSideEffects && newFiber.alternate === null) {\n\t      newFiber.flags |= Placement;\n\t    }\n\n\t    return newFiber;\n\t  }\n\n\t  function updateTextNode(returnFiber, current, textContent, lanes) {\n\t    if (current === null || current.tag !== HostText) {\n\t      // Insert\n\t      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n\t      created.return = returnFiber;\n\t      return created;\n\t    } else {\n\t      // Update\n\t      var existing = useFiber(current, textContent);\n\t      existing.return = returnFiber;\n\t      return existing;\n\t    }\n\t  }\n\n\t  function updateElement(returnFiber, current, element, lanes) {\n\t    var elementType = element.type;\n\n\t    if (elementType === REACT_FRAGMENT_TYPE) {\n\t      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n\t    }\n\n\t    if (current !== null) {\n\t      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n\t       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.\n\t      // We need to do this after the Hot Reloading check above,\n\t      // because hot reloading has different semantics than prod because\n\t      // it doesn't resuspend. So we can't let the call below suspend.\n\t      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n\t        // Move based on index\n\t        var existing = useFiber(current, element.props);\n\t        existing.ref = coerceRef(returnFiber, current, element);\n\t        existing.return = returnFiber;\n\n\t        {\n\t          existing._debugSource = element._source;\n\t          existing._debugOwner = element._owner;\n\t        }\n\n\t        return existing;\n\t      }\n\t    } // Insert\n\n\n\t    var created = createFiberFromElement(element, returnFiber.mode, lanes);\n\t    created.ref = coerceRef(returnFiber, current, element);\n\t    created.return = returnFiber;\n\t    return created;\n\t  }\n\n\t  function updatePortal(returnFiber, current, portal, lanes) {\n\t    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n\t      // Insert\n\t      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n\t      created.return = returnFiber;\n\t      return created;\n\t    } else {\n\t      // Update\n\t      var existing = useFiber(current, portal.children || []);\n\t      existing.return = returnFiber;\n\t      return existing;\n\t    }\n\t  }\n\n\t  function updateFragment(returnFiber, current, fragment, lanes, key) {\n\t    if (current === null || current.tag !== Fragment) {\n\t      // Insert\n\t      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n\t      created.return = returnFiber;\n\t      return created;\n\t    } else {\n\t      // Update\n\t      var existing = useFiber(current, fragment);\n\t      existing.return = returnFiber;\n\t      return existing;\n\t    }\n\t  }\n\n\t  function createChild(returnFiber, newChild, lanes) {\n\t    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n\t      // Text nodes don't have keys. If the previous node is implicitly keyed\n\t      // we can continue to replace it without aborting even if it is not a text\n\t      // node.\n\t      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n\t      created.return = returnFiber;\n\t      return created;\n\t    }\n\n\t    if (typeof newChild === 'object' && newChild !== null) {\n\t      switch (newChild.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t          {\n\t            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n\t            _created.ref = coerceRef(returnFiber, null, newChild);\n\t            _created.return = returnFiber;\n\t            return _created;\n\t          }\n\n\t        case REACT_PORTAL_TYPE:\n\t          {\n\t            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n\t            _created2.return = returnFiber;\n\t            return _created2;\n\t          }\n\n\t        case REACT_LAZY_TYPE:\n\t          {\n\t            var payload = newChild._payload;\n\t            var init = newChild._init;\n\t            return createChild(returnFiber, init(payload), lanes);\n\t          }\n\t      }\n\n\t      if (isArray(newChild) || getIteratorFn(newChild)) {\n\t        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n\t        _created3.return = returnFiber;\n\t        return _created3;\n\t      }\n\n\t      throwOnInvalidObjectType(returnFiber, newChild);\n\t    }\n\n\t    {\n\t      if (typeof newChild === 'function') {\n\t        warnOnFunctionType(returnFiber);\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n\t    // Update the fiber if the keys match, otherwise return null.\n\t    var key = oldFiber !== null ? oldFiber.key : null;\n\n\t    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n\t      // Text nodes don't have keys. If the previous node is implicitly keyed\n\t      // we can continue to replace it without aborting even if it is not a text\n\t      // node.\n\t      if (key !== null) {\n\t        return null;\n\t      }\n\n\t      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n\t    }\n\n\t    if (typeof newChild === 'object' && newChild !== null) {\n\t      switch (newChild.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t          {\n\t            if (newChild.key === key) {\n\t              return updateElement(returnFiber, oldFiber, newChild, lanes);\n\t            } else {\n\t              return null;\n\t            }\n\t          }\n\n\t        case REACT_PORTAL_TYPE:\n\t          {\n\t            if (newChild.key === key) {\n\t              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n\t            } else {\n\t              return null;\n\t            }\n\t          }\n\n\t        case REACT_LAZY_TYPE:\n\t          {\n\t            var payload = newChild._payload;\n\t            var init = newChild._init;\n\t            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n\t          }\n\t      }\n\n\t      if (isArray(newChild) || getIteratorFn(newChild)) {\n\t        if (key !== null) {\n\t          return null;\n\t        }\n\n\t        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n\t      }\n\n\t      throwOnInvalidObjectType(returnFiber, newChild);\n\t    }\n\n\t    {\n\t      if (typeof newChild === 'function') {\n\t        warnOnFunctionType(returnFiber);\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n\t    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n\t      // Text nodes don't have keys, so we neither have to check the old nor\n\t      // new node for the key. If both are text nodes, they match.\n\t      var matchedFiber = existingChildren.get(newIdx) || null;\n\t      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n\t    }\n\n\t    if (typeof newChild === 'object' && newChild !== null) {\n\t      switch (newChild.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t          {\n\t            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n\t            return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n\t          }\n\n\t        case REACT_PORTAL_TYPE:\n\t          {\n\t            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n\t            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n\t          }\n\n\t        case REACT_LAZY_TYPE:\n\t          var payload = newChild._payload;\n\t          var init = newChild._init;\n\t          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n\t      }\n\n\t      if (isArray(newChild) || getIteratorFn(newChild)) {\n\t        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n\t        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n\t      }\n\n\t      throwOnInvalidObjectType(returnFiber, newChild);\n\t    }\n\n\t    {\n\t      if (typeof newChild === 'function') {\n\t        warnOnFunctionType(returnFiber);\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\t  /**\n\t   * Warns if there is a duplicate or missing key\n\t   */\n\n\n\t  function warnOnInvalidKey(child, knownKeys, returnFiber) {\n\t    {\n\t      if (typeof child !== 'object' || child === null) {\n\t        return knownKeys;\n\t      }\n\n\t      switch (child.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t        case REACT_PORTAL_TYPE:\n\t          warnForMissingKey(child, returnFiber);\n\t          var key = child.key;\n\n\t          if (typeof key !== 'string') {\n\t            break;\n\t          }\n\n\t          if (knownKeys === null) {\n\t            knownKeys = new Set();\n\t            knownKeys.add(key);\n\t            break;\n\t          }\n\n\t          if (!knownKeys.has(key)) {\n\t            knownKeys.add(key);\n\t            break;\n\t          }\n\n\t          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n\n\t          break;\n\n\t        case REACT_LAZY_TYPE:\n\t          var payload = child._payload;\n\t          var init = child._init;\n\t          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n\t          break;\n\t      }\n\t    }\n\n\t    return knownKeys;\n\t  }\n\n\t  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n\t    // This algorithm can't optimize by searching from both ends since we\n\t    // don't have backpointers on fibers. I'm trying to see how far we can get\n\t    // with that model. If it ends up not being worth the tradeoffs, we can\n\t    // add it later.\n\t    // Even with a two ended optimization, we'd want to optimize for the case\n\t    // where there are few changes and brute force the comparison instead of\n\t    // going for the Map. It'd like to explore hitting that path first in\n\t    // forward-only mode and only go for the Map once we notice that we need\n\t    // lots of look ahead. This doesn't handle reversal as well as two ended\n\t    // search but that's unusual. Besides, for the two ended optimization to\n\t    // work on Iterables, we'd need to copy the whole set.\n\t    // In this first iteration, we'll just live with hitting the bad case\n\t    // (adding everything to a Map) in for every insert/move.\n\t    // If you change this code, also update reconcileChildrenIterator() which\n\t    // uses the same algorithm.\n\t    {\n\t      // First, validate keys.\n\t      var knownKeys = null;\n\n\t      for (var i = 0; i < newChildren.length; i++) {\n\t        var child = newChildren[i];\n\t        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n\t      }\n\t    }\n\n\t    var resultingFirstChild = null;\n\t    var previousNewFiber = null;\n\t    var oldFiber = currentFirstChild;\n\t    var lastPlacedIndex = 0;\n\t    var newIdx = 0;\n\t    var nextOldFiber = null;\n\n\t    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n\t      if (oldFiber.index > newIdx) {\n\t        nextOldFiber = oldFiber;\n\t        oldFiber = null;\n\t      } else {\n\t        nextOldFiber = oldFiber.sibling;\n\t      }\n\n\t      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n\t      if (newFiber === null) {\n\t        // TODO: This breaks on empty slots like null children. That's\n\t        // unfortunate because it triggers the slow path all the time. We need\n\t        // a better way to communicate whether this was a miss or null,\n\t        // boolean, undefined, etc.\n\t        if (oldFiber === null) {\n\t          oldFiber = nextOldFiber;\n\t        }\n\n\t        break;\n\t      }\n\n\t      if (shouldTrackSideEffects) {\n\t        if (oldFiber && newFiber.alternate === null) {\n\t          // We matched the slot, but we didn't reuse the existing fiber, so we\n\t          // need to delete the existing child.\n\t          deleteChild(returnFiber, oldFiber);\n\t        }\n\t      }\n\n\t      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n\t      if (previousNewFiber === null) {\n\t        // TODO: Move out of the loop. This only happens for the first run.\n\t        resultingFirstChild = newFiber;\n\t      } else {\n\t        // TODO: Defer siblings if we're not at the right index for this slot.\n\t        // I.e. if we had null values before, then we want to defer this\n\t        // for each null value. However, we also don't want to call updateSlot\n\t        // with the previous one.\n\t        previousNewFiber.sibling = newFiber;\n\t      }\n\n\t      previousNewFiber = newFiber;\n\t      oldFiber = nextOldFiber;\n\t    }\n\n\t    if (newIdx === newChildren.length) {\n\t      // We've reached the end of the new children. We can delete the rest.\n\t      deleteRemainingChildren(returnFiber, oldFiber);\n\n\t      if (getIsHydrating()) {\n\t        var numberOfForks = newIdx;\n\t        pushTreeFork(returnFiber, numberOfForks);\n\t      }\n\n\t      return resultingFirstChild;\n\t    }\n\n\t    if (oldFiber === null) {\n\t      // If we don't have any more existing children we can choose a fast path\n\t      // since the rest will all be insertions.\n\t      for (; newIdx < newChildren.length; newIdx++) {\n\t        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n\t        if (_newFiber === null) {\n\t          continue;\n\t        }\n\n\t        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n\t        if (previousNewFiber === null) {\n\t          // TODO: Move out of the loop. This only happens for the first run.\n\t          resultingFirstChild = _newFiber;\n\t        } else {\n\t          previousNewFiber.sibling = _newFiber;\n\t        }\n\n\t        previousNewFiber = _newFiber;\n\t      }\n\n\t      if (getIsHydrating()) {\n\t        var _numberOfForks = newIdx;\n\t        pushTreeFork(returnFiber, _numberOfForks);\n\t      }\n\n\t      return resultingFirstChild;\n\t    } // Add all children to a key map for quick lookups.\n\n\n\t    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n\t    for (; newIdx < newChildren.length; newIdx++) {\n\t      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n\t      if (_newFiber2 !== null) {\n\t        if (shouldTrackSideEffects) {\n\t          if (_newFiber2.alternate !== null) {\n\t            // The new fiber is a work in progress, but if there exists a\n\t            // current, that means that we reused the fiber. We need to delete\n\t            // it from the child list so that we don't add it to the deletion\n\t            // list.\n\t            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n\t          }\n\t        }\n\n\t        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n\t        if (previousNewFiber === null) {\n\t          resultingFirstChild = _newFiber2;\n\t        } else {\n\t          previousNewFiber.sibling = _newFiber2;\n\t        }\n\n\t        previousNewFiber = _newFiber2;\n\t      }\n\t    }\n\n\t    if (shouldTrackSideEffects) {\n\t      // Any existing children that weren't consumed above were deleted. We need\n\t      // to add them to the deletion list.\n\t      existingChildren.forEach(function (child) {\n\t        return deleteChild(returnFiber, child);\n\t      });\n\t    }\n\n\t    if (getIsHydrating()) {\n\t      var _numberOfForks2 = newIdx;\n\t      pushTreeFork(returnFiber, _numberOfForks2);\n\t    }\n\n\t    return resultingFirstChild;\n\t  }\n\n\t  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n\t    // This is the same implementation as reconcileChildrenArray(),\n\t    // but using the iterator instead.\n\t    var iteratorFn = getIteratorFn(newChildrenIterable);\n\n\t    if (typeof iteratorFn !== 'function') {\n\t      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n\t    }\n\n\t    {\n\t      // We don't support rendering Generators because it's a mutation.\n\t      // See https://github.com/facebook/react/issues/12995\n\t      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n\t      newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n\t        if (!didWarnAboutGenerators) {\n\t          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n\t        }\n\n\t        didWarnAboutGenerators = true;\n\t      } // Warn about using Maps as children\n\n\n\t      if (newChildrenIterable.entries === iteratorFn) {\n\t        if (!didWarnAboutMaps) {\n\t          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n\t        }\n\n\t        didWarnAboutMaps = true;\n\t      } // First, validate keys.\n\t      // We'll get a different iterator later for the main pass.\n\n\n\t      var _newChildren = iteratorFn.call(newChildrenIterable);\n\n\t      if (_newChildren) {\n\t        var knownKeys = null;\n\n\t        var _step = _newChildren.next();\n\n\t        for (; !_step.done; _step = _newChildren.next()) {\n\t          var child = _step.value;\n\t          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n\t        }\n\t      }\n\t    }\n\n\t    var newChildren = iteratorFn.call(newChildrenIterable);\n\n\t    if (newChildren == null) {\n\t      throw new Error('An iterable object provided no iterator.');\n\t    }\n\n\t    var resultingFirstChild = null;\n\t    var previousNewFiber = null;\n\t    var oldFiber = currentFirstChild;\n\t    var lastPlacedIndex = 0;\n\t    var newIdx = 0;\n\t    var nextOldFiber = null;\n\t    var step = newChildren.next();\n\n\t    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n\t      if (oldFiber.index > newIdx) {\n\t        nextOldFiber = oldFiber;\n\t        oldFiber = null;\n\t      } else {\n\t        nextOldFiber = oldFiber.sibling;\n\t      }\n\n\t      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n\t      if (newFiber === null) {\n\t        // TODO: This breaks on empty slots like null children. That's\n\t        // unfortunate because it triggers the slow path all the time. We need\n\t        // a better way to communicate whether this was a miss or null,\n\t        // boolean, undefined, etc.\n\t        if (oldFiber === null) {\n\t          oldFiber = nextOldFiber;\n\t        }\n\n\t        break;\n\t      }\n\n\t      if (shouldTrackSideEffects) {\n\t        if (oldFiber && newFiber.alternate === null) {\n\t          // We matched the slot, but we didn't reuse the existing fiber, so we\n\t          // need to delete the existing child.\n\t          deleteChild(returnFiber, oldFiber);\n\t        }\n\t      }\n\n\t      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n\t      if (previousNewFiber === null) {\n\t        // TODO: Move out of the loop. This only happens for the first run.\n\t        resultingFirstChild = newFiber;\n\t      } else {\n\t        // TODO: Defer siblings if we're not at the right index for this slot.\n\t        // I.e. if we had null values before, then we want to defer this\n\t        // for each null value. However, we also don't want to call updateSlot\n\t        // with the previous one.\n\t        previousNewFiber.sibling = newFiber;\n\t      }\n\n\t      previousNewFiber = newFiber;\n\t      oldFiber = nextOldFiber;\n\t    }\n\n\t    if (step.done) {\n\t      // We've reached the end of the new children. We can delete the rest.\n\t      deleteRemainingChildren(returnFiber, oldFiber);\n\n\t      if (getIsHydrating()) {\n\t        var numberOfForks = newIdx;\n\t        pushTreeFork(returnFiber, numberOfForks);\n\t      }\n\n\t      return resultingFirstChild;\n\t    }\n\n\t    if (oldFiber === null) {\n\t      // If we don't have any more existing children we can choose a fast path\n\t      // since the rest will all be insertions.\n\t      for (; !step.done; newIdx++, step = newChildren.next()) {\n\t        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n\t        if (_newFiber3 === null) {\n\t          continue;\n\t        }\n\n\t        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n\t        if (previousNewFiber === null) {\n\t          // TODO: Move out of the loop. This only happens for the first run.\n\t          resultingFirstChild = _newFiber3;\n\t        } else {\n\t          previousNewFiber.sibling = _newFiber3;\n\t        }\n\n\t        previousNewFiber = _newFiber3;\n\t      }\n\n\t      if (getIsHydrating()) {\n\t        var _numberOfForks3 = newIdx;\n\t        pushTreeFork(returnFiber, _numberOfForks3);\n\t      }\n\n\t      return resultingFirstChild;\n\t    } // Add all children to a key map for quick lookups.\n\n\n\t    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n\t    for (; !step.done; newIdx++, step = newChildren.next()) {\n\t      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n\t      if (_newFiber4 !== null) {\n\t        if (shouldTrackSideEffects) {\n\t          if (_newFiber4.alternate !== null) {\n\t            // The new fiber is a work in progress, but if there exists a\n\t            // current, that means that we reused the fiber. We need to delete\n\t            // it from the child list so that we don't add it to the deletion\n\t            // list.\n\t            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n\t          }\n\t        }\n\n\t        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n\t        if (previousNewFiber === null) {\n\t          resultingFirstChild = _newFiber4;\n\t        } else {\n\t          previousNewFiber.sibling = _newFiber4;\n\t        }\n\n\t        previousNewFiber = _newFiber4;\n\t      }\n\t    }\n\n\t    if (shouldTrackSideEffects) {\n\t      // Any existing children that weren't consumed above were deleted. We need\n\t      // to add them to the deletion list.\n\t      existingChildren.forEach(function (child) {\n\t        return deleteChild(returnFiber, child);\n\t      });\n\t    }\n\n\t    if (getIsHydrating()) {\n\t      var _numberOfForks4 = newIdx;\n\t      pushTreeFork(returnFiber, _numberOfForks4);\n\t    }\n\n\t    return resultingFirstChild;\n\t  }\n\n\t  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n\t    // There's no need to check for keys on text nodes since we don't have a\n\t    // way to define them.\n\t    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n\t      // We already have an existing node so let's just update it and delete\n\t      // the rest.\n\t      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n\t      var existing = useFiber(currentFirstChild, textContent);\n\t      existing.return = returnFiber;\n\t      return existing;\n\t    } // The existing first child is not a text node so we need to create one\n\t    // and delete the existing ones.\n\n\n\t    deleteRemainingChildren(returnFiber, currentFirstChild);\n\t    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n\t    created.return = returnFiber;\n\t    return created;\n\t  }\n\n\t  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n\t    var key = element.key;\n\t    var child = currentFirstChild;\n\n\t    while (child !== null) {\n\t      // TODO: If key === null and child.key === null, then this only applies to\n\t      // the first item in the list.\n\t      if (child.key === key) {\n\t        var elementType = element.type;\n\n\t        if (elementType === REACT_FRAGMENT_TYPE) {\n\t          if (child.tag === Fragment) {\n\t            deleteRemainingChildren(returnFiber, child.sibling);\n\t            var existing = useFiber(child, element.props.children);\n\t            existing.return = returnFiber;\n\n\t            {\n\t              existing._debugSource = element._source;\n\t              existing._debugOwner = element._owner;\n\t            }\n\n\t            return existing;\n\t          }\n\t        } else {\n\t          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n\t           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.\n\t          // We need to do this after the Hot Reloading check above,\n\t          // because hot reloading has different semantics than prod because\n\t          // it doesn't resuspend. So we can't let the call below suspend.\n\t          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n\t            deleteRemainingChildren(returnFiber, child.sibling);\n\n\t            var _existing = useFiber(child, element.props);\n\n\t            _existing.ref = coerceRef(returnFiber, child, element);\n\t            _existing.return = returnFiber;\n\n\t            {\n\t              _existing._debugSource = element._source;\n\t              _existing._debugOwner = element._owner;\n\t            }\n\n\t            return _existing;\n\t          }\n\t        } // Didn't match.\n\n\n\t        deleteRemainingChildren(returnFiber, child);\n\t        break;\n\t      } else {\n\t        deleteChild(returnFiber, child);\n\t      }\n\n\t      child = child.sibling;\n\t    }\n\n\t    if (element.type === REACT_FRAGMENT_TYPE) {\n\t      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n\t      created.return = returnFiber;\n\t      return created;\n\t    } else {\n\t      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n\t      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n\t      _created4.return = returnFiber;\n\t      return _created4;\n\t    }\n\t  }\n\n\t  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n\t    var key = portal.key;\n\t    var child = currentFirstChild;\n\n\t    while (child !== null) {\n\t      // TODO: If key === null and child.key === null, then this only applies to\n\t      // the first item in the list.\n\t      if (child.key === key) {\n\t        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n\t          deleteRemainingChildren(returnFiber, child.sibling);\n\t          var existing = useFiber(child, portal.children || []);\n\t          existing.return = returnFiber;\n\t          return existing;\n\t        } else {\n\t          deleteRemainingChildren(returnFiber, child);\n\t          break;\n\t        }\n\t      } else {\n\t        deleteChild(returnFiber, child);\n\t      }\n\n\t      child = child.sibling;\n\t    }\n\n\t    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n\t    created.return = returnFiber;\n\t    return created;\n\t  } // This API will tag the children with the side-effect of the reconciliation\n\t  // itself. They will be added to the side-effect list as we pass through the\n\t  // children and the parent.\n\n\n\t  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n\t    // This function is not recursive.\n\t    // If the top level item is an array, we treat it as a set of children,\n\t    // not as a fragment. Nested arrays on the other hand will be treated as\n\t    // fragment nodes. Recursion happens at the normal flow.\n\t    // Handle top level unkeyed fragments as if they were arrays.\n\t    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n\t    // We treat the ambiguous cases above the same.\n\t    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n\t    if (isUnkeyedTopLevelFragment) {\n\t      newChild = newChild.props.children;\n\t    } // Handle object types\n\n\n\t    if (typeof newChild === 'object' && newChild !== null) {\n\t      switch (newChild.$$typeof) {\n\t        case REACT_ELEMENT_TYPE:\n\t          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n\t        case REACT_PORTAL_TYPE:\n\t          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n\t        case REACT_LAZY_TYPE:\n\t          var payload = newChild._payload;\n\t          var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n\t          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n\t      }\n\n\t      if (isArray(newChild)) {\n\t        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n\t      }\n\n\t      if (getIteratorFn(newChild)) {\n\t        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n\t      }\n\n\t      throwOnInvalidObjectType(returnFiber, newChild);\n\t    }\n\n\t    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n\t      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n\t    }\n\n\t    {\n\t      if (typeof newChild === 'function') {\n\t        warnOnFunctionType(returnFiber);\n\t      }\n\t    } // Remaining cases are all treated as empty.\n\n\n\t    return deleteRemainingChildren(returnFiber, currentFirstChild);\n\t  }\n\n\t  return reconcileChildFibers;\n\t}\n\n\tvar reconcileChildFibers = ChildReconciler(true);\n\tvar mountChildFibers = ChildReconciler(false);\n\tfunction cloneChildFibers(current, workInProgress) {\n\t  if (current !== null && workInProgress.child !== current.child) {\n\t    throw new Error('Resuming work not yet implemented.');\n\t  }\n\n\t  if (workInProgress.child === null) {\n\t    return;\n\t  }\n\n\t  var currentChild = workInProgress.child;\n\t  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n\t  workInProgress.child = newChild;\n\t  newChild.return = workInProgress;\n\n\t  while (currentChild.sibling !== null) {\n\t    currentChild = currentChild.sibling;\n\t    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n\t    newChild.return = workInProgress;\n\t  }\n\n\t  newChild.sibling = null;\n\t} // Reset a workInProgress child set to prepare it for a second pass.\n\n\tfunction resetChildFibers(workInProgress, lanes) {\n\t  var child = workInProgress.child;\n\n\t  while (child !== null) {\n\t    resetWorkInProgress(child, lanes);\n\t    child = child.sibling;\n\t  }\n\t}\n\n\tvar NO_CONTEXT = {};\n\tvar contextStackCursor$1 = createCursor(NO_CONTEXT);\n\tvar contextFiberStackCursor = createCursor(NO_CONTEXT);\n\tvar rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\n\tfunction requiredContext(c) {\n\t  if (c === NO_CONTEXT) {\n\t    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n\t  }\n\n\t  return c;\n\t}\n\n\tfunction getRootHostContainer() {\n\t  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n\t  return rootInstance;\n\t}\n\n\tfunction pushHostContainer(fiber, nextRootInstance) {\n\t  // Push current root instance onto the stack;\n\t  // This allows us to reset root when portals are popped.\n\t  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n\t  // This enables us to pop only Fibers that provide unique contexts.\n\n\t  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n\t  // However, we can't just call getRootHostContext() and push it because\n\t  // we'd have a different number of entries on the stack depending on\n\t  // whether getRootHostContext() throws somewhere in renderer code or not.\n\t  // So we push an empty value first. This lets us safely unwind on errors.\n\n\t  push(contextStackCursor$1, NO_CONTEXT, fiber);\n\t  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n\t  pop(contextStackCursor$1, fiber);\n\t  push(contextStackCursor$1, nextRootContext, fiber);\n\t}\n\n\tfunction popHostContainer(fiber) {\n\t  pop(contextStackCursor$1, fiber);\n\t  pop(contextFiberStackCursor, fiber);\n\t  pop(rootInstanceStackCursor, fiber);\n\t}\n\n\tfunction getHostContext() {\n\t  var context = requiredContext(contextStackCursor$1.current);\n\t  return context;\n\t}\n\n\tfunction pushHostContext(fiber) {\n\t  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n\t  var context = requiredContext(contextStackCursor$1.current);\n\t  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n\t  if (context === nextContext) {\n\t    return;\n\t  } // Track the context and the Fiber that provided it.\n\t  // This enables us to pop only Fibers that provide unique contexts.\n\n\n\t  push(contextFiberStackCursor, fiber, fiber);\n\t  push(contextStackCursor$1, nextContext, fiber);\n\t}\n\n\tfunction popHostContext(fiber) {\n\t  // Do not pop unless this Fiber provided the current context.\n\t  // pushHostContext() only pushes Fibers that provide unique contexts.\n\t  if (contextFiberStackCursor.current !== fiber) {\n\t    return;\n\t  }\n\n\t  pop(contextStackCursor$1, fiber);\n\t  pop(contextFiberStackCursor, fiber);\n\t}\n\n\tvar DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n\t// inherited deeply down the subtree. The upper bits only affect\n\t// this immediate suspense boundary and gets reset each new\n\t// boundary or suspense list.\n\n\tvar SubtreeSuspenseContextMask = 1; // Subtree Flags:\n\t// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n\t// boundaries is not currently showing visible main content.\n\t// Either because it is already showing a fallback or is not mounted at all.\n\t// We can use this to determine if it is desirable to trigger a fallback at\n\t// the parent. If not, then we might need to trigger undesirable boundaries\n\t// and/or suspend the commit to avoid hiding the parent content.\n\n\tvar InvisibleParentSuspenseContext = 1; // Shallow Flags:\n\t// ForceSuspenseFallback can be used by SuspenseList to force newly added\n\t// items into their fallback state during one of the render passes.\n\n\tvar ForceSuspenseFallback = 2;\n\tvar suspenseStackCursor = createCursor(DefaultSuspenseContext);\n\tfunction hasSuspenseContext(parentContext, flag) {\n\t  return (parentContext & flag) !== 0;\n\t}\n\tfunction setDefaultShallowSuspenseContext(parentContext) {\n\t  return parentContext & SubtreeSuspenseContextMask;\n\t}\n\tfunction setShallowSuspenseContext(parentContext, shallowContext) {\n\t  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n\t}\n\tfunction addSubtreeSuspenseContext(parentContext, subtreeContext) {\n\t  return parentContext | subtreeContext;\n\t}\n\tfunction pushSuspenseContext(fiber, newContext) {\n\t  push(suspenseStackCursor, newContext, fiber);\n\t}\n\tfunction popSuspenseContext(fiber) {\n\t  pop(suspenseStackCursor, fiber);\n\t}\n\n\tfunction shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n\t  // If it was the primary children that just suspended, capture and render the\n\t  // fallback. Otherwise, don't capture and bubble to the next boundary.\n\t  var nextState = workInProgress.memoizedState;\n\n\t  if (nextState !== null) {\n\t    if (nextState.dehydrated !== null) {\n\t      // A dehydrated boundary always captures.\n\t      return true;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  workInProgress.memoizedProps; // Regular boundaries always capture.\n\n\t  {\n\t    return true;\n\t  } // If it's a boundary we should avoid, then we prefer to bubble up to the\n\t}\n\tfunction findFirstSuspended(row) {\n\t  var node = row;\n\n\t  while (node !== null) {\n\t    if (node.tag === SuspenseComponent) {\n\t      var state = node.memoizedState;\n\n\t      if (state !== null) {\n\t        var dehydrated = state.dehydrated;\n\n\t        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n\t          return node;\n\t        }\n\t      }\n\t    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n\t    // keep track of whether it suspended or not.\n\t    node.memoizedProps.revealOrder !== undefined) {\n\t      var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n\t      if (didSuspend) {\n\t        return node;\n\t      }\n\t    } else if (node.child !== null) {\n\t      node.child.return = node;\n\t      node = node.child;\n\t      continue;\n\t    }\n\n\t    if (node === row) {\n\t      return null;\n\t    }\n\n\t    while (node.sibling === null) {\n\t      if (node.return === null || node.return === row) {\n\t        return null;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    node.sibling.return = node.return;\n\t    node = node.sibling;\n\t  }\n\n\t  return null;\n\t}\n\n\tvar NoFlags$1 =\n\t/*   */\n\t0; // Represents whether effect should fire.\n\n\tvar HasEffect =\n\t/* */\n\t1; // Represents the phase in which the effect (not the clean-up) fires.\n\n\tvar Insertion =\n\t/*  */\n\t2;\n\tvar Layout =\n\t/*    */\n\t4;\n\tvar Passive$1 =\n\t/*   */\n\t8;\n\n\t// and should be reset before starting a new render.\n\t// This tracks which mutable sources need to be reset after a render.\n\n\tvar workInProgressSources = [];\n\tfunction resetWorkInProgressVersions() {\n\t  for (var i = 0; i < workInProgressSources.length; i++) {\n\t    var mutableSource = workInProgressSources[i];\n\n\t    if (isPrimaryRenderer) {\n\t      mutableSource._workInProgressVersionPrimary = null;\n\t    } else {\n\t      mutableSource._workInProgressVersionSecondary = null;\n\t    }\n\t  }\n\n\t  workInProgressSources.length = 0;\n\t}\n\t// This ensures that the version used for server rendering matches the one\n\t// that is eventually read during hydration.\n\t// If they don't match there's a potential tear and a full deopt render is required.\n\n\tfunction registerMutableSourceForHydration(root, mutableSource) {\n\t  var getVersion = mutableSource._getVersion;\n\t  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n\t  // Retaining it forever may interfere with GC.\n\n\t  if (root.mutableSourceEagerHydrationData == null) {\n\t    root.mutableSourceEagerHydrationData = [mutableSource, version];\n\t  } else {\n\t    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n\t  }\n\t}\n\n\tvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n\t    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n\tvar didWarnAboutMismatchedHooksForComponent;\n\tvar didWarnUncachedGetSnapshot;\n\n\t{\n\t  didWarnAboutMismatchedHooksForComponent = new Set();\n\t}\n\n\t// These are set right before calling the component.\n\tvar renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n\t// the work-in-progress hook.\n\n\tvar currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n\t// current hook list is the list that belongs to the current fiber. The\n\t// work-in-progress hook list is a new list that will be added to the\n\t// work-in-progress fiber.\n\n\tvar currentHook = null;\n\tvar workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n\t// does not get reset if we do another render pass; only when we're completely\n\t// finished evaluating this component. This is an optimization so we know\n\t// whether we need to clear render phase updates after a throw.\n\n\tvar didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n\t// gets reset after each attempt.\n\t// TODO: Maybe there's some way to consolidate this with\n\t// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\n\tvar didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\n\tvar localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n\t// hydration). This counter is global, so client ids are not stable across\n\t// render attempts.\n\n\tvar globalClientIdCounter = 0;\n\tvar RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\n\tvar currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n\t// The list stores the order of hooks used during the initial render (mount).\n\t// Subsequent renders (updates) reference this list.\n\n\tvar hookTypesDev = null;\n\tvar hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n\t// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n\t// When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\n\tvar ignorePreviousDependencies = false;\n\n\tfunction mountHookTypesDev() {\n\t  {\n\t    var hookName = currentHookNameInDev;\n\n\t    if (hookTypesDev === null) {\n\t      hookTypesDev = [hookName];\n\t    } else {\n\t      hookTypesDev.push(hookName);\n\t    }\n\t  }\n\t}\n\n\tfunction updateHookTypesDev() {\n\t  {\n\t    var hookName = currentHookNameInDev;\n\n\t    if (hookTypesDev !== null) {\n\t      hookTypesUpdateIndexDev++;\n\n\t      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n\t        warnOnHookMismatchInDev(hookName);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction checkDepsAreArrayDev(deps) {\n\t  {\n\t    if (deps !== undefined && deps !== null && !isArray(deps)) {\n\t      // Verify deps, but only on mount to avoid extra checks.\n\t      // It's unlikely their type would change as usually you define them inline.\n\t      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n\t    }\n\t  }\n\t}\n\n\tfunction warnOnHookMismatchInDev(currentHookName) {\n\t  {\n\t    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n\t    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n\t      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n\t      if (hookTypesDev !== null) {\n\t        var table = '';\n\t        var secondColumnStart = 30;\n\n\t        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n\t          var oldHookName = hookTypesDev[i];\n\t          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n\t          var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n\t          // lol @ IE not supporting String#repeat\n\n\t          while (row.length < secondColumnStart) {\n\t            row += ' ';\n\t          }\n\n\t          row += newHookName + '\\n';\n\t          table += row;\n\t        }\n\n\t        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction throwInvalidHookError() {\n\t  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n\t}\n\n\tfunction areHookInputsEqual(nextDeps, prevDeps) {\n\t  {\n\t    if (ignorePreviousDependencies) {\n\t      // Only true when this component is being hot reloaded.\n\t      return false;\n\t    }\n\t  }\n\n\t  if (prevDeps === null) {\n\t    {\n\t      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n\t    }\n\n\t    return false;\n\t  }\n\n\t  {\n\t    // Don't bother comparing lengths in prod because these arrays should be\n\t    // passed inline.\n\t    if (nextDeps.length !== prevDeps.length) {\n\t      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n\t    }\n\t  }\n\n\t  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n\t    if (objectIs(nextDeps[i], prevDeps[i])) {\n\t      continue;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n\t  renderLanes = nextRenderLanes;\n\t  currentlyRenderingFiber$1 = workInProgress;\n\n\t  {\n\t    hookTypesDev = current !== null ? current._debugHookTypes : null;\n\t    hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n\t    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n\t  }\n\n\t  workInProgress.memoizedState = null;\n\t  workInProgress.updateQueue = null;\n\t  workInProgress.lanes = NoLanes; // The following should have already been reset\n\t  // currentHook = null;\n\t  // workInProgressHook = null;\n\t  // didScheduleRenderPhaseUpdate = false;\n\t  // localIdCounter = 0;\n\t  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n\t  // Currently we will identify the update render as a mount because memoizedState === null.\n\t  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\t  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n\t  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n\t  // so memoizedState would be null during updates and mounts.\n\n\t  {\n\t    if (current !== null && current.memoizedState !== null) {\n\t      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n\t    } else if (hookTypesDev !== null) {\n\t      // This dispatcher handles an edge case where a component is updating,\n\t      // but no stateful hooks have been used.\n\t      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n\t      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n\t      // This dispatcher does that.\n\t      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n\t    } else {\n\t      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n\t    }\n\t  }\n\n\t  var children = Component(props, secondArg); // Check if there was a render phase update\n\n\t  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n\t    // Keep rendering in a loop for as long as render phase updates continue to\n\t    // be scheduled. Use a counter to prevent infinite loops.\n\t    var numberOfReRenders = 0;\n\n\t    do {\n\t      didScheduleRenderPhaseUpdateDuringThisPass = false;\n\t      localIdCounter = 0;\n\n\t      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n\t        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n\t      }\n\n\t      numberOfReRenders += 1;\n\n\t      {\n\t        // Even when hot reloading, allow dependencies to stabilize\n\t        // after first render to prevent infinite render phase updates.\n\t        ignorePreviousDependencies = false;\n\t      } // Start over from the beginning of the list\n\n\n\t      currentHook = null;\n\t      workInProgressHook = null;\n\t      workInProgress.updateQueue = null;\n\n\t      {\n\t        // Also validate hook order for cascading updates.\n\t        hookTypesUpdateIndexDev = -1;\n\t      }\n\n\t      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\n\t      children = Component(props, secondArg);\n\t    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n\t  } // We can assume the previous dispatcher is always this one, since we set it\n\t  // at the beginning of the render phase and there's no re-entrance.\n\n\n\t  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n\t  {\n\t    workInProgress._debugHookTypes = hookTypesDev;\n\t  } // This check uses currentHook so that it works the same in DEV and prod bundles.\n\t  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n\n\t  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n\t  renderLanes = NoLanes;\n\t  currentlyRenderingFiber$1 = null;\n\t  currentHook = null;\n\t  workInProgressHook = null;\n\n\t  {\n\t    currentHookNameInDev = null;\n\t    hookTypesDev = null;\n\t    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n\t    // render. If this fires, it suggests that we incorrectly reset the static\n\t    // flags in some other part of the codebase. This has happened before, for\n\t    // example, in the SuspenseList implementation.\n\n\t    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n\t    // and creates false positives. To make this work in legacy mode, we'd\n\t    // need to mark fibers that commit in an incomplete state, somehow. For\n\t    // now I'll disable the warning that most of the bugs that would trigger\n\t    // it are either exclusive to concurrent mode or exist in both.\n\t    (current.mode & ConcurrentMode) !== NoMode) {\n\t      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n\t    }\n\t  }\n\n\t  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n\t  // localIdCounter = 0;\n\n\t  if (didRenderTooFewHooks) {\n\t    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n\t  }\n\n\t  return children;\n\t}\n\tfunction checkDidRenderIdHook() {\n\t  // This should be called immediately after every renderWithHooks call.\n\t  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n\t  // separate function to avoid using an array tuple.\n\t  var didRenderIdHook = localIdCounter !== 0;\n\t  localIdCounter = 0;\n\t  return didRenderIdHook;\n\t}\n\tfunction bailoutHooks(current, workInProgress, lanes) {\n\t  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n\t  // complete phase (bubbleProperties).\n\n\t  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n\t    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n\t  } else {\n\t    workInProgress.flags &= ~(Passive | Update);\n\t  }\n\n\t  current.lanes = removeLanes(current.lanes, lanes);\n\t}\n\tfunction resetHooksAfterThrow() {\n\t  // We can assume the previous dispatcher is always this one, since we set it\n\t  // at the beginning of the render phase and there's no re-entrance.\n\t  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n\t  if (didScheduleRenderPhaseUpdate) {\n\t    // There were render phase updates. These are only valid for this render\n\t    // phase, which we are now aborting. Remove the updates from the queues so\n\t    // they do not persist to the next render. Do not remove updates from hooks\n\t    // that weren't processed.\n\t    //\n\t    // Only reset the updates from the queue if it has a clone. If it does\n\t    // not have a clone, that means it wasn't processed, and the updates were\n\t    // scheduled before we entered the render phase.\n\t    var hook = currentlyRenderingFiber$1.memoizedState;\n\n\t    while (hook !== null) {\n\t      var queue = hook.queue;\n\n\t      if (queue !== null) {\n\t        queue.pending = null;\n\t      }\n\n\t      hook = hook.next;\n\t    }\n\n\t    didScheduleRenderPhaseUpdate = false;\n\t  }\n\n\t  renderLanes = NoLanes;\n\t  currentlyRenderingFiber$1 = null;\n\t  currentHook = null;\n\t  workInProgressHook = null;\n\n\t  {\n\t    hookTypesDev = null;\n\t    hookTypesUpdateIndexDev = -1;\n\t    currentHookNameInDev = null;\n\t    isUpdatingOpaqueValueInRenderPhase = false;\n\t  }\n\n\t  didScheduleRenderPhaseUpdateDuringThisPass = false;\n\t  localIdCounter = 0;\n\t}\n\n\tfunction mountWorkInProgressHook() {\n\t  var hook = {\n\t    memoizedState: null,\n\t    baseState: null,\n\t    baseQueue: null,\n\t    queue: null,\n\t    next: null\n\t  };\n\n\t  if (workInProgressHook === null) {\n\t    // This is the first hook in the list\n\t    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n\t  } else {\n\t    // Append to the end of the list\n\t    workInProgressHook = workInProgressHook.next = hook;\n\t  }\n\n\t  return workInProgressHook;\n\t}\n\n\tfunction updateWorkInProgressHook() {\n\t  // This function is used both for updates and for re-renders triggered by a\n\t  // render phase update. It assumes there is either a current hook we can\n\t  // clone, or a work-in-progress hook from a previous render pass that we can\n\t  // use as a base. When we reach the end of the base list, we must switch to\n\t  // the dispatcher used for mounts.\n\t  var nextCurrentHook;\n\n\t  if (currentHook === null) {\n\t    var current = currentlyRenderingFiber$1.alternate;\n\n\t    if (current !== null) {\n\t      nextCurrentHook = current.memoizedState;\n\t    } else {\n\t      nextCurrentHook = null;\n\t    }\n\t  } else {\n\t    nextCurrentHook = currentHook.next;\n\t  }\n\n\t  var nextWorkInProgressHook;\n\n\t  if (workInProgressHook === null) {\n\t    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n\t  } else {\n\t    nextWorkInProgressHook = workInProgressHook.next;\n\t  }\n\n\t  if (nextWorkInProgressHook !== null) {\n\t    // There's already a work-in-progress. Reuse it.\n\t    workInProgressHook = nextWorkInProgressHook;\n\t    nextWorkInProgressHook = workInProgressHook.next;\n\t    currentHook = nextCurrentHook;\n\t  } else {\n\t    // Clone from the current hook.\n\t    if (nextCurrentHook === null) {\n\t      throw new Error('Rendered more hooks than during the previous render.');\n\t    }\n\n\t    currentHook = nextCurrentHook;\n\t    var newHook = {\n\t      memoizedState: currentHook.memoizedState,\n\t      baseState: currentHook.baseState,\n\t      baseQueue: currentHook.baseQueue,\n\t      queue: currentHook.queue,\n\t      next: null\n\t    };\n\n\t    if (workInProgressHook === null) {\n\t      // This is the first hook in the list.\n\t      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n\t    } else {\n\t      // Append to the end of the list.\n\t      workInProgressHook = workInProgressHook.next = newHook;\n\t    }\n\t  }\n\n\t  return workInProgressHook;\n\t}\n\n\tfunction createFunctionComponentUpdateQueue() {\n\t  return {\n\t    lastEffect: null,\n\t    stores: null\n\t  };\n\t}\n\n\tfunction basicStateReducer(state, action) {\n\t  // $FlowFixMe: Flow doesn't like mixed types\n\t  return typeof action === 'function' ? action(state) : action;\n\t}\n\n\tfunction mountReducer(reducer, initialArg, init) {\n\t  var hook = mountWorkInProgressHook();\n\t  var initialState;\n\n\t  if (init !== undefined) {\n\t    initialState = init(initialArg);\n\t  } else {\n\t    initialState = initialArg;\n\t  }\n\n\t  hook.memoizedState = hook.baseState = initialState;\n\t  var queue = {\n\t    pending: null,\n\t    interleaved: null,\n\t    lanes: NoLanes,\n\t    dispatch: null,\n\t    lastRenderedReducer: reducer,\n\t    lastRenderedState: initialState\n\t  };\n\t  hook.queue = queue;\n\t  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n\t  return [hook.memoizedState, dispatch];\n\t}\n\n\tfunction updateReducer(reducer, initialArg, init) {\n\t  var hook = updateWorkInProgressHook();\n\t  var queue = hook.queue;\n\n\t  if (queue === null) {\n\t    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n\t  }\n\n\t  queue.lastRenderedReducer = reducer;\n\t  var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n\t  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n\t  var pendingQueue = queue.pending;\n\n\t  if (pendingQueue !== null) {\n\t    // We have new updates that haven't been processed yet.\n\t    // We'll add them to the base queue.\n\t    if (baseQueue !== null) {\n\t      // Merge the pending queue and the base queue.\n\t      var baseFirst = baseQueue.next;\n\t      var pendingFirst = pendingQueue.next;\n\t      baseQueue.next = pendingFirst;\n\t      pendingQueue.next = baseFirst;\n\t    }\n\n\t    {\n\t      if (current.baseQueue !== baseQueue) {\n\t        // Internal invariant that should never happen, but feasibly could in\n\t        // the future if we implement resuming, or some form of that.\n\t        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n\t      }\n\t    }\n\n\t    current.baseQueue = baseQueue = pendingQueue;\n\t    queue.pending = null;\n\t  }\n\n\t  if (baseQueue !== null) {\n\t    // We have a queue to process.\n\t    var first = baseQueue.next;\n\t    var newState = current.baseState;\n\t    var newBaseState = null;\n\t    var newBaseQueueFirst = null;\n\t    var newBaseQueueLast = null;\n\t    var update = first;\n\n\t    do {\n\t      var updateLane = update.lane;\n\n\t      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n\t        // Priority is insufficient. Skip this update. If this is the first\n\t        // skipped update, the previous update/state is the new base\n\t        // update/state.\n\t        var clone = {\n\t          lane: updateLane,\n\t          action: update.action,\n\t          hasEagerState: update.hasEagerState,\n\t          eagerState: update.eagerState,\n\t          next: null\n\t        };\n\n\t        if (newBaseQueueLast === null) {\n\t          newBaseQueueFirst = newBaseQueueLast = clone;\n\t          newBaseState = newState;\n\t        } else {\n\t          newBaseQueueLast = newBaseQueueLast.next = clone;\n\t        } // Update the remaining priority in the queue.\n\t        // TODO: Don't need to accumulate this. Instead, we can remove\n\t        // renderLanes from the original lanes.\n\n\n\t        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n\t        markSkippedUpdateLanes(updateLane);\n\t      } else {\n\t        // This update does have sufficient priority.\n\t        if (newBaseQueueLast !== null) {\n\t          var _clone = {\n\t            // This update is going to be committed so we never want uncommit\n\t            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n\t            // this will never be skipped by the check above.\n\t            lane: NoLane,\n\t            action: update.action,\n\t            hasEagerState: update.hasEagerState,\n\t            eagerState: update.eagerState,\n\t            next: null\n\t          };\n\t          newBaseQueueLast = newBaseQueueLast.next = _clone;\n\t        } // Process this update.\n\n\n\t        if (update.hasEagerState) {\n\t          // If this update is a state update (not a reducer) and was processed eagerly,\n\t          // we can use the eagerly computed state\n\t          newState = update.eagerState;\n\t        } else {\n\t          var action = update.action;\n\t          newState = reducer(newState, action);\n\t        }\n\t      }\n\n\t      update = update.next;\n\t    } while (update !== null && update !== first);\n\n\t    if (newBaseQueueLast === null) {\n\t      newBaseState = newState;\n\t    } else {\n\t      newBaseQueueLast.next = newBaseQueueFirst;\n\t    } // Mark that the fiber performed work, but only if the new state is\n\t    // different from the current state.\n\n\n\t    if (!objectIs(newState, hook.memoizedState)) {\n\t      markWorkInProgressReceivedUpdate();\n\t    }\n\n\t    hook.memoizedState = newState;\n\t    hook.baseState = newBaseState;\n\t    hook.baseQueue = newBaseQueueLast;\n\t    queue.lastRenderedState = newState;\n\t  } // Interleaved updates are stored on a separate queue. We aren't going to\n\t  // process them during this render, but we do need to track which lanes\n\t  // are remaining.\n\n\n\t  var lastInterleaved = queue.interleaved;\n\n\t  if (lastInterleaved !== null) {\n\t    var interleaved = lastInterleaved;\n\n\t    do {\n\t      var interleavedLane = interleaved.lane;\n\t      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n\t      markSkippedUpdateLanes(interleavedLane);\n\t      interleaved = interleaved.next;\n\t    } while (interleaved !== lastInterleaved);\n\t  } else if (baseQueue === null) {\n\t    // `queue.lanes` is used for entangling transitions. We can set it back to\n\t    // zero once the queue is empty.\n\t    queue.lanes = NoLanes;\n\t  }\n\n\t  var dispatch = queue.dispatch;\n\t  return [hook.memoizedState, dispatch];\n\t}\n\n\tfunction rerenderReducer(reducer, initialArg, init) {\n\t  var hook = updateWorkInProgressHook();\n\t  var queue = hook.queue;\n\n\t  if (queue === null) {\n\t    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n\t  }\n\n\t  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n\t  // work-in-progress hook.\n\n\t  var dispatch = queue.dispatch;\n\t  var lastRenderPhaseUpdate = queue.pending;\n\t  var newState = hook.memoizedState;\n\n\t  if (lastRenderPhaseUpdate !== null) {\n\t    // The queue doesn't persist past this render pass.\n\t    queue.pending = null;\n\t    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n\t    var update = firstRenderPhaseUpdate;\n\n\t    do {\n\t      // Process this render phase update. We don't have to check the\n\t      // priority because it will always be the same as the current\n\t      // render's.\n\t      var action = update.action;\n\t      newState = reducer(newState, action);\n\t      update = update.next;\n\t    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n\t    // different from the current state.\n\n\n\t    if (!objectIs(newState, hook.memoizedState)) {\n\t      markWorkInProgressReceivedUpdate();\n\t    }\n\n\t    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n\t    // the base state unless the queue is empty.\n\t    // TODO: Not sure if this is the desired semantics, but it's what we\n\t    // do for gDSFP. I can't remember why.\n\n\t    if (hook.baseQueue === null) {\n\t      hook.baseState = newState;\n\t    }\n\n\t    queue.lastRenderedState = newState;\n\t  }\n\n\t  return [newState, dispatch];\n\t}\n\n\tfunction mountMutableSource(source, getSnapshot, subscribe) {\n\t  {\n\t    return undefined;\n\t  }\n\t}\n\n\tfunction updateMutableSource(source, getSnapshot, subscribe) {\n\t  {\n\t    return undefined;\n\t  }\n\t}\n\n\tfunction mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n\t  var fiber = currentlyRenderingFiber$1;\n\t  var hook = mountWorkInProgressHook();\n\t  var nextSnapshot;\n\t  var isHydrating = getIsHydrating();\n\n\t  if (isHydrating) {\n\t    if (getServerSnapshot === undefined) {\n\t      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n\t    }\n\n\t    nextSnapshot = getServerSnapshot();\n\n\t    {\n\t      if (!didWarnUncachedGetSnapshot) {\n\t        if (nextSnapshot !== getServerSnapshot()) {\n\t          error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n\n\t          didWarnUncachedGetSnapshot = true;\n\t        }\n\t      }\n\t    }\n\t  } else {\n\t    nextSnapshot = getSnapshot();\n\n\t    {\n\t      if (!didWarnUncachedGetSnapshot) {\n\t        var cachedSnapshot = getSnapshot();\n\n\t        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n\t          error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n\t          didWarnUncachedGetSnapshot = true;\n\t        }\n\t      }\n\t    } // Unless we're rendering a blocking lane, schedule a consistency check.\n\t    // Right before committing, we will walk the tree and check if any of the\n\t    // stores were mutated.\n\t    //\n\t    // We won't do this if we're hydrating server-rendered content, because if\n\t    // the content is stale, it's already visible anyway. Instead we'll patch\n\t    // it up in a passive effect.\n\n\n\t    var root = getWorkInProgressRoot();\n\n\t    if (root === null) {\n\t      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n\t    }\n\n\t    if (!includesBlockingLane(root, renderLanes)) {\n\t      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n\t    }\n\t  } // Read the current snapshot from the store on every render. This breaks the\n\t  // normal rules of React, and only works because store updates are\n\t  // always synchronous.\n\n\n\t  hook.memoizedState = nextSnapshot;\n\t  var inst = {\n\t    value: nextSnapshot,\n\t    getSnapshot: getSnapshot\n\t  };\n\t  hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n\t  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n\t  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n\t  // clean-up function, and we track the deps correctly, we can call pushEffect\n\t  // directly, without storing any additional state. For the same reason, we\n\t  // don't need to set a static flag, either.\n\t  // TODO: We can move this to the passive phase once we add a pre-commit\n\t  // consistency check. See the next comment.\n\n\t  fiber.flags |= Passive;\n\t  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n\t  return nextSnapshot;\n\t}\n\n\tfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n\t  var fiber = currentlyRenderingFiber$1;\n\t  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n\t  // normal rules of React, and only works because store updates are\n\t  // always synchronous.\n\n\t  var nextSnapshot = getSnapshot();\n\n\t  {\n\t    if (!didWarnUncachedGetSnapshot) {\n\t      var cachedSnapshot = getSnapshot();\n\n\t      if (!objectIs(nextSnapshot, cachedSnapshot)) {\n\t        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n\t        didWarnUncachedGetSnapshot = true;\n\t      }\n\t    }\n\t  }\n\n\t  var prevSnapshot = hook.memoizedState;\n\t  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n\t  if (snapshotChanged) {\n\t    hook.memoizedState = nextSnapshot;\n\t    markWorkInProgressReceivedUpdate();\n\t  }\n\n\t  var inst = hook.queue;\n\t  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n\t  // commit phase if there was an interleaved mutation. In concurrent mode\n\t  // this can happen all the time, but even in synchronous mode, an earlier\n\t  // effect may have mutated the store.\n\n\t  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n\t  // checking whether we scheduled a subscription effect above.\n\t  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n\t    fiber.flags |= Passive;\n\t    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n\t    // Right before committing, we will walk the tree and check if any of the\n\t    // stores were mutated.\n\n\t    var root = getWorkInProgressRoot();\n\n\t    if (root === null) {\n\t      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n\t    }\n\n\t    if (!includesBlockingLane(root, renderLanes)) {\n\t      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n\t    }\n\t  }\n\n\t  return nextSnapshot;\n\t}\n\n\tfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n\t  fiber.flags |= StoreConsistency;\n\t  var check = {\n\t    getSnapshot: getSnapshot,\n\t    value: renderedSnapshot\n\t  };\n\t  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n\t  if (componentUpdateQueue === null) {\n\t    componentUpdateQueue = createFunctionComponentUpdateQueue();\n\t    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n\t    componentUpdateQueue.stores = [check];\n\t  } else {\n\t    var stores = componentUpdateQueue.stores;\n\n\t    if (stores === null) {\n\t      componentUpdateQueue.stores = [check];\n\t    } else {\n\t      stores.push(check);\n\t    }\n\t  }\n\t}\n\n\tfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n\t  // These are updated in the passive phase\n\t  inst.value = nextSnapshot;\n\t  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n\t  // have been in an event that fired before the passive effects, or it could\n\t  // have been in a layout effect. In that case, we would have used the old\n\t  // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n\t  if (checkIfSnapshotChanged(inst)) {\n\t    // Force a re-render.\n\t    forceStoreRerender(fiber);\n\t  }\n\t}\n\n\tfunction subscribeToStore(fiber, inst, subscribe) {\n\t  var handleStoreChange = function () {\n\t    // The store changed. Check if the snapshot changed since the last time we\n\t    // read from the store.\n\t    if (checkIfSnapshotChanged(inst)) {\n\t      // Force a re-render.\n\t      forceStoreRerender(fiber);\n\t    }\n\t  }; // Subscribe to the store and return a clean-up function.\n\n\n\t  return subscribe(handleStoreChange);\n\t}\n\n\tfunction checkIfSnapshotChanged(inst) {\n\t  var latestGetSnapshot = inst.getSnapshot;\n\t  var prevValue = inst.value;\n\n\t  try {\n\t    var nextValue = latestGetSnapshot();\n\t    return !objectIs(prevValue, nextValue);\n\t  } catch (error) {\n\t    return true;\n\t  }\n\t}\n\n\tfunction forceStoreRerender(fiber) {\n\t  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t  if (root !== null) {\n\t    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t  }\n\t}\n\n\tfunction mountState(initialState) {\n\t  var hook = mountWorkInProgressHook();\n\n\t  if (typeof initialState === 'function') {\n\t    // $FlowFixMe: Flow doesn't like mixed types\n\t    initialState = initialState();\n\t  }\n\n\t  hook.memoizedState = hook.baseState = initialState;\n\t  var queue = {\n\t    pending: null,\n\t    interleaved: null,\n\t    lanes: NoLanes,\n\t    dispatch: null,\n\t    lastRenderedReducer: basicStateReducer,\n\t    lastRenderedState: initialState\n\t  };\n\t  hook.queue = queue;\n\t  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n\t  return [hook.memoizedState, dispatch];\n\t}\n\n\tfunction updateState(initialState) {\n\t  return updateReducer(basicStateReducer);\n\t}\n\n\tfunction rerenderState(initialState) {\n\t  return rerenderReducer(basicStateReducer);\n\t}\n\n\tfunction pushEffect(tag, create, destroy, deps) {\n\t  var effect = {\n\t    tag: tag,\n\t    create: create,\n\t    destroy: destroy,\n\t    deps: deps,\n\t    // Circular\n\t    next: null\n\t  };\n\t  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n\t  if (componentUpdateQueue === null) {\n\t    componentUpdateQueue = createFunctionComponentUpdateQueue();\n\t    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n\t    componentUpdateQueue.lastEffect = effect.next = effect;\n\t  } else {\n\t    var lastEffect = componentUpdateQueue.lastEffect;\n\n\t    if (lastEffect === null) {\n\t      componentUpdateQueue.lastEffect = effect.next = effect;\n\t    } else {\n\t      var firstEffect = lastEffect.next;\n\t      lastEffect.next = effect;\n\t      effect.next = firstEffect;\n\t      componentUpdateQueue.lastEffect = effect;\n\t    }\n\t  }\n\n\t  return effect;\n\t}\n\n\tfunction mountRef(initialValue) {\n\t  var hook = mountWorkInProgressHook();\n\n\t  {\n\t    var _ref2 = {\n\t      current: initialValue\n\t    };\n\t    hook.memoizedState = _ref2;\n\t    return _ref2;\n\t  }\n\t}\n\n\tfunction updateRef(initialValue) {\n\t  var hook = updateWorkInProgressHook();\n\t  return hook.memoizedState;\n\t}\n\n\tfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n\t  var hook = mountWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  currentlyRenderingFiber$1.flags |= fiberFlags;\n\t  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n\t}\n\n\tfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n\t  var hook = updateWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  var destroy = undefined;\n\n\t  if (currentHook !== null) {\n\t    var prevEffect = currentHook.memoizedState;\n\t    destroy = prevEffect.destroy;\n\n\t    if (nextDeps !== null) {\n\t      var prevDeps = prevEffect.deps;\n\n\t      if (areHookInputsEqual(nextDeps, prevDeps)) {\n\t        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n\t        return;\n\t      }\n\t    }\n\t  }\n\n\t  currentlyRenderingFiber$1.flags |= fiberFlags;\n\t  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n\t}\n\n\tfunction mountEffect(create, deps) {\n\t  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n\t    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n\t  } else {\n\t    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n\t  }\n\t}\n\n\tfunction updateEffect(create, deps) {\n\t  return updateEffectImpl(Passive, Passive$1, create, deps);\n\t}\n\n\tfunction mountInsertionEffect(create, deps) {\n\t  return mountEffectImpl(Update, Insertion, create, deps);\n\t}\n\n\tfunction updateInsertionEffect(create, deps) {\n\t  return updateEffectImpl(Update, Insertion, create, deps);\n\t}\n\n\tfunction mountLayoutEffect(create, deps) {\n\t  var fiberFlags = Update;\n\n\t  {\n\t    fiberFlags |= LayoutStatic;\n\t  }\n\n\t  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n\t    fiberFlags |= MountLayoutDev;\n\t  }\n\n\t  return mountEffectImpl(fiberFlags, Layout, create, deps);\n\t}\n\n\tfunction updateLayoutEffect(create, deps) {\n\t  return updateEffectImpl(Update, Layout, create, deps);\n\t}\n\n\tfunction imperativeHandleEffect(create, ref) {\n\t  if (typeof ref === 'function') {\n\t    var refCallback = ref;\n\n\t    var _inst = create();\n\n\t    refCallback(_inst);\n\t    return function () {\n\t      refCallback(null);\n\t    };\n\t  } else if (ref !== null && ref !== undefined) {\n\t    var refObject = ref;\n\n\t    {\n\t      if (!refObject.hasOwnProperty('current')) {\n\t        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n\t      }\n\t    }\n\n\t    var _inst2 = create();\n\n\t    refObject.current = _inst2;\n\t    return function () {\n\t      refObject.current = null;\n\t    };\n\t  }\n\t}\n\n\tfunction mountImperativeHandle(ref, create, deps) {\n\t  {\n\t    if (typeof create !== 'function') {\n\t      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n\t    }\n\t  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n\t  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\t  var fiberFlags = Update;\n\n\t  {\n\t    fiberFlags |= LayoutStatic;\n\t  }\n\n\t  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n\t    fiberFlags |= MountLayoutDev;\n\t  }\n\n\t  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n\t}\n\n\tfunction updateImperativeHandle(ref, create, deps) {\n\t  {\n\t    if (typeof create !== 'function') {\n\t      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n\t    }\n\t  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n\t  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\t  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n\t}\n\n\tfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n\t  // The react-debug-hooks package injects its own implementation\n\t  // so that e.g. DevTools can display custom hook values.\n\t}\n\n\tvar updateDebugValue = mountDebugValue;\n\n\tfunction mountCallback(callback, deps) {\n\t  var hook = mountWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  hook.memoizedState = [callback, nextDeps];\n\t  return callback;\n\t}\n\n\tfunction updateCallback(callback, deps) {\n\t  var hook = updateWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  var prevState = hook.memoizedState;\n\n\t  if (prevState !== null) {\n\t    if (nextDeps !== null) {\n\t      var prevDeps = prevState[1];\n\n\t      if (areHookInputsEqual(nextDeps, prevDeps)) {\n\t        return prevState[0];\n\t      }\n\t    }\n\t  }\n\n\t  hook.memoizedState = [callback, nextDeps];\n\t  return callback;\n\t}\n\n\tfunction mountMemo(nextCreate, deps) {\n\t  var hook = mountWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  var nextValue = nextCreate();\n\t  hook.memoizedState = [nextValue, nextDeps];\n\t  return nextValue;\n\t}\n\n\tfunction updateMemo(nextCreate, deps) {\n\t  var hook = updateWorkInProgressHook();\n\t  var nextDeps = deps === undefined ? null : deps;\n\t  var prevState = hook.memoizedState;\n\n\t  if (prevState !== null) {\n\t    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n\t    if (nextDeps !== null) {\n\t      var prevDeps = prevState[1];\n\n\t      if (areHookInputsEqual(nextDeps, prevDeps)) {\n\t        return prevState[0];\n\t      }\n\t    }\n\t  }\n\n\t  var nextValue = nextCreate();\n\t  hook.memoizedState = [nextValue, nextDeps];\n\t  return nextValue;\n\t}\n\n\tfunction mountDeferredValue(value) {\n\t  var hook = mountWorkInProgressHook();\n\t  hook.memoizedState = value;\n\t  return value;\n\t}\n\n\tfunction updateDeferredValue(value) {\n\t  var hook = updateWorkInProgressHook();\n\t  var resolvedCurrentHook = currentHook;\n\t  var prevValue = resolvedCurrentHook.memoizedState;\n\t  return updateDeferredValueImpl(hook, prevValue, value);\n\t}\n\n\tfunction rerenderDeferredValue(value) {\n\t  var hook = updateWorkInProgressHook();\n\n\t  if (currentHook === null) {\n\t    // This is a rerender during a mount.\n\t    hook.memoizedState = value;\n\t    return value;\n\t  } else {\n\t    // This is a rerender during an update.\n\t    var prevValue = currentHook.memoizedState;\n\t    return updateDeferredValueImpl(hook, prevValue, value);\n\t  }\n\t}\n\n\tfunction updateDeferredValueImpl(hook, prevValue, value) {\n\t  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n\n\t  if (shouldDeferValue) {\n\t    // This is an urgent update. If the value has changed, keep using the\n\t    // previous value and spawn a deferred render to update it later.\n\t    if (!objectIs(value, prevValue)) {\n\t      // Schedule a deferred render\n\t      var deferredLane = claimNextTransitionLane();\n\t      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n\t      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent\n\t      // from the latest value. The name \"baseState\" doesn't really match how we\n\t      // use it because we're reusing a state hook field instead of creating a\n\t      // new one.\n\n\t      hook.baseState = true;\n\t    } // Reuse the previous value\n\n\n\t    return prevValue;\n\t  } else {\n\t    // This is not an urgent update, so we can use the latest value regardless\n\t    // of what it is. No need to defer it.\n\t    // However, if we're currently inside a spawned render, then we need to mark\n\t    // this as an update to prevent the fiber from bailing out.\n\t    //\n\t    // `baseState` is true when the current value is different from the rendered\n\t    // value. The name doesn't really match how we use it because we're reusing\n\t    // a state hook field instead of creating a new one.\n\t    if (hook.baseState) {\n\t      // Flip this back to false.\n\t      hook.baseState = false;\n\t      markWorkInProgressReceivedUpdate();\n\t    }\n\n\t    hook.memoizedState = value;\n\t    return value;\n\t  }\n\t}\n\n\tfunction startTransition(setPending, callback, options) {\n\t  var previousPriority = getCurrentUpdatePriority();\n\t  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n\t  setPending(true);\n\t  var prevTransition = ReactCurrentBatchConfig$1.transition;\n\t  ReactCurrentBatchConfig$1.transition = {};\n\t  var currentTransition = ReactCurrentBatchConfig$1.transition;\n\n\t  {\n\t    ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n\t  }\n\n\t  try {\n\t    setPending(false);\n\t    callback();\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$1.transition = prevTransition;\n\n\t    {\n\t      if (prevTransition === null && currentTransition._updatedFibers) {\n\t        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n\t        if (updatedFibersCount > 10) {\n\t          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n\t        }\n\n\t        currentTransition._updatedFibers.clear();\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction mountTransition() {\n\t  var _mountState = mountState(false),\n\t      isPending = _mountState[0],\n\t      setPending = _mountState[1]; // The `start` method never changes.\n\n\n\t  var start = startTransition.bind(null, setPending);\n\t  var hook = mountWorkInProgressHook();\n\t  hook.memoizedState = start;\n\t  return [isPending, start];\n\t}\n\n\tfunction updateTransition() {\n\t  var _updateState = updateState(),\n\t      isPending = _updateState[0];\n\n\t  var hook = updateWorkInProgressHook();\n\t  var start = hook.memoizedState;\n\t  return [isPending, start];\n\t}\n\n\tfunction rerenderTransition() {\n\t  var _rerenderState = rerenderState(),\n\t      isPending = _rerenderState[0];\n\n\t  var hook = updateWorkInProgressHook();\n\t  var start = hook.memoizedState;\n\t  return [isPending, start];\n\t}\n\n\tvar isUpdatingOpaqueValueInRenderPhase = false;\n\tfunction getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n\t  {\n\t    return isUpdatingOpaqueValueInRenderPhase;\n\t  }\n\t}\n\n\tfunction mountId() {\n\t  var hook = mountWorkInProgressHook();\n\t  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n\t  // should do this in Fiber, too? Deferring this decision for now because\n\t  // there's no other place to store the prefix except for an internal field on\n\t  // the public createRoot object, which the fiber tree does not currently have\n\t  // a reference to.\n\n\t  var identifierPrefix = root.identifierPrefix;\n\t  var id;\n\n\t  if (getIsHydrating()) {\n\t    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n\t    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n\t    // that represents the position of this useId hook among all the useId\n\t    // hooks for this fiber.\n\n\t    var localId = localIdCounter++;\n\n\t    if (localId > 0) {\n\t      id += 'H' + localId.toString(32);\n\t    }\n\n\t    id += ':';\n\t  } else {\n\t    // Use a lowercase r prefix for client-generated ids.\n\t    var globalClientId = globalClientIdCounter++;\n\t    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n\t  }\n\n\t  hook.memoizedState = id;\n\t  return id;\n\t}\n\n\tfunction updateId() {\n\t  var hook = updateWorkInProgressHook();\n\t  var id = hook.memoizedState;\n\t  return id;\n\t}\n\n\tfunction dispatchReducerAction(fiber, queue, action) {\n\t  {\n\t    if (typeof arguments[3] === 'function') {\n\t      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n\t    }\n\t  }\n\n\t  var lane = requestUpdateLane(fiber);\n\t  var update = {\n\t    lane: lane,\n\t    action: action,\n\t    hasEagerState: false,\n\t    eagerState: null,\n\t    next: null\n\t  };\n\n\t  if (isRenderPhaseUpdate(fiber)) {\n\t    enqueueRenderPhaseUpdate(queue, update);\n\t  } else {\n\t    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n\t    if (root !== null) {\n\t      var eventTime = requestEventTime();\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitionUpdate(root, queue, lane);\n\t    }\n\t  }\n\n\t  markUpdateInDevTools(fiber, lane);\n\t}\n\n\tfunction dispatchSetState(fiber, queue, action) {\n\t  {\n\t    if (typeof arguments[3] === 'function') {\n\t      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n\t    }\n\t  }\n\n\t  var lane = requestUpdateLane(fiber);\n\t  var update = {\n\t    lane: lane,\n\t    action: action,\n\t    hasEagerState: false,\n\t    eagerState: null,\n\t    next: null\n\t  };\n\n\t  if (isRenderPhaseUpdate(fiber)) {\n\t    enqueueRenderPhaseUpdate(queue, update);\n\t  } else {\n\t    var alternate = fiber.alternate;\n\n\t    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n\t      // The queue is currently empty, which means we can eagerly compute the\n\t      // next state before entering the render phase. If the new state is the\n\t      // same as the current state, we may be able to bail out entirely.\n\t      var lastRenderedReducer = queue.lastRenderedReducer;\n\n\t      if (lastRenderedReducer !== null) {\n\t        var prevDispatcher;\n\n\t        {\n\t          prevDispatcher = ReactCurrentDispatcher$1.current;\n\t          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\t        }\n\n\t        try {\n\t          var currentState = queue.lastRenderedState;\n\t          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n\t          // it, on the update object. If the reducer hasn't changed by the\n\t          // time we enter the render phase, then the eager state can be used\n\t          // without calling the reducer again.\n\n\t          update.hasEagerState = true;\n\t          update.eagerState = eagerState;\n\n\t          if (objectIs(eagerState, currentState)) {\n\t            // Fast path. We can bail out without scheduling React to re-render.\n\t            // It's still possible that we'll need to rebase this update later,\n\t            // if the component re-renders for a different reason and by that\n\t            // time the reducer has changed.\n\t            // TODO: Do we still need to entangle transitions in this case?\n\t            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);\n\t            return;\n\t          }\n\t        } catch (error) {// Suppress the error. It will throw again in the render phase.\n\t        } finally {\n\t          {\n\t            ReactCurrentDispatcher$1.current = prevDispatcher;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n\t    if (root !== null) {\n\t      var eventTime = requestEventTime();\n\t      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t      entangleTransitionUpdate(root, queue, lane);\n\t    }\n\t  }\n\n\t  markUpdateInDevTools(fiber, lane);\n\t}\n\n\tfunction isRenderPhaseUpdate(fiber) {\n\t  var alternate = fiber.alternate;\n\t  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n\t}\n\n\tfunction enqueueRenderPhaseUpdate(queue, update) {\n\t  // This is a render phase update. Stash it in a lazily-created map of\n\t  // queue -> linked list of updates. After this render pass, we'll restart\n\t  // and apply the stashed updates on top of the work-in-progress hook.\n\t  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n\t  var pending = queue.pending;\n\n\t  if (pending === null) {\n\t    // This is the first update. Create a circular list.\n\t    update.next = update;\n\t  } else {\n\t    update.next = pending.next;\n\t    pending.next = update;\n\t  }\n\n\t  queue.pending = update;\n\t} // TODO: Move to ReactFiberConcurrentUpdates?\n\n\n\tfunction entangleTransitionUpdate(root, queue, lane) {\n\t  if (isTransitionLane(lane)) {\n\t    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n\t    // must have finished. We can remove them from the shared queue, which\n\t    // represents a superset of the actually pending lanes. In some cases we\n\t    // may entangle more than we need to, but that's OK. In fact it's worse if\n\t    // we *don't* entangle when we should.\n\n\t    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n\t    var newQueueLanes = mergeLanes(queueLanes, lane);\n\t    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n\t    // the lane finished since the last time we entangled it. So we need to\n\t    // entangle it again, just to be sure.\n\n\t    markRootEntangled(root, newQueueLanes);\n\t  }\n\t}\n\n\tfunction markUpdateInDevTools(fiber, lane, action) {\n\n\t  {\n\t    markStateUpdateScheduled(fiber, lane);\n\t  }\n\t}\n\n\tvar ContextOnlyDispatcher = {\n\t  readContext: readContext,\n\t  useCallback: throwInvalidHookError,\n\t  useContext: throwInvalidHookError,\n\t  useEffect: throwInvalidHookError,\n\t  useImperativeHandle: throwInvalidHookError,\n\t  useInsertionEffect: throwInvalidHookError,\n\t  useLayoutEffect: throwInvalidHookError,\n\t  useMemo: throwInvalidHookError,\n\t  useReducer: throwInvalidHookError,\n\t  useRef: throwInvalidHookError,\n\t  useState: throwInvalidHookError,\n\t  useDebugValue: throwInvalidHookError,\n\t  useDeferredValue: throwInvalidHookError,\n\t  useTransition: throwInvalidHookError,\n\t  useMutableSource: throwInvalidHookError,\n\t  useSyncExternalStore: throwInvalidHookError,\n\t  useId: throwInvalidHookError,\n\t  unstable_isNewReconciler: enableNewReconciler\n\t};\n\n\tvar HooksDispatcherOnMountInDEV = null;\n\tvar HooksDispatcherOnMountWithHookTypesInDEV = null;\n\tvar HooksDispatcherOnUpdateInDEV = null;\n\tvar HooksDispatcherOnRerenderInDEV = null;\n\tvar InvalidNestedHooksDispatcherOnMountInDEV = null;\n\tvar InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n\tvar InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n\t{\n\t  var warnInvalidContextAccess = function () {\n\t    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n\t  };\n\n\t  var warnInvalidHookAccess = function () {\n\t    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n\t  };\n\n\t  HooksDispatcherOnMountInDEV = {\n\t    readContext: function (context) {\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      mountHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      return mountLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      mountHookTypesDev();\n\t      checkDepsAreArrayDev(deps);\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      mountHookTypesDev();\n\t      return mountRef(initialValue);\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      mountHookTypesDev();\n\t      return mountDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      mountHookTypesDev();\n\t      return mountDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      mountHookTypesDev();\n\t      return mountTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      mountHookTypesDev();\n\t      return mountMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      mountHookTypesDev();\n\t      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      mountHookTypesDev();\n\t      return mountId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  HooksDispatcherOnMountWithHookTypesInDEV = {\n\t    readContext: function (context) {\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      updateHookTypesDev();\n\t      return mountCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      updateHookTypesDev();\n\t      return mountEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      updateHookTypesDev();\n\t      return mountImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      updateHookTypesDev();\n\t      return mountInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      updateHookTypesDev();\n\t      return mountLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      updateHookTypesDev();\n\t      return mountRef(initialValue);\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      updateHookTypesDev();\n\t      return mountDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      updateHookTypesDev();\n\t      return mountDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      updateHookTypesDev();\n\t      return mountTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      updateHookTypesDev();\n\t      return mountMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      updateHookTypesDev();\n\t      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      updateHookTypesDev();\n\t      return mountId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  HooksDispatcherOnUpdateInDEV = {\n\t    readContext: function (context) {\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      updateHookTypesDev();\n\t      return updateCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      updateHookTypesDev();\n\t      return updateEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      updateHookTypesDev();\n\t      return updateImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      updateHookTypesDev();\n\t      return updateInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      updateHookTypesDev();\n\t      return updateLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      updateHookTypesDev();\n\t      return updateRef();\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      updateHookTypesDev();\n\t      return updateDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      updateHookTypesDev();\n\t      return updateDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      updateHookTypesDev();\n\t      return updateTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      updateHookTypesDev();\n\t      return updateMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      updateHookTypesDev();\n\t      return updateSyncExternalStore(subscribe, getSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      updateHookTypesDev();\n\t      return updateId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  HooksDispatcherOnRerenderInDEV = {\n\t    readContext: function (context) {\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      updateHookTypesDev();\n\t      return updateCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      updateHookTypesDev();\n\t      return updateEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      updateHookTypesDev();\n\t      return updateImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      updateHookTypesDev();\n\t      return updateInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      updateHookTypesDev();\n\t      return updateLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n\t      try {\n\t        return updateMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n\t      try {\n\t        return rerenderReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      updateHookTypesDev();\n\t      return updateRef();\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n\t      try {\n\t        return rerenderState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      updateHookTypesDev();\n\t      return updateDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      updateHookTypesDev();\n\t      return rerenderDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      updateHookTypesDev();\n\t      return rerenderTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      updateHookTypesDev();\n\t      return updateMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      updateHookTypesDev();\n\t      return updateSyncExternalStore(subscribe, getSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      updateHookTypesDev();\n\t      return updateId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  InvalidNestedHooksDispatcherOnMountInDEV = {\n\t    readContext: function (context) {\n\t      warnInvalidContextAccess();\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountRef(initialValue);\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n\t      try {\n\t        return mountState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      warnInvalidHookAccess();\n\t      mountHookTypesDev();\n\t      return mountId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n\t    readContext: function (context) {\n\t      warnInvalidContextAccess();\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateRef();\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateSyncExternalStore(subscribe, getSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\n\t  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n\t    readContext: function (context) {\n\t      warnInvalidContextAccess();\n\t      return readContext(context);\n\t    },\n\t    useCallback: function (callback, deps) {\n\t      currentHookNameInDev = 'useCallback';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateCallback(callback, deps);\n\t    },\n\t    useContext: function (context) {\n\t      currentHookNameInDev = 'useContext';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return readContext(context);\n\t    },\n\t    useEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateEffect(create, deps);\n\t    },\n\t    useImperativeHandle: function (ref, create, deps) {\n\t      currentHookNameInDev = 'useImperativeHandle';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateImperativeHandle(ref, create, deps);\n\t    },\n\t    useInsertionEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useInsertionEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateInsertionEffect(create, deps);\n\t    },\n\t    useLayoutEffect: function (create, deps) {\n\t      currentHookNameInDev = 'useLayoutEffect';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateLayoutEffect(create, deps);\n\t    },\n\t    useMemo: function (create, deps) {\n\t      currentHookNameInDev = 'useMemo';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return updateMemo(create, deps);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useReducer: function (reducer, initialArg, init) {\n\t      currentHookNameInDev = 'useReducer';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return rerenderReducer(reducer, initialArg, init);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useRef: function (initialValue) {\n\t      currentHookNameInDev = 'useRef';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateRef();\n\t    },\n\t    useState: function (initialState) {\n\t      currentHookNameInDev = 'useState';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      var prevDispatcher = ReactCurrentDispatcher$1.current;\n\t      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n\t      try {\n\t        return rerenderState(initialState);\n\t      } finally {\n\t        ReactCurrentDispatcher$1.current = prevDispatcher;\n\t      }\n\t    },\n\t    useDebugValue: function (value, formatterFn) {\n\t      currentHookNameInDev = 'useDebugValue';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateDebugValue();\n\t    },\n\t    useDeferredValue: function (value) {\n\t      currentHookNameInDev = 'useDeferredValue';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return rerenderDeferredValue(value);\n\t    },\n\t    useTransition: function () {\n\t      currentHookNameInDev = 'useTransition';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return rerenderTransition();\n\t    },\n\t    useMutableSource: function (source, getSnapshot, subscribe) {\n\t      currentHookNameInDev = 'useMutableSource';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateMutableSource();\n\t    },\n\t    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n\t      currentHookNameInDev = 'useSyncExternalStore';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateSyncExternalStore(subscribe, getSnapshot);\n\t    },\n\t    useId: function () {\n\t      currentHookNameInDev = 'useId';\n\t      warnInvalidHookAccess();\n\t      updateHookTypesDev();\n\t      return updateId();\n\t    },\n\t    unstable_isNewReconciler: enableNewReconciler\n\t  };\n\t}\n\n\tvar now$1 = Scheduler.unstable_now;\n\tvar commitTime = 0;\n\tvar layoutEffectStartTime = -1;\n\tvar profilerStartTime = -1;\n\tvar passiveEffectStartTime = -1;\n\t/**\n\t * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n\t *\n\t * The overall sequence is:\n\t *   1. render\n\t *   2. commit (and call `onRender`, `onCommit`)\n\t *   3. check for nested updates\n\t *   4. flush passive effects (and call `onPostCommit`)\n\t *\n\t * Nested updates are identified in step 3 above,\n\t * but step 4 still applies to the work that was just committed.\n\t * We use two flags to track nested updates then:\n\t * one tracks whether the upcoming update is a nested update,\n\t * and the other tracks whether the current update was a nested update.\n\t * The first value gets synced to the second at the start of the render phase.\n\t */\n\n\tvar currentUpdateIsNested = false;\n\tvar nestedUpdateScheduled = false;\n\n\tfunction isCurrentUpdateNested() {\n\t  return currentUpdateIsNested;\n\t}\n\n\tfunction markNestedUpdateScheduled() {\n\t  {\n\t    nestedUpdateScheduled = true;\n\t  }\n\t}\n\n\tfunction resetNestedUpdateFlag() {\n\t  {\n\t    currentUpdateIsNested = false;\n\t    nestedUpdateScheduled = false;\n\t  }\n\t}\n\n\tfunction syncNestedUpdateFlag() {\n\t  {\n\t    currentUpdateIsNested = nestedUpdateScheduled;\n\t    nestedUpdateScheduled = false;\n\t  }\n\t}\n\n\tfunction getCommitTime() {\n\t  return commitTime;\n\t}\n\n\tfunction recordCommitTime() {\n\n\t  commitTime = now$1();\n\t}\n\n\tfunction startProfilerTimer(fiber) {\n\n\t  profilerStartTime = now$1();\n\n\t  if (fiber.actualStartTime < 0) {\n\t    fiber.actualStartTime = now$1();\n\t  }\n\t}\n\n\tfunction stopProfilerTimerIfRunning(fiber) {\n\n\t  profilerStartTime = -1;\n\t}\n\n\tfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n\n\t  if (profilerStartTime >= 0) {\n\t    var elapsedTime = now$1() - profilerStartTime;\n\t    fiber.actualDuration += elapsedTime;\n\n\t    if (overrideBaseTime) {\n\t      fiber.selfBaseDuration = elapsedTime;\n\t    }\n\n\t    profilerStartTime = -1;\n\t  }\n\t}\n\n\tfunction recordLayoutEffectDuration(fiber) {\n\n\t  if (layoutEffectStartTime >= 0) {\n\t    var elapsedTime = now$1() - layoutEffectStartTime;\n\t    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n\t    // Or the root (for the DevTools Profiler to read)\n\n\t    var parentFiber = fiber.return;\n\n\t    while (parentFiber !== null) {\n\t      switch (parentFiber.tag) {\n\t        case HostRoot:\n\t          var root = parentFiber.stateNode;\n\t          root.effectDuration += elapsedTime;\n\t          return;\n\n\t        case Profiler:\n\t          var parentStateNode = parentFiber.stateNode;\n\t          parentStateNode.effectDuration += elapsedTime;\n\t          return;\n\t      }\n\n\t      parentFiber = parentFiber.return;\n\t    }\n\t  }\n\t}\n\n\tfunction recordPassiveEffectDuration(fiber) {\n\n\t  if (passiveEffectStartTime >= 0) {\n\t    var elapsedTime = now$1() - passiveEffectStartTime;\n\t    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n\t    // Or the root (for the DevTools Profiler to read)\n\n\t    var parentFiber = fiber.return;\n\n\t    while (parentFiber !== null) {\n\t      switch (parentFiber.tag) {\n\t        case HostRoot:\n\t          var root = parentFiber.stateNode;\n\n\t          if (root !== null) {\n\t            root.passiveEffectDuration += elapsedTime;\n\t          }\n\n\t          return;\n\n\t        case Profiler:\n\t          var parentStateNode = parentFiber.stateNode;\n\n\t          if (parentStateNode !== null) {\n\t            // Detached fibers have their state node cleared out.\n\t            // In this case, the return pointer is also cleared out,\n\t            // so we won't be able to report the time spent in this Profiler's subtree.\n\t            parentStateNode.passiveEffectDuration += elapsedTime;\n\t          }\n\n\t          return;\n\t      }\n\n\t      parentFiber = parentFiber.return;\n\t    }\n\t  }\n\t}\n\n\tfunction startLayoutEffectTimer() {\n\n\t  layoutEffectStartTime = now$1();\n\t}\n\n\tfunction startPassiveEffectTimer() {\n\n\t  passiveEffectStartTime = now$1();\n\t}\n\n\tfunction transferActualDuration(fiber) {\n\t  // Transfer time spent rendering these children so we don't lose it\n\t  // after we rerender. This is used as a helper in special cases\n\t  // where we should count the work of multiple passes.\n\t  var child = fiber.child;\n\n\t  while (child) {\n\t    fiber.actualDuration += child.actualDuration;\n\t    child = child.sibling;\n\t  }\n\t}\n\n\tfunction createCapturedValueAtFiber(value, source) {\n\t  // If the value is an error, call this function immediately after it is thrown\n\t  // so the stack is accurate.\n\t  return {\n\t    value: value,\n\t    source: source,\n\t    stack: getStackByFiberInDevAndProd(source),\n\t    digest: null\n\t  };\n\t}\n\tfunction createCapturedValue(value, digest, stack) {\n\t  return {\n\t    value: value,\n\t    source: null,\n\t    stack: stack != null ? stack : null,\n\t    digest: digest != null ? digest : null\n\t  };\n\t}\n\n\t// This module is forked in different environments.\n\t// By default, return `true` to log errors to the console.\n\t// Forks can return `false` if this isn't desirable.\n\tfunction showErrorDialog(boundary, errorInfo) {\n\t  return true;\n\t}\n\n\tfunction logCapturedError(boundary, errorInfo) {\n\t  try {\n\t    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n\t    // This enables renderers like ReactNative to better manage redbox behavior.\n\n\t    if (logError === false) {\n\t      return;\n\t    }\n\n\t    var error = errorInfo.value;\n\n\t    if (true) {\n\t      var source = errorInfo.source;\n\t      var stack = errorInfo.stack;\n\t      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n\t      // `preventDefault()` in window `error` handler.\n\t      // We record this information as an expando on the error.\n\n\t      if (error != null && error._suppressLogging) {\n\t        if (boundary.tag === ClassComponent) {\n\t          // The error is recoverable and was silenced.\n\t          // Ignore it and don't print the stack addendum.\n\t          // This is handy for testing error boundaries without noise.\n\t          return;\n\t        } // The error is fatal. Since the silencing might have\n\t        // been accidental, we'll surface it anyway.\n\t        // However, the browser would have silenced the original error\n\t        // so we'll print it first, and then print the stack addendum.\n\n\n\t        console['error'](error); // Don't transform to our wrapper\n\t        // For a more detailed description of this block, see:\n\t        // https://github.com/facebook/react/pull/13384\n\t      }\n\n\t      var componentName = source ? getComponentNameFromFiber(source) : null;\n\t      var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n\t      var errorBoundaryMessage;\n\n\t      if (boundary.tag === HostRoot) {\n\t        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n\t      } else {\n\t        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n\t        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n\t      }\n\n\t      var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n\t      // We don't include the original error message and JS stack because the browser\n\t      // has already printed it. Even if the application swallows the error, it is still\n\t      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n\t      console['error'](combinedMessage); // Don't transform to our wrapper\n\t    }\n\t  } catch (e) {\n\t    // This method must not throw, or React internal state will get messed up.\n\t    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n\t    // we want to report this error outside of the normal stack as a last resort.\n\t    // https://github.com/facebook/react/issues/13188\n\t    setTimeout(function () {\n\t      throw e;\n\t    });\n\t  }\n\t}\n\n\tvar PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\n\tfunction createRootErrorUpdate(fiber, errorInfo, lane) {\n\t  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n\t  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n\t  // being called \"element\".\n\n\t  update.payload = {\n\t    element: null\n\t  };\n\t  var error = errorInfo.value;\n\n\t  update.callback = function () {\n\t    onUncaughtError(error);\n\t    logCapturedError(fiber, errorInfo);\n\t  };\n\n\t  return update;\n\t}\n\n\tfunction createClassErrorUpdate(fiber, errorInfo, lane) {\n\t  var update = createUpdate(NoTimestamp, lane);\n\t  update.tag = CaptureUpdate;\n\t  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n\t  if (typeof getDerivedStateFromError === 'function') {\n\t    var error$1 = errorInfo.value;\n\n\t    update.payload = function () {\n\t      return getDerivedStateFromError(error$1);\n\t    };\n\n\t    update.callback = function () {\n\t      {\n\t        markFailedErrorBoundaryForHotReloading(fiber);\n\t      }\n\n\t      logCapturedError(fiber, errorInfo);\n\t    };\n\t  }\n\n\t  var inst = fiber.stateNode;\n\n\t  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n\t    update.callback = function callback() {\n\t      {\n\t        markFailedErrorBoundaryForHotReloading(fiber);\n\t      }\n\n\t      logCapturedError(fiber, errorInfo);\n\n\t      if (typeof getDerivedStateFromError !== 'function') {\n\t        // To preserve the preexisting retry behavior of error boundaries,\n\t        // we keep track of which ones already failed during this batch.\n\t        // This gets reset before we yield back to the browser.\n\t        // TODO: Warn in strict mode if getDerivedStateFromError is\n\t        // not defined.\n\t        markLegacyErrorBoundaryAsFailed(this);\n\t      }\n\n\t      var error$1 = errorInfo.value;\n\t      var stack = errorInfo.stack;\n\t      this.componentDidCatch(error$1, {\n\t        componentStack: stack !== null ? stack : ''\n\t      });\n\n\t      {\n\t        if (typeof getDerivedStateFromError !== 'function') {\n\t          // If componentDidCatch is the only error boundary method defined,\n\t          // then it needs to call setState to recover from errors.\n\t          // If no state update is scheduled then the boundary will swallow the error.\n\t          if (!includesSomeLane(fiber.lanes, SyncLane)) {\n\t            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n\t          }\n\t        }\n\t      }\n\t    };\n\t  }\n\n\t  return update;\n\t}\n\n\tfunction attachPingListener(root, wakeable, lanes) {\n\t  // Attach a ping listener\n\t  //\n\t  // The data might resolve before we have a chance to commit the fallback. Or,\n\t  // in the case of a refresh, we'll never commit a fallback. So we need to\n\t  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n\t  // try rendering the tree again.\n\t  //\n\t  // Only attach a listener if one does not already exist for the lanes\n\t  // we're currently rendering (which acts like a \"thread ID\" here).\n\t  //\n\t  // We only need to do this in concurrent mode. Legacy Suspense always\n\t  // commits fallbacks synchronously, so there are no pings.\n\t  var pingCache = root.pingCache;\n\t  var threadIDs;\n\n\t  if (pingCache === null) {\n\t    pingCache = root.pingCache = new PossiblyWeakMap$1();\n\t    threadIDs = new Set();\n\t    pingCache.set(wakeable, threadIDs);\n\t  } else {\n\t    threadIDs = pingCache.get(wakeable);\n\n\t    if (threadIDs === undefined) {\n\t      threadIDs = new Set();\n\t      pingCache.set(wakeable, threadIDs);\n\t    }\n\t  }\n\n\t  if (!threadIDs.has(lanes)) {\n\t    // Memoize using the thread ID to prevent redundant listeners.\n\t    threadIDs.add(lanes);\n\t    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n\t    {\n\t      if (isDevToolsPresent) {\n\t        // If we have pending work still, restore the original updaters\n\t        restorePendingUpdaters(root, lanes);\n\t      }\n\t    }\n\n\t    wakeable.then(ping, ping);\n\t  }\n\t}\n\n\tfunction attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n\t  // Retry listener\n\t  //\n\t  // If the fallback does commit, we need to attach a different type of\n\t  // listener. This one schedules an update on the Suspense boundary to turn\n\t  // the fallback state off.\n\t  //\n\t  // Stash the wakeable on the boundary fiber so we can access it in the\n\t  // commit phase.\n\t  //\n\t  // When the wakeable resolves, we'll attempt to render the boundary\n\t  // again (\"retry\").\n\t  var wakeables = suspenseBoundary.updateQueue;\n\n\t  if (wakeables === null) {\n\t    var updateQueue = new Set();\n\t    updateQueue.add(wakeable);\n\t    suspenseBoundary.updateQueue = updateQueue;\n\t  } else {\n\t    wakeables.add(wakeable);\n\t  }\n\t}\n\n\tfunction resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n\t  // A legacy mode Suspense quirk, only relevant to hook components.\n\n\n\t  var tag = sourceFiber.tag;\n\n\t  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n\t    var currentSource = sourceFiber.alternate;\n\n\t    if (currentSource) {\n\t      sourceFiber.updateQueue = currentSource.updateQueue;\n\t      sourceFiber.memoizedState = currentSource.memoizedState;\n\t      sourceFiber.lanes = currentSource.lanes;\n\t    } else {\n\t      sourceFiber.updateQueue = null;\n\t      sourceFiber.memoizedState = null;\n\t    }\n\t  }\n\t}\n\n\tfunction getNearestSuspenseBoundaryToCapture(returnFiber) {\n\t  var node = returnFiber;\n\n\t  do {\n\t    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n\t      return node;\n\t    } // This boundary already captured during this render. Continue to the next\n\t    // boundary.\n\n\n\t    node = node.return;\n\t  } while (node !== null);\n\n\t  return null;\n\t}\n\n\tfunction markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n\t  // This marks a Suspense boundary so that when we're unwinding the stack,\n\t  // it captures the suspended \"exception\" and does a second (fallback) pass.\n\t  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n\t    // Legacy Mode Suspense\n\t    //\n\t    // If the boundary is in legacy mode, we should *not*\n\t    // suspend the commit. Pretend as if the suspended component rendered\n\t    // null and keep rendering. When the Suspense boundary completes,\n\t    // we'll do a second pass to render the fallback.\n\t    if (suspenseBoundary === returnFiber) {\n\t      // Special case where we suspended while reconciling the children of\n\t      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n\t      // when a React.lazy component is a direct child of a\n\t      // Suspense boundary.\n\t      //\n\t      // Suspense boundaries are implemented as multiple fibers, but they\n\t      // are a single conceptual unit. The legacy mode behavior where we\n\t      // pretend the suspended fiber committed as `null` won't work,\n\t      // because in this case the \"suspended\" fiber is the inner\n\t      // Offscreen wrapper.\n\t      //\n\t      // Because the contents of the boundary haven't started rendering\n\t      // yet (i.e. nothing in the tree has partially rendered) we can\n\t      // switch to the regular, concurrent mode behavior: mark the\n\t      // boundary with ShouldCapture and enter the unwind phase.\n\t      suspenseBoundary.flags |= ShouldCapture;\n\t    } else {\n\t      suspenseBoundary.flags |= DidCapture;\n\t      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n\t      // But we shouldn't call any lifecycle methods or callbacks. Remove\n\t      // all lifecycle effect tags.\n\n\t      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n\t      if (sourceFiber.tag === ClassComponent) {\n\t        var currentSourceFiber = sourceFiber.alternate;\n\n\t        if (currentSourceFiber === null) {\n\t          // This is a new mount. Change the tag so it's not mistaken for a\n\t          // completed class component. For example, we should not call\n\t          // componentWillUnmount if it is deleted.\n\t          sourceFiber.tag = IncompleteClassComponent;\n\t        } else {\n\t          // When we try rendering again, we should not reuse the current fiber,\n\t          // since it's known to be in an inconsistent state. Use a force update to\n\t          // prevent a bail out.\n\t          var update = createUpdate(NoTimestamp, SyncLane);\n\t          update.tag = ForceUpdate;\n\t          enqueueUpdate(sourceFiber, update, SyncLane);\n\t        }\n\t      } // The source fiber did not complete. Mark it with Sync priority to\n\t      // indicate that it still has pending work.\n\n\n\t      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\t    }\n\n\t    return suspenseBoundary;\n\t  } // Confirmed that the boundary is in a concurrent mode tree. Continue\n\t  // with the normal suspend path.\n\t  //\n\t  // After this we'll use a set of heuristics to determine whether this\n\t  // render pass will run to completion or restart or \"suspend\" the commit.\n\t  // The actual logic for this is spread out in different places.\n\t  //\n\t  // This first principle is that if we're going to suspend when we complete\n\t  // a root, then we should also restart if we get an update or ping that\n\t  // might unsuspend it, and vice versa. The only reason to suspend is\n\t  // because you think you might want to restart before committing. However,\n\t  // it doesn't make sense to restart only while in the period we're suspended.\n\t  //\n\t  // Restarting too aggressively is also not good because it starves out any\n\t  // intermediate loading state. So we use heuristics to determine when.\n\t  // Suspense Heuristics\n\t  //\n\t  // If nothing threw a Promise or all the same fallbacks are already showing,\n\t  // then don't suspend/restart.\n\t  //\n\t  // If this is an initial render of a new tree of Suspense boundaries and\n\t  // those trigger a fallback, then don't suspend/restart. We want to ensure\n\t  // that we can show the initial loading state as quickly as possible.\n\t  //\n\t  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n\t  // a fallback, then we should always suspend/restart. Transitions apply\n\t  // to this case. If none is defined, JND is used instead.\n\t  //\n\t  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n\t  // another level, but there's still an inner boundary that would show a fallback,\n\t  // then we suspend/restart for 500ms since the last time we showed a fallback\n\t  // anywhere in the tree. This effectively throttles progressive loading into a\n\t  // consistent train of commits. This also gives us an opportunity to restart to\n\t  // get to the completed state slightly earlier.\n\t  //\n\t  // If there's ambiguity due to batching it's resolved in preference of:\n\t  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n\t  //\n\t  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n\t  // ensure that new initial loading states can commit as soon as possible.\n\n\n\t  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n\t  // the begin phase to prevent an early bailout.\n\n\t  suspenseBoundary.lanes = rootRenderLanes;\n\t  return suspenseBoundary;\n\t}\n\n\tfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n\t  // The source fiber did not complete.\n\t  sourceFiber.flags |= Incomplete;\n\n\t  {\n\t    if (isDevToolsPresent) {\n\t      // If we have pending work still, restore the original updaters\n\t      restorePendingUpdaters(root, rootRenderLanes);\n\t    }\n\t  }\n\n\t  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n\t    // This is a wakeable. The component suspended.\n\t    var wakeable = value;\n\t    resetSuspendedComponent(sourceFiber);\n\n\t    {\n\t      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n\t        markDidThrowWhileHydratingDEV();\n\t      }\n\t    }\n\n\n\t    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n\t    if (suspenseBoundary !== null) {\n\t      suspenseBoundary.flags &= ~ForceClientRender;\n\t      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n\t      // commits fallbacks synchronously, so there are no pings.\n\n\t      if (suspenseBoundary.mode & ConcurrentMode) {\n\t        attachPingListener(root, wakeable, rootRenderLanes);\n\t      }\n\n\t      attachRetryListener(suspenseBoundary, root, wakeable);\n\t      return;\n\t    } else {\n\t      // No boundary was found. Unless this is a sync update, this is OK.\n\t      // We can suspend and wait for more data to arrive.\n\t      if (!includesSyncLane(rootRenderLanes)) {\n\t        // This is not a sync update. Suspend. Since we're not activating a\n\t        // Suspense boundary, this will unwind all the way to the root without\n\t        // performing a second pass to render a fallback. (This is arguably how\n\t        // refresh transitions should work, too, since we're not going to commit\n\t        // the fallbacks anyway.)\n\t        //\n\t        // This case also applies to initial hydration.\n\t        attachPingListener(root, wakeable, rootRenderLanes);\n\t        renderDidSuspendDelayIfPossible();\n\t        return;\n\t      } // This is a sync/discrete update. We treat this case like an error\n\t      // because discrete renders are expected to produce a complete tree\n\t      // synchronously to maintain consistency with external state.\n\n\n\t      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n\t      // The error will be caught by the nearest suspense boundary.\n\n\t      value = uncaughtSuspenseError;\n\t    }\n\t  } else {\n\t    // This is a regular error, not a Suspense wakeable.\n\t    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n\t      markDidThrowWhileHydratingDEV();\n\n\t      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n\t      // discarding the dehydrated content and switching to a client render.\n\t      // Instead of surfacing the error, find the nearest Suspense boundary\n\t      // and render it again without hydration.\n\n\n\t      if (_suspenseBoundary !== null) {\n\t        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n\t          // Set a flag to indicate that we should try rendering the normal\n\t          // children again, not the fallback.\n\t          _suspenseBoundary.flags |= ForceClientRender;\n\t        }\n\n\t        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n\t        // still log it so it can be fixed.\n\n\t        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n\t        return;\n\t      }\n\t    }\n\t  }\n\n\t  value = createCapturedValueAtFiber(value, sourceFiber);\n\t  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n\t  // over and traverse parent path again, this time treating the exception\n\t  // as an error.\n\n\t  var workInProgress = returnFiber;\n\n\t  do {\n\t    switch (workInProgress.tag) {\n\t      case HostRoot:\n\t        {\n\t          var _errorInfo = value;\n\t          workInProgress.flags |= ShouldCapture;\n\t          var lane = pickArbitraryLane(rootRenderLanes);\n\t          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n\t          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n\t          enqueueCapturedUpdate(workInProgress, update);\n\t          return;\n\t        }\n\n\t      case ClassComponent:\n\t        // Capture and retry\n\t        var errorInfo = value;\n\t        var ctor = workInProgress.type;\n\t        var instance = workInProgress.stateNode;\n\n\t        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n\t          workInProgress.flags |= ShouldCapture;\n\n\t          var _lane = pickArbitraryLane(rootRenderLanes);\n\n\t          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n\t          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n\t          enqueueCapturedUpdate(workInProgress, _update);\n\t          return;\n\t        }\n\n\t        break;\n\t    }\n\n\t    workInProgress = workInProgress.return;\n\t  } while (workInProgress !== null);\n\t}\n\n\tfunction getSuspendedCache() {\n\t  {\n\t    return null;\n\t  } // This function is called when a Suspense boundary suspends. It returns the\n\t}\n\n\tvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n\tvar didReceiveUpdate = false;\n\tvar didWarnAboutBadClass;\n\tvar didWarnAboutModulePatternComponent;\n\tvar didWarnAboutContextTypeOnFunctionComponent;\n\tvar didWarnAboutGetDerivedStateOnFunctionComponent;\n\tvar didWarnAboutFunctionRefs;\n\tvar didWarnAboutReassigningProps;\n\tvar didWarnAboutRevealOrder;\n\tvar didWarnAboutTailOptions;\n\n\t{\n\t  didWarnAboutBadClass = {};\n\t  didWarnAboutModulePatternComponent = {};\n\t  didWarnAboutContextTypeOnFunctionComponent = {};\n\t  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n\t  didWarnAboutFunctionRefs = {};\n\t  didWarnAboutReassigningProps = false;\n\t  didWarnAboutRevealOrder = {};\n\t  didWarnAboutTailOptions = {};\n\t}\n\n\tfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n\t  if (current === null) {\n\t    // If this is a fresh new component that hasn't been rendered yet, we\n\t    // won't update its child set by applying minimal side-effects. Instead,\n\t    // we will add them all to the child before it gets rendered. That means\n\t    // we can optimize this reconciliation pass by not tracking side-effects.\n\t    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n\t  } else {\n\t    // If the current child is the same as the work in progress, it means that\n\t    // we haven't yet started any work on these children. Therefore, we use\n\t    // the clone algorithm to create a copy of all the current children.\n\t    // If we had any progressed work already, that is invalid at this point so\n\t    // let's throw it out.\n\t    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n\t  }\n\t}\n\n\tfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n\t  // This function is fork of reconcileChildren. It's used in cases where we\n\t  // want to reconcile without matching against the existing set. This has the\n\t  // effect of all current children being unmounted; even if the type and key\n\t  // are the same, the old child is unmounted and a new child is created.\n\t  //\n\t  // To do this, we're going to go through the reconcile algorithm twice. In\n\t  // the first pass, we schedule a deletion for all the current children by\n\t  // passing null.\n\t  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n\t  // pass null in place of where we usually pass the current child set. This has\n\t  // the effect of remounting all children regardless of whether their\n\t  // identities match.\n\n\t  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n\t}\n\n\tfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n\t  // TODO: current can be non-null here even if the component\n\t  // hasn't yet mounted. This happens after the first render suspends.\n\t  // We'll need to figure out if this is fine or can cause issues.\n\t  {\n\t    if (workInProgress.type !== workInProgress.elementType) {\n\t      // Lazy component props can't be validated in createElement\n\t      // because they're only guaranteed to be resolved here.\n\t      var innerPropTypes = Component.propTypes;\n\n\t      if (innerPropTypes) {\n\t        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n\t        'prop', getComponentNameFromType(Component));\n\t      }\n\t    }\n\t  }\n\n\t  var render = Component.render;\n\t  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n\t  var nextChildren;\n\t  var hasId;\n\t  prepareToReadContext(workInProgress, renderLanes);\n\n\t  {\n\t    markComponentRenderStarted(workInProgress);\n\t  }\n\n\t  {\n\t    ReactCurrentOwner$1.current = workInProgress;\n\t    setIsRendering(true);\n\t    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n\t    hasId = checkDidRenderIdHook();\n\n\t    if ( workInProgress.mode & StrictLegacyMode) {\n\t      setIsStrictModeForDevtools(true);\n\n\t      try {\n\t        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n\t        hasId = checkDidRenderIdHook();\n\t      } finally {\n\t        setIsStrictModeForDevtools(false);\n\t      }\n\t    }\n\n\t    setIsRendering(false);\n\t  }\n\n\t  {\n\t    markComponentRenderStopped();\n\t  }\n\n\t  if (current !== null && !didReceiveUpdate) {\n\t    bailoutHooks(current, workInProgress, renderLanes);\n\t    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t  }\n\n\t  if (getIsHydrating() && hasId) {\n\t    pushMaterializedTreeId(workInProgress);\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n\t  if (current === null) {\n\t    var type = Component.type;\n\n\t    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n\t    Component.defaultProps === undefined) {\n\t      var resolvedType = type;\n\n\t      {\n\t        resolvedType = resolveFunctionForHotReloading(type);\n\t      } // If this is a plain function component without default props,\n\t      // and with only the default shallow comparison, we upgrade it\n\t      // to a SimpleMemoComponent to allow fast path updates.\n\n\n\t      workInProgress.tag = SimpleMemoComponent;\n\t      workInProgress.type = resolvedType;\n\n\t      {\n\t        validateFunctionComponentInDev(workInProgress, type);\n\t      }\n\n\t      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n\t    }\n\n\t    {\n\t      var innerPropTypes = type.propTypes;\n\n\t      if (innerPropTypes) {\n\t        // Inner memo component props aren't currently validated in createElement.\n\t        // We could move it there, but we'd still need this for lazy code path.\n\t        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n\t        'prop', getComponentNameFromType(type));\n\t      }\n\t    }\n\n\t    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n\t    child.ref = workInProgress.ref;\n\t    child.return = workInProgress;\n\t    workInProgress.child = child;\n\t    return child;\n\t  }\n\n\t  {\n\t    var _type = Component.type;\n\t    var _innerPropTypes = _type.propTypes;\n\n\t    if (_innerPropTypes) {\n\t      // Inner memo component props aren't currently validated in createElement.\n\t      // We could move it there, but we'd still need this for lazy code path.\n\t      checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n\t      'prop', getComponentNameFromType(_type));\n\t    }\n\t  }\n\n\t  var currentChild = current.child; // This is always exactly one child\n\n\t  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n\t  if (!hasScheduledUpdateOrContext) {\n\t    // This will be the props with resolved defaultProps,\n\t    // unlike current.memoizedProps which will be the unresolved ones.\n\t    var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n\t    var compare = Component.compare;\n\t    compare = compare !== null ? compare : shallowEqual;\n\n\t    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n\t      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t    }\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\t  var newChild = createWorkInProgress(currentChild, nextProps);\n\t  newChild.ref = workInProgress.ref;\n\t  newChild.return = workInProgress;\n\t  workInProgress.child = newChild;\n\t  return newChild;\n\t}\n\n\tfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n\t  // TODO: current can be non-null here even if the component\n\t  // hasn't yet mounted. This happens when the inner render suspends.\n\t  // We'll need to figure out if this is fine or can cause issues.\n\t  {\n\t    if (workInProgress.type !== workInProgress.elementType) {\n\t      // Lazy component props can't be validated in createElement\n\t      // because they're only guaranteed to be resolved here.\n\t      var outerMemoType = workInProgress.elementType;\n\n\t      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n\t        // We warn when you define propTypes on lazy()\n\t        // so let's just skip over it to find memo() outer wrapper.\n\t        // Inner props for memo are validated later.\n\t        var lazyComponent = outerMemoType;\n\t        var payload = lazyComponent._payload;\n\t        var init = lazyComponent._init;\n\n\t        try {\n\t          outerMemoType = init(payload);\n\t        } catch (x) {\n\t          outerMemoType = null;\n\t        } // Inner propTypes will be validated in the function component path.\n\n\n\t        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n\t        if (outerPropTypes) {\n\t          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n\t          'prop', getComponentNameFromType(outerMemoType));\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  if (current !== null) {\n\t    var prevProps = current.memoizedProps;\n\n\t    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n\t     workInProgress.type === current.type )) {\n\t      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n\t      // would during a normal fiber bailout.\n\t      //\n\t      // We don't have strong guarantees that the props object is referentially\n\t      // equal during updates where we can't bail out anyway — like if the props\n\t      // are shallowly equal, but there's a local state or context update in the\n\t      // same batch.\n\t      //\n\t      // However, as a principle, we should aim to make the behavior consistent\n\t      // across different ways of memoizing a component. For example, React.memo\n\t      // has a different internal Fiber layout if you pass a normal function\n\t      // component (SimpleMemoComponent) versus if you pass a different type\n\t      // like forwardRef (MemoComponent). But this is an implementation detail.\n\t      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n\t      // affect whether the props object is reused during a bailout.\n\n\t      workInProgress.pendingProps = nextProps = prevProps;\n\n\t      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n\t        // The pending lanes were cleared at the beginning of beginWork. We're\n\t        // about to bail out, but there might be other lanes that weren't\n\t        // included in the current render. Usually, the priority level of the\n\t        // remaining updates is accumulated during the evaluation of the\n\t        // component (i.e. when processing the update queue). But since since\n\t        // we're bailing out early *without* evaluating the component, we need\n\t        // to account for it here, too. Reset to the value of the current fiber.\n\t        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n\t        // because a MemoComponent fiber does not have hooks or an update queue;\n\t        // rather, it wraps around an inner component, which may or may not\n\t        // contains hooks.\n\t        // TODO: Move the reset at in beginWork out of the common path so that\n\t        // this is no longer necessary.\n\t        workInProgress.lanes = current.lanes;\n\t        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n\t        // This is a special case that only exists for legacy mode.\n\t        // See https://github.com/facebook/react/pull/19216.\n\t        didReceiveUpdate = true;\n\t      }\n\t    }\n\t  }\n\n\t  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n\t}\n\n\tfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n\t  var nextProps = workInProgress.pendingProps;\n\t  var nextChildren = nextProps.children;\n\t  var prevState = current !== null ? current.memoizedState : null;\n\n\t  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {\n\t    // Rendering a hidden tree.\n\t    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t      // In legacy sync mode, don't defer the subtree. Render it now.\n\t      // TODO: Consider how Offscreen should work with transitions in the future\n\t      var nextState = {\n\t        baseLanes: NoLanes,\n\t        cachePool: null,\n\t        transitions: null\n\t      };\n\t      workInProgress.memoizedState = nextState;\n\n\t      pushRenderLanes(workInProgress, renderLanes);\n\t    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n\t      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n\t      // and resume this tree later.\n\n\t      var nextBaseLanes;\n\n\t      if (prevState !== null) {\n\t        var prevBaseLanes = prevState.baseLanes;\n\t        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n\t      } else {\n\t        nextBaseLanes = renderLanes;\n\t      } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n\t      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n\t      var _nextState = {\n\t        baseLanes: nextBaseLanes,\n\t        cachePool: spawnedCachePool,\n\t        transitions: null\n\t      };\n\t      workInProgress.memoizedState = _nextState;\n\t      workInProgress.updateQueue = null;\n\t      // to avoid a push/pop misalignment.\n\n\n\t      pushRenderLanes(workInProgress, nextBaseLanes);\n\n\t      return null;\n\t    } else {\n\t      // This is the second render. The surrounding visible content has already\n\t      // committed. Now we resume rendering the hidden tree.\n\t      // Rendering at offscreen, so we can clear the base lanes.\n\t      var _nextState2 = {\n\t        baseLanes: NoLanes,\n\t        cachePool: null,\n\t        transitions: null\n\t      };\n\t      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n\t      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n\n\t      pushRenderLanes(workInProgress, subtreeRenderLanes);\n\t    }\n\t  } else {\n\t    // Rendering a visible tree.\n\t    var _subtreeRenderLanes;\n\n\t    if (prevState !== null) {\n\t      // We're going from hidden -> visible.\n\t      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n\t      workInProgress.memoizedState = null;\n\t    } else {\n\t      // We weren't previously hidden, and we still aren't, so there's nothing\n\t      // special to do. Need to push to the stack regardless, though, to avoid\n\t      // a push/pop misalignment.\n\t      _subtreeRenderLanes = renderLanes;\n\t    }\n\n\t    pushRenderLanes(workInProgress, _subtreeRenderLanes);\n\t  }\n\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t} // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\n\tfunction updateFragment(current, workInProgress, renderLanes) {\n\t  var nextChildren = workInProgress.pendingProps;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateMode(current, workInProgress, renderLanes) {\n\t  var nextChildren = workInProgress.pendingProps.children;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateProfiler(current, workInProgress, renderLanes) {\n\t  {\n\t    workInProgress.flags |= Update;\n\n\t    {\n\t      // Reset effect durations for the next eventual effect phase.\n\t      // These are reset during render to allow the DevTools commit hook a chance to read them,\n\t      var stateNode = workInProgress.stateNode;\n\t      stateNode.effectDuration = 0;\n\t      stateNode.passiveEffectDuration = 0;\n\t    }\n\t  }\n\n\t  var nextProps = workInProgress.pendingProps;\n\t  var nextChildren = nextProps.children;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction markRef(current, workInProgress) {\n\t  var ref = workInProgress.ref;\n\n\t  if (current === null && ref !== null || current !== null && current.ref !== ref) {\n\t    // Schedule a Ref effect\n\t    workInProgress.flags |= Ref;\n\n\t    {\n\t      workInProgress.flags |= RefStatic;\n\t    }\n\t  }\n\t}\n\n\tfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n\t  {\n\t    if (workInProgress.type !== workInProgress.elementType) {\n\t      // Lazy component props can't be validated in createElement\n\t      // because they're only guaranteed to be resolved here.\n\t      var innerPropTypes = Component.propTypes;\n\n\t      if (innerPropTypes) {\n\t        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n\t        'prop', getComponentNameFromType(Component));\n\t      }\n\t    }\n\t  }\n\n\t  var context;\n\n\t  {\n\t    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n\t    context = getMaskedContext(workInProgress, unmaskedContext);\n\t  }\n\n\t  var nextChildren;\n\t  var hasId;\n\t  prepareToReadContext(workInProgress, renderLanes);\n\n\t  {\n\t    markComponentRenderStarted(workInProgress);\n\t  }\n\n\t  {\n\t    ReactCurrentOwner$1.current = workInProgress;\n\t    setIsRendering(true);\n\t    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n\t    hasId = checkDidRenderIdHook();\n\n\t    if ( workInProgress.mode & StrictLegacyMode) {\n\t      setIsStrictModeForDevtools(true);\n\n\t      try {\n\t        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n\t        hasId = checkDidRenderIdHook();\n\t      } finally {\n\t        setIsStrictModeForDevtools(false);\n\t      }\n\t    }\n\n\t    setIsRendering(false);\n\t  }\n\n\t  {\n\t    markComponentRenderStopped();\n\t  }\n\n\t  if (current !== null && !didReceiveUpdate) {\n\t    bailoutHooks(current, workInProgress, renderLanes);\n\t    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t  }\n\n\t  if (getIsHydrating() && hasId) {\n\t    pushMaterializedTreeId(workInProgress);\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n\t  {\n\t    // This is used by DevTools to force a boundary to error.\n\t    switch (shouldError(workInProgress)) {\n\t      case false:\n\t        {\n\t          var _instance = workInProgress.stateNode;\n\t          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n\t          // Is there a better way to do this?\n\n\t          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n\t          var state = tempInstance.state;\n\n\t          _instance.updater.enqueueSetState(_instance, state, null);\n\n\t          break;\n\t        }\n\n\t      case true:\n\t        {\n\t          workInProgress.flags |= DidCapture;\n\t          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n\t          var error$1 = new Error('Simulated error coming from DevTools');\n\t          var lane = pickArbitraryLane(renderLanes);\n\t          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n\t          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n\t          enqueueCapturedUpdate(workInProgress, update);\n\t          break;\n\t        }\n\t    }\n\n\t    if (workInProgress.type !== workInProgress.elementType) {\n\t      // Lazy component props can't be validated in createElement\n\t      // because they're only guaranteed to be resolved here.\n\t      var innerPropTypes = Component.propTypes;\n\n\t      if (innerPropTypes) {\n\t        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n\t        'prop', getComponentNameFromType(Component));\n\t      }\n\t    }\n\t  } // Push context providers early to prevent context stack mismatches.\n\t  // During mounting we don't know the child context yet as the instance doesn't exist.\n\t  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n\t  var hasContext;\n\n\t  if (isContextProvider(Component)) {\n\t    hasContext = true;\n\t    pushContextProvider(workInProgress);\n\t  } else {\n\t    hasContext = false;\n\t  }\n\n\t  prepareToReadContext(workInProgress, renderLanes);\n\t  var instance = workInProgress.stateNode;\n\t  var shouldUpdate;\n\n\t  if (instance === null) {\n\t    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n\t    constructClassInstance(workInProgress, Component, nextProps);\n\t    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\t    shouldUpdate = true;\n\t  } else if (current === null) {\n\t    // In a resume, we'll already have an instance we can reuse.\n\t    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\t  } else {\n\t    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n\t  }\n\n\t  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n\t  {\n\t    var inst = workInProgress.stateNode;\n\n\t    if (shouldUpdate && inst.props !== nextProps) {\n\t      if (!didWarnAboutReassigningProps) {\n\t        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n\t      }\n\n\t      didWarnAboutReassigningProps = true;\n\t    }\n\t  }\n\n\t  return nextUnitOfWork;\n\t}\n\n\tfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n\t  // Refs should update even if shouldComponentUpdate returns false\n\t  markRef(current, workInProgress);\n\t  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n\t  if (!shouldUpdate && !didCaptureError) {\n\t    // Context providers should defer to sCU for rendering\n\t    if (hasContext) {\n\t      invalidateContextProvider(workInProgress, Component, false);\n\t    }\n\n\t    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t  }\n\n\t  var instance = workInProgress.stateNode; // Rerender\n\n\t  ReactCurrentOwner$1.current = workInProgress;\n\t  var nextChildren;\n\n\t  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n\t    // If we captured an error, but getDerivedStateFromError is not defined,\n\t    // unmount all the children. componentDidCatch will schedule an update to\n\t    // re-render a fallback. This is temporary until we migrate everyone to\n\t    // the new API.\n\t    // TODO: Warn in a future release.\n\t    nextChildren = null;\n\n\t    {\n\t      stopProfilerTimerIfRunning();\n\t    }\n\t  } else {\n\t    {\n\t      markComponentRenderStarted(workInProgress);\n\t    }\n\n\t    {\n\t      setIsRendering(true);\n\t      nextChildren = instance.render();\n\n\t      if ( workInProgress.mode & StrictLegacyMode) {\n\t        setIsStrictModeForDevtools(true);\n\n\t        try {\n\t          instance.render();\n\t        } finally {\n\t          setIsStrictModeForDevtools(false);\n\t        }\n\t      }\n\n\t      setIsRendering(false);\n\t    }\n\n\t    {\n\t      markComponentRenderStopped();\n\t    }\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\n\t  if (current !== null && didCaptureError) {\n\t    // If we're recovering from an error, reconcile without reusing any of\n\t    // the existing children. Conceptually, the normal children and the children\n\t    // that are shown on error are two different sets, so we shouldn't reuse\n\t    // normal children even if their identities match.\n\t    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n\t  } else {\n\t    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  } // Memoize state using the values we just used to render.\n\t  // TODO: Restructure so we never read values from the instance.\n\n\n\t  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n\t  if (hasContext) {\n\t    invalidateContextProvider(workInProgress, Component, true);\n\t  }\n\n\t  return workInProgress.child;\n\t}\n\n\tfunction pushHostRootContext(workInProgress) {\n\t  var root = workInProgress.stateNode;\n\n\t  if (root.pendingContext) {\n\t    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n\t  } else if (root.context) {\n\t    // Should always be set\n\t    pushTopLevelContextObject(workInProgress, root.context, false);\n\t  }\n\n\t  pushHostContainer(workInProgress, root.containerInfo);\n\t}\n\n\tfunction updateHostRoot(current, workInProgress, renderLanes) {\n\t  pushHostRootContext(workInProgress);\n\n\t  if (current === null) {\n\t    throw new Error('Should have a current fiber. This is a bug in React.');\n\t  }\n\n\t  var nextProps = workInProgress.pendingProps;\n\t  var prevState = workInProgress.memoizedState;\n\t  var prevChildren = prevState.element;\n\t  cloneUpdateQueue(current, workInProgress);\n\t  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n\t  var nextState = workInProgress.memoizedState;\n\t  workInProgress.stateNode;\n\t  // being called \"element\".\n\n\n\t  var nextChildren = nextState.element;\n\n\t  if (supportsHydration && prevState.isDehydrated) {\n\t    // This is a hydration root whose shell has not yet hydrated. We should\n\t    // attempt to hydrate.\n\t    // Flip isDehydrated to false to indicate that when this render\n\t    // finishes, the root will no longer be dehydrated.\n\t    var overrideState = {\n\t      element: nextChildren,\n\t      isDehydrated: false,\n\t      cache: nextState.cache,\n\t      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n\t      transitions: nextState.transitions\n\t    };\n\t    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n\t    // have reducer functions so it doesn't need rebasing.\n\n\t    updateQueue.baseState = overrideState;\n\t    workInProgress.memoizedState = overrideState;\n\n\t    if (workInProgress.flags & ForceClientRender) {\n\t      // Something errored during a previous attempt to hydrate the shell, so we\n\t      // forced a client render.\n\t      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);\n\t      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n\t    } else if (nextChildren !== prevChildren) {\n\t      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\n\n\t      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n\t    } else {\n\t      // The outermost shell has not hydrated yet. Start hydrating.\n\t      enterHydrationState(workInProgress);\n\n\t      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n\t      workInProgress.child = child;\n\t      var node = child;\n\n\t      while (node) {\n\t        // Mark each child as hydrating. This is a fast path to know whether this\n\t        // tree is part of a hydrating tree. This is used to determine if a child\n\t        // node has fully mounted yet, and for scheduling event replaying.\n\t        // Conceptually this is similar to Placement in that a new subtree is\n\t        // inserted into the React tree here. It just happens to not need DOM\n\t        // mutations because it already exists.\n\t        node.flags = node.flags & ~Placement | Hydrating;\n\t        node = node.sibling;\n\t      }\n\t    }\n\t  } else {\n\t    // Root is not dehydrated. Either this is a client-only root, or it\n\t    // already hydrated.\n\t    resetHydrationState();\n\n\t    if (nextChildren === prevChildren) {\n\t      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t    }\n\n\t    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  }\n\n\t  return workInProgress.child;\n\t}\n\n\tfunction mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n\t  // Revert to client rendering.\n\t  resetHydrationState();\n\t  queueHydrationError(recoverableError);\n\t  workInProgress.flags |= ForceClientRender;\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateHostComponent(current, workInProgress, renderLanes) {\n\t  pushHostContext(workInProgress);\n\n\t  if (current === null) {\n\t    tryToClaimNextHydratableInstance(workInProgress);\n\t  }\n\n\t  var type = workInProgress.type;\n\t  var nextProps = workInProgress.pendingProps;\n\t  var prevProps = current !== null ? current.memoizedProps : null;\n\t  var nextChildren = nextProps.children;\n\t  var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n\t  if (isDirectTextChild) {\n\t    // We special case a direct text child of a host node. This is a common\n\t    // case. We won't handle it as a reified child. We will instead handle\n\t    // this in the host environment that also has access to this prop. That\n\t    // avoids allocating another HostText fiber and traversing it.\n\t    nextChildren = null;\n\t  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n\t    // If we're switching from a direct text child to a normal child, or to\n\t    // empty, we need to schedule the text content to be reset.\n\t    workInProgress.flags |= ContentReset;\n\t  }\n\n\t  markRef(current, workInProgress);\n\t  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction updateHostText(current, workInProgress) {\n\t  if (current === null) {\n\t    tryToClaimNextHydratableInstance(workInProgress);\n\t  } // Nothing to do here. This is terminal. We'll do the completion step\n\t  // immediately after.\n\n\n\t  return null;\n\t}\n\n\tfunction mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n\t  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\t  var props = workInProgress.pendingProps;\n\t  var lazyComponent = elementType;\n\t  var payload = lazyComponent._payload;\n\t  var init = lazyComponent._init;\n\t  var Component = init(payload); // Store the unwrapped component in the type.\n\n\t  workInProgress.type = Component;\n\t  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n\t  var resolvedProps = resolveDefaultProps(Component, props);\n\t  var child;\n\n\t  switch (resolvedTag) {\n\t    case FunctionComponent:\n\t      {\n\t        {\n\t          validateFunctionComponentInDev(workInProgress, Component);\n\t          workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n\t        }\n\n\t        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n\t        return child;\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        {\n\t          workInProgress.type = Component = resolveClassForHotReloading(Component);\n\t        }\n\n\t        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n\t        return child;\n\t      }\n\n\t    case ForwardRef:\n\t      {\n\t        {\n\t          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n\t        }\n\n\t        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n\t        return child;\n\t      }\n\n\t    case MemoComponent:\n\t      {\n\t        {\n\t          if (workInProgress.type !== workInProgress.elementType) {\n\t            var outerPropTypes = Component.propTypes;\n\n\t            if (outerPropTypes) {\n\t              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n\t              'prop', getComponentNameFromType(Component));\n\t            }\n\t          }\n\t        }\n\n\t        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n\t        renderLanes);\n\t        return child;\n\t      }\n\t  }\n\n\t  var hint = '';\n\n\t  {\n\t    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n\t      hint = ' Did you wrap a component in React.lazy() more than once?';\n\t    }\n\t  } // This message intentionally doesn't mention ForwardRef or MemoComponent\n\t  // because the fact that it's a separate type of work is an\n\t  // implementation detail.\n\n\n\t  throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n\t}\n\n\tfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n\t  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n\t  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n\t  // Push context providers early to prevent context stack mismatches.\n\t  // During mounting we don't know the child context yet as the instance doesn't exist.\n\t  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\t  var hasContext;\n\n\t  if (isContextProvider(Component)) {\n\t    hasContext = true;\n\t    pushContextProvider(workInProgress);\n\t  } else {\n\t    hasContext = false;\n\t  }\n\n\t  prepareToReadContext(workInProgress, renderLanes);\n\t  constructClassInstance(workInProgress, Component, nextProps);\n\t  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\t  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n\t}\n\n\tfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n\t  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\t  var props = workInProgress.pendingProps;\n\t  var context;\n\n\t  {\n\t    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n\t    context = getMaskedContext(workInProgress, unmaskedContext);\n\t  }\n\n\t  prepareToReadContext(workInProgress, renderLanes);\n\t  var value;\n\t  var hasId;\n\n\t  {\n\t    markComponentRenderStarted(workInProgress);\n\t  }\n\n\t  {\n\t    if (Component.prototype && typeof Component.prototype.render === 'function') {\n\t      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutBadClass[componentName]) {\n\t        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n\t        didWarnAboutBadClass[componentName] = true;\n\t      }\n\t    }\n\n\t    if (workInProgress.mode & StrictLegacyMode) {\n\t      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n\t    }\n\n\t    setIsRendering(true);\n\t    ReactCurrentOwner$1.current = workInProgress;\n\t    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n\t    hasId = checkDidRenderIdHook();\n\t    setIsRendering(false);\n\t  }\n\n\t  {\n\t    markComponentRenderStopped();\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\n\t  {\n\t    // Support for module components is deprecated and is removed behind a flag.\n\t    // Whether or not it would crash later, we want to show a good message in DEV first.\n\t    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n\t      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutModulePatternComponent[_componentName]) {\n\t        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n\t        didWarnAboutModulePatternComponent[_componentName] = true;\n\t      }\n\t    }\n\t  }\n\n\t  if ( // Run these checks in production only if the flag is off.\n\t  // Eventually we'll delete this branch altogether.\n\t   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n\t    {\n\t      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n\t        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n\t        didWarnAboutModulePatternComponent[_componentName2] = true;\n\t      }\n\t    } // Proceed under the assumption that this is a class instance\n\n\n\t    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n\t    workInProgress.memoizedState = null;\n\t    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n\t    // During mounting we don't know the child context yet as the instance doesn't exist.\n\t    // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\t    var hasContext = false;\n\n\t    if (isContextProvider(Component)) {\n\t      hasContext = true;\n\t      pushContextProvider(workInProgress);\n\t    } else {\n\t      hasContext = false;\n\t    }\n\n\t    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n\t    initializeUpdateQueue(workInProgress);\n\t    adoptClassInstance(workInProgress, value);\n\t    mountClassInstance(workInProgress, Component, props, renderLanes);\n\t    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n\t  } else {\n\t    // Proceed under the assumption that this is a function component\n\t    workInProgress.tag = FunctionComponent;\n\n\t    {\n\n\t      if ( workInProgress.mode & StrictLegacyMode) {\n\t        setIsStrictModeForDevtools(true);\n\n\t        try {\n\t          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n\t          hasId = checkDidRenderIdHook();\n\t        } finally {\n\t          setIsStrictModeForDevtools(false);\n\t        }\n\t      }\n\t    }\n\n\t    if (getIsHydrating() && hasId) {\n\t      pushMaterializedTreeId(workInProgress);\n\t    }\n\n\t    reconcileChildren(null, workInProgress, value, renderLanes);\n\n\t    {\n\t      validateFunctionComponentInDev(workInProgress, Component);\n\t    }\n\n\t    return workInProgress.child;\n\t  }\n\t}\n\n\tfunction validateFunctionComponentInDev(workInProgress, Component) {\n\t  {\n\t    if (Component) {\n\t      if (Component.childContextTypes) {\n\t        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n\t      }\n\t    }\n\n\t    if (workInProgress.ref !== null) {\n\t      var info = '';\n\t      var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n\t      if (ownerName) {\n\t        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n\t      }\n\n\t      var warningKey = ownerName || '';\n\t      var debugSource = workInProgress._debugSource;\n\n\t      if (debugSource) {\n\t        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n\t      }\n\n\t      if (!didWarnAboutFunctionRefs[warningKey]) {\n\t        didWarnAboutFunctionRefs[warningKey] = true;\n\n\t        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n\t      }\n\t    }\n\n\t    if (typeof Component.getDerivedStateFromProps === 'function') {\n\t      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n\t        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n\t        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n\t      }\n\t    }\n\n\t    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n\t      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n\t      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n\t        error('%s: Function components do not support contextType.', _componentName4);\n\n\t        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar SUSPENDED_MARKER = {\n\t  dehydrated: null,\n\t  treeContext: null,\n\t  retryLane: NoLane\n\t};\n\n\tfunction mountSuspenseOffscreenState(renderLanes) {\n\t  return {\n\t    baseLanes: renderLanes,\n\t    cachePool: getSuspendedCache(),\n\t    transitions: null\n\t  };\n\t}\n\n\tfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n\t  var cachePool = null;\n\n\t  return {\n\t    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n\t    cachePool: cachePool,\n\t    transitions: prevOffscreenState.transitions\n\t  };\n\t} // TODO: Probably should inline this back\n\n\n\tfunction shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n\t  // If we're already showing a fallback, there are cases where we need to\n\t  // remain on that fallback regardless of whether the content has resolved.\n\t  // For example, SuspenseList coordinates when nested content appears.\n\t  if (current !== null) {\n\t    var suspenseState = current.memoizedState;\n\n\t    if (suspenseState === null) {\n\t      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n\t      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n\t      // Note: This is a factoring smell. Can't remain on a fallback if there's\n\t      // no fallback to remain on.\n\t      return false;\n\t    }\n\t  } // Not currently showing content. Consult the Suspense context.\n\n\n\t  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\t}\n\n\tfunction getRemainingWorkInPrimaryTree(current, renderLanes) {\n\t  // TODO: Should not remove render lanes that were pinged during this render\n\t  return removeLanes(current.childLanes, renderLanes);\n\t}\n\n\tfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n\t  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n\t  {\n\t    if (shouldSuspend(workInProgress)) {\n\t      workInProgress.flags |= DidCapture;\n\t    }\n\t  }\n\n\t  var suspenseContext = suspenseStackCursor.current;\n\t  var showFallback = false;\n\t  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n\t  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n\t    // Something in this boundary's subtree already suspended. Switch to\n\t    // rendering the fallback children.\n\t    showFallback = true;\n\t    workInProgress.flags &= ~DidCapture;\n\t  } else {\n\t    // Attempting the main content\n\t    if (current === null || current.memoizedState !== null) {\n\t      // This is a new mount or this boundary is already showing a fallback state.\n\t      // Mark this subtree context as having at least one invisible parent that could\n\t      // handle the fallback state.\n\t      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n\t      {\n\t        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n\t      }\n\t    }\n\t  }\n\n\t  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\t  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n\t  // boundary's children. This involves some custom reconciliation logic. Two\n\t  // main reasons this is so complicated.\n\t  //\n\t  // First, Legacy Mode has different semantics for backwards compatibility. The\n\t  // primary tree will commit in an inconsistent state, so when we do the\n\t  // second pass to render the fallback, we do some exceedingly, uh, clever\n\t  // hacks to make that not totally break. Like transferring effects and\n\t  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n\t  // because we bailout on the primary tree completely and leave it in its old\n\t  // state, no effects. Same as what we do for Offscreen (except that\n\t  // Offscreen doesn't have the first render pass).\n\t  //\n\t  // Second is hydration. During hydration, the Suspense fiber has a slightly\n\t  // different layout, where the child points to a dehydrated fragment, which\n\t  // contains the DOM rendered by the server.\n\t  //\n\t  // Third, even if you set all that aside, Suspense is like error boundaries in\n\t  // that we first we try to render one tree, and if that fails, we render again\n\t  // and switch to a different tree. Like a try/catch block. So we have to track\n\t  // which branch we're currently rendering. Ideally we would model this using\n\t  // a stack.\n\n\t  if (current === null) {\n\t    // Initial mount\n\t    // Special path for hydration\n\t    // If we're currently hydrating, try to hydrate this boundary.\n\t    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n\t    var suspenseState = workInProgress.memoizedState;\n\n\t    if (suspenseState !== null) {\n\t      var dehydrated = suspenseState.dehydrated;\n\n\t      if (dehydrated !== null) {\n\t        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n\t      }\n\t    }\n\n\t    var nextPrimaryChildren = nextProps.children;\n\t    var nextFallbackChildren = nextProps.fallback;\n\n\t    if (showFallback) {\n\t      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n\t      var primaryChildFragment = workInProgress.child;\n\t      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n\t      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n\t      return fallbackFragment;\n\t    } else {\n\t      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n\t    }\n\t  } else {\n\t    // This is an update.\n\t    // Special path for hydration\n\t    var prevState = current.memoizedState;\n\n\t    if (prevState !== null) {\n\t      var _dehydrated = prevState.dehydrated;\n\n\t      if (_dehydrated !== null) {\n\t        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);\n\t      }\n\t    }\n\n\t    if (showFallback) {\n\t      var _nextFallbackChildren = nextProps.fallback;\n\t      var _nextPrimaryChildren = nextProps.children;\n\t      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n\t      var _primaryChildFragment2 = workInProgress.child;\n\t      var prevOffscreenState = current.child.memoizedState;\n\t      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n\n\t      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n\t      workInProgress.memoizedState = SUSPENDED_MARKER;\n\t      return fallbackChildFragment;\n\t    } else {\n\t      var _nextPrimaryChildren2 = nextProps.children;\n\n\t      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n\n\t      workInProgress.memoizedState = null;\n\t      return _primaryChildFragment3;\n\t    }\n\t  }\n\t}\n\n\tfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n\t  var mode = workInProgress.mode;\n\t  var primaryChildProps = {\n\t    mode: 'visible',\n\t    children: primaryChildren\n\t  };\n\t  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n\t  primaryChildFragment.return = workInProgress;\n\t  workInProgress.child = primaryChildFragment;\n\t  return primaryChildFragment;\n\t}\n\n\tfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n\t  var mode = workInProgress.mode;\n\t  var progressedPrimaryFragment = workInProgress.child;\n\t  var primaryChildProps = {\n\t    mode: 'hidden',\n\t    children: primaryChildren\n\t  };\n\t  var primaryChildFragment;\n\t  var fallbackChildFragment;\n\n\t  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n\t    // In legacy mode, we commit the primary tree as if it successfully\n\t    // completed, even though it's in an inconsistent state.\n\t    primaryChildFragment = progressedPrimaryFragment;\n\t    primaryChildFragment.childLanes = NoLanes;\n\t    primaryChildFragment.pendingProps = primaryChildProps;\n\n\t    if ( workInProgress.mode & ProfileMode) {\n\t      // Reset the durations from the first pass so they aren't included in the\n\t      // final amounts. This seems counterintuitive, since we're intentionally\n\t      // not measuring part of the render phase, but this makes it match what we\n\t      // do in Concurrent Mode.\n\t      primaryChildFragment.actualDuration = 0;\n\t      primaryChildFragment.actualStartTime = -1;\n\t      primaryChildFragment.selfBaseDuration = 0;\n\t      primaryChildFragment.treeBaseDuration = 0;\n\t    }\n\n\t    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n\t  } else {\n\t    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n\t    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n\t  }\n\n\t  primaryChildFragment.return = workInProgress;\n\t  fallbackChildFragment.return = workInProgress;\n\t  primaryChildFragment.sibling = fallbackChildFragment;\n\t  workInProgress.child = primaryChildFragment;\n\t  return fallbackChildFragment;\n\t}\n\n\tfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n\t  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n\t  // this wrapper function to constrain it.\n\t  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n\t}\n\n\tfunction updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n\t  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n\t  // wrapper function to constrain it.\n\t  return createWorkInProgress(current, offscreenProps);\n\t}\n\n\tfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n\t  var currentPrimaryChildFragment = current.child;\n\t  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n\t  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n\t    mode: 'visible',\n\t    children: primaryChildren\n\t  });\n\n\t  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t    primaryChildFragment.lanes = renderLanes;\n\t  }\n\n\t  primaryChildFragment.return = workInProgress;\n\t  primaryChildFragment.sibling = null;\n\n\t  if (currentFallbackChildFragment !== null) {\n\t    // Delete the fallback child fragment\n\t    var deletions = workInProgress.deletions;\n\n\t    if (deletions === null) {\n\t      workInProgress.deletions = [currentFallbackChildFragment];\n\t      workInProgress.flags |= ChildDeletion;\n\t    } else {\n\t      deletions.push(currentFallbackChildFragment);\n\t    }\n\t  }\n\n\t  workInProgress.child = primaryChildFragment;\n\t  return primaryChildFragment;\n\t}\n\n\tfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n\t  var mode = workInProgress.mode;\n\t  var currentPrimaryChildFragment = current.child;\n\t  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n\t  var primaryChildProps = {\n\t    mode: 'hidden',\n\t    children: primaryChildren\n\t  };\n\t  var primaryChildFragment;\n\n\t  if ( // In legacy mode, we commit the primary tree as if it successfully\n\t  // completed, even though it's in an inconsistent state.\n\t  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n\t  // already cloned. In legacy mode, the only case where this isn't true is\n\t  // when DevTools forces us to display a fallback; we skip the first render\n\t  // pass entirely and go straight to rendering the fallback. (In Concurrent\n\t  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n\t  // only codepath.)\n\t  workInProgress.child !== currentPrimaryChildFragment) {\n\t    var progressedPrimaryFragment = workInProgress.child;\n\t    primaryChildFragment = progressedPrimaryFragment;\n\t    primaryChildFragment.childLanes = NoLanes;\n\t    primaryChildFragment.pendingProps = primaryChildProps;\n\n\t    if ( workInProgress.mode & ProfileMode) {\n\t      // Reset the durations from the first pass so they aren't included in the\n\t      // final amounts. This seems counterintuitive, since we're intentionally\n\t      // not measuring part of the render phase, but this makes it match what we\n\t      // do in Concurrent Mode.\n\t      primaryChildFragment.actualDuration = 0;\n\t      primaryChildFragment.actualStartTime = -1;\n\t      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n\t      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n\t    } // The fallback fiber was added as a deletion during the first pass.\n\t    // However, since we're going to remain on the fallback, we no longer want\n\t    // to delete it.\n\n\n\t    workInProgress.deletions = null;\n\t  } else {\n\t    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n\t    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n\t    // the current tree; see previous branch.)\n\n\t    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n\t  }\n\n\t  var fallbackChildFragment;\n\n\t  if (currentFallbackChildFragment !== null) {\n\t    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n\t  } else {\n\t    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n\t    // mounted but this is a new fiber.\n\n\t    fallbackChildFragment.flags |= Placement;\n\t  }\n\n\t  fallbackChildFragment.return = workInProgress;\n\t  primaryChildFragment.return = workInProgress;\n\t  primaryChildFragment.sibling = fallbackChildFragment;\n\t  workInProgress.child = primaryChildFragment;\n\t  return fallbackChildFragment;\n\t}\n\n\tfunction retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n\t  // Falling back to client rendering. Because this has performance\n\t  // implications, it's considered a recoverable error, even though the user\n\t  // likely won't observe anything wrong with the UI.\n\t  //\n\t  // The error is passed in as an argument to enforce that every caller provide\n\t  // a custom message, or explicitly opt out (currently the only path that opts\n\t  // out is legacy mode; every concurrent path provides an error).\n\t  if (recoverableError !== null) {\n\t    queueHydrationError(recoverableError);\n\t  } // This will add the old fiber to the deletion list\n\n\n\t  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n\t  var nextProps = workInProgress.pendingProps;\n\t  var primaryChildren = nextProps.children;\n\t  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n\t  // mounted but this is a new fiber.\n\n\t  primaryChildFragment.flags |= Placement;\n\t  workInProgress.memoizedState = null;\n\t  return primaryChildFragment;\n\t}\n\n\tfunction mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n\t  var fiberMode = workInProgress.mode;\n\t  var primaryChildProps = {\n\t    mode: 'visible',\n\t    children: primaryChildren\n\t  };\n\t  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n\t  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n\t  // boundary) already mounted but this is a new fiber.\n\n\t  fallbackChildFragment.flags |= Placement;\n\t  primaryChildFragment.return = workInProgress;\n\t  fallbackChildFragment.return = workInProgress;\n\t  primaryChildFragment.sibling = fallbackChildFragment;\n\t  workInProgress.child = primaryChildFragment;\n\n\t  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n\t    // We will have dropped the effect list which contains the\n\t    // deletion. We need to reconcile to delete the current child.\n\t    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\t  }\n\n\t  return fallbackChildFragment;\n\t}\n\n\tfunction mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n\t  // During the first pass, we'll bail out and not drill into the children.\n\t  // Instead, we'll leave the content in place and try to hydrate it later.\n\t  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t    {\n\t      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n\t    }\n\n\t    workInProgress.lanes = laneToLanes(SyncLane);\n\t  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n\t    // This is a client-only boundary. Since we won't get any content from the server\n\t    // for this, we need to schedule that at a higher priority based on when it would\n\t    // have timed out. In theory we could render it in this pass but it would have the\n\t    // wrong priority associated with it and will prevent hydration of parent path.\n\t    // Instead, we'll leave work left on it to render it in a separate commit.\n\t    // TODO This time should be the time at which the server rendered response that is\n\t    // a parent to this boundary was displayed. However, since we currently don't have\n\t    // a protocol to transfer that time, we'll just estimate it by using the current\n\t    // time. This will mean that Suspense timeouts are slightly shifted to later than\n\t    // they should be.\n\t    // Schedule a normal pri update to render this content.\n\t    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n\t  } else {\n\t    // We'll continue hydrating the rest at offscreen priority since we'll already\n\t    // be showing the right content coming from the server, it is no rush.\n\t    workInProgress.lanes = laneToLanes(OffscreenLane);\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {\n\t  if (!didSuspend) {\n\t    // This is the first render pass. Attempt to hydrate.\n\t    // We should never be hydrating at this point because it is the first pass,\n\t    // but after we've already committed once.\n\t    warnIfHydrating();\n\n\t    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument\n\t      // required — every concurrent mode path that causes hydration to\n\t      // de-opt to client rendering should have an error message.\n\t      null);\n\t    }\n\n\t    if (isSuspenseInstanceFallback(suspenseInstance)) {\n\t      // This boundary is in a permanent fallback state. In this case, we'll never\n\t      // get an update and we'll never be able to hydrate the final content. Let's just try the\n\t      // client side render instead.\n\t      var digest, message, stack;\n\n\t      {\n\t        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n\n\t        digest = _getSuspenseInstanceF.digest;\n\t        message = _getSuspenseInstanceF.message;\n\t        stack = _getSuspenseInstanceF.stack;\n\t      }\n\n\t      var error;\n\n\t      if (message) {\n\t        // eslint-disable-next-line react-internal/prod-error-codes\n\t        error = new Error(message);\n\t      } else {\n\t        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');\n\t      }\n\n\t      var capturedValue = createCapturedValue(error, digest, stack);\n\t      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n\t    }\n\t    // any context has changed, we need to treat is as if the input might have changed.\n\n\n\t    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n\n\t    if (didReceiveUpdate || hasContextChanged) {\n\t      // This boundary has changed since the first render. This means that we are now unable to\n\t      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n\t      var root = getWorkInProgressRoot();\n\n\t      if (root !== null) {\n\t        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n\n\t        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n\t          // Intentionally mutating since this render will get interrupted. This\n\t          // is one of the very rare times where we mutate the current tree\n\t          // during the render phase.\n\t          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n\t          var eventTime = NoTimestamp;\n\t          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n\t          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);\n\t        }\n\t      } // If we have scheduled higher pri work above, this will probably just abort the render\n\t      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n\t      // render something, if we time out. Even if that requires us to delete everything and\n\t      // skip hydration.\n\t      // Delay having to do this as long as the suspense timeout allows us.\n\n\n\t      renderDidSuspendDelayIfPossible();\n\n\t      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n\n\t      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n\t    } else if (isSuspenseInstancePending(suspenseInstance)) {\n\t      // This component is still pending more data from the server, so we can't hydrate its\n\t      // content. We treat it as if this component suspended itself. It might seem as if\n\t      // we could just try to render it client-side instead. However, this will perform a\n\t      // lot of unnecessary work and is unlikely to complete since it often will suspend\n\t      // on missing data anyway. Additionally, the server might be able to render more\n\t      // than we can on the client yet. In that case we'd end up with more fallback states\n\t      // on the client than if we just leave it alone. If the server times out or errors\n\t      // these should update this boundary to the permanent Fallback state instead.\n\t      // Mark it as having captured (i.e. suspended).\n\t      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n\t      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n\t      var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n\t      registerSuspenseInstanceRetry(suspenseInstance, retry);\n\t      return null;\n\t    } else {\n\t      // This is the first attempt.\n\t      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n\t      var primaryChildren = nextProps.children;\n\t      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n\t      // tree is part of a hydrating tree. This is used to determine if a child\n\t      // node has fully mounted yet, and for scheduling event replaying.\n\t      // Conceptually this is similar to Placement in that a new subtree is\n\t      // inserted into the React tree here. It just happens to not need DOM\n\t      // mutations because it already exists.\n\n\t      primaryChildFragment.flags |= Hydrating;\n\t      return primaryChildFragment;\n\t    }\n\t  } else {\n\t    // This is the second render pass. We already attempted to hydrated, but\n\t    // something either suspended or errored.\n\t    if (workInProgress.flags & ForceClientRender) {\n\t      // Something errored during hydration. Try again without hydrating.\n\t      workInProgress.flags &= ~ForceClientRender;\n\n\t      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n\n\t      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);\n\t    } else if (workInProgress.memoizedState !== null) {\n\t      // Something suspended and we should still be in dehydrated mode.\n\t      // Leave the existing child in place.\n\t      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n\t      // but the normal suspense pass doesn't.\n\n\t      workInProgress.flags |= DidCapture;\n\t      return null;\n\t    } else {\n\t      // Suspended but we should no longer be in dehydrated mode.\n\t      // Therefore we now have to render the fallback.\n\t      var nextPrimaryChildren = nextProps.children;\n\t      var nextFallbackChildren = nextProps.fallback;\n\t      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n\t      var _primaryChildFragment4 = workInProgress.child;\n\t      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n\t      workInProgress.memoizedState = SUSPENDED_MARKER;\n\t      return fallbackChildFragment;\n\t    }\n\t  }\n\t}\n\n\tfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n\t  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n\t  var alternate = fiber.alternate;\n\n\t  if (alternate !== null) {\n\t    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n\t  }\n\n\t  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n\t}\n\n\tfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n\t  // Mark any Suspense boundaries with fallbacks as having work to do.\n\t  // If they were previously forced into fallbacks, they may now be able\n\t  // to unblock.\n\t  var node = firstChild;\n\n\t  while (node !== null) {\n\t    if (node.tag === SuspenseComponent) {\n\t      var state = node.memoizedState;\n\n\t      if (state !== null) {\n\t        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n\t      }\n\t    } else if (node.tag === SuspenseListComponent) {\n\t      // If the tail is hidden there might not be an Suspense boundaries\n\t      // to schedule work on. In this case we have to schedule it on the\n\t      // list itself.\n\t      // We don't have to traverse to the children of the list since\n\t      // the list will propagate the change when it rerenders.\n\t      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n\t    } else if (node.child !== null) {\n\t      node.child.return = node;\n\t      node = node.child;\n\t      continue;\n\t    }\n\n\t    if (node === workInProgress) {\n\t      return;\n\t    }\n\n\t    while (node.sibling === null) {\n\t      if (node.return === null || node.return === workInProgress) {\n\t        return;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    node.sibling.return = node.return;\n\t    node = node.sibling;\n\t  }\n\t}\n\n\tfunction findLastContentRow(firstChild) {\n\t  // This is going to find the last row among these children that is already\n\t  // showing content on the screen, as opposed to being in fallback state or\n\t  // new. If a row has multiple Suspense boundaries, any of them being in the\n\t  // fallback state, counts as the whole row being in a fallback state.\n\t  // Note that the \"rows\" will be workInProgress, but any nested children\n\t  // will still be current since we haven't rendered them yet. The mounted\n\t  // order may not be the same as the new order. We use the new order.\n\t  var row = firstChild;\n\t  var lastContentRow = null;\n\n\t  while (row !== null) {\n\t    var currentRow = row.alternate; // New rows can't be content rows.\n\n\t    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n\t      lastContentRow = row;\n\t    }\n\n\t    row = row.sibling;\n\t  }\n\n\t  return lastContentRow;\n\t}\n\n\tfunction validateRevealOrder(revealOrder) {\n\t  {\n\t    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n\t      didWarnAboutRevealOrder[revealOrder] = true;\n\n\t      if (typeof revealOrder === 'string') {\n\t        switch (revealOrder.toLowerCase()) {\n\t          case 'together':\n\t          case 'forwards':\n\t          case 'backwards':\n\t            {\n\t              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n\n\t              break;\n\t            }\n\n\t          case 'forward':\n\t          case 'backward':\n\t            {\n\t              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n\n\t              break;\n\t            }\n\n\t          default:\n\t            error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\n\t            break;\n\t        }\n\t      } else {\n\t        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction validateTailOptions(tailMode, revealOrder) {\n\t  {\n\t    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n\t      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n\t        didWarnAboutTailOptions[tailMode] = true;\n\n\t        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n\t      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n\t        didWarnAboutTailOptions[tailMode] = true;\n\n\t        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction validateSuspenseListNestedChild(childSlot, index) {\n\t  {\n\t    var isAnArray = isArray(childSlot);\n\t    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n\t    if (isAnArray || isIterable) {\n\t      var type = isAnArray ? 'array' : 'iterable';\n\n\t      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n\n\t      return false;\n\t    }\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction validateSuspenseListChildren(children, revealOrder) {\n\t  {\n\t    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n\t      if (isArray(children)) {\n\t        for (var i = 0; i < children.length; i++) {\n\t          if (!validateSuspenseListNestedChild(children[i], i)) {\n\t            return;\n\t          }\n\t        }\n\t      } else {\n\t        var iteratorFn = getIteratorFn(children);\n\n\t        if (typeof iteratorFn === 'function') {\n\t          var childrenIterator = iteratorFn.call(children);\n\n\t          if (childrenIterator) {\n\t            var step = childrenIterator.next();\n\t            var _i = 0;\n\n\t            for (; !step.done; step = childrenIterator.next()) {\n\t              if (!validateSuspenseListNestedChild(step.value, _i)) {\n\t                return;\n\t              }\n\n\t              _i++;\n\t            }\n\t          }\n\t        } else {\n\t          error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n\t  var renderState = workInProgress.memoizedState;\n\n\t  if (renderState === null) {\n\t    workInProgress.memoizedState = {\n\t      isBackwards: isBackwards,\n\t      rendering: null,\n\t      renderingStartTime: 0,\n\t      last: lastContentRow,\n\t      tail: tail,\n\t      tailMode: tailMode\n\t    };\n\t  } else {\n\t    // We can reuse the existing object from previous renders.\n\t    renderState.isBackwards = isBackwards;\n\t    renderState.rendering = null;\n\t    renderState.renderingStartTime = 0;\n\t    renderState.last = lastContentRow;\n\t    renderState.tail = tail;\n\t    renderState.tailMode = tailMode;\n\t  }\n\t} // This can end up rendering this component multiple passes.\n\t// The first pass splits the children fibers into two sets. A head and tail.\n\t// We first render the head. If anything is in fallback state, we do another\n\t// pass through beginWork to rerender all children (including the tail) with\n\t// the force suspend context. If the first render didn't have anything in\n\t// in fallback state. Then we render each row in the tail one-by-one.\n\t// That happens in the completeWork phase without going back to beginWork.\n\n\n\tfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n\t  var nextProps = workInProgress.pendingProps;\n\t  var revealOrder = nextProps.revealOrder;\n\t  var tailMode = nextProps.tail;\n\t  var newChildren = nextProps.children;\n\t  validateRevealOrder(revealOrder);\n\t  validateTailOptions(tailMode, revealOrder);\n\t  validateSuspenseListChildren(newChildren, revealOrder);\n\t  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\t  var suspenseContext = suspenseStackCursor.current;\n\t  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n\t  if (shouldForceFallback) {\n\t    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\t    workInProgress.flags |= DidCapture;\n\t  } else {\n\t    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n\t    if (didSuspendBefore) {\n\t      // If we previously forced a fallback, we need to schedule work\n\t      // on any nested boundaries to let them know to try to render\n\t      // again. This is the same as context updating.\n\t      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n\t    }\n\n\t    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\t  }\n\n\t  pushSuspenseContext(workInProgress, suspenseContext);\n\n\t  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t    // In legacy mode, SuspenseList doesn't work so we just\n\t    // use make it a noop by treating it as the default revealOrder.\n\t    workInProgress.memoizedState = null;\n\t  } else {\n\t    switch (revealOrder) {\n\t      case 'forwards':\n\t        {\n\t          var lastContentRow = findLastContentRow(workInProgress.child);\n\t          var tail;\n\n\t          if (lastContentRow === null) {\n\t            // The whole list is part of the tail.\n\t            // TODO: We could fast path by just rendering the tail now.\n\t            tail = workInProgress.child;\n\t            workInProgress.child = null;\n\t          } else {\n\t            // Disconnect the tail rows after the content row.\n\t            // We're going to render them separately later.\n\t            tail = lastContentRow.sibling;\n\t            lastContentRow.sibling = null;\n\t          }\n\n\t          initSuspenseListRenderState(workInProgress, false, // isBackwards\n\t          tail, lastContentRow, tailMode);\n\t          break;\n\t        }\n\n\t      case 'backwards':\n\t        {\n\t          // We're going to find the first row that has existing content.\n\t          // At the same time we're going to reverse the list of everything\n\t          // we pass in the meantime. That's going to be our tail in reverse\n\t          // order.\n\t          var _tail = null;\n\t          var row = workInProgress.child;\n\t          workInProgress.child = null;\n\n\t          while (row !== null) {\n\t            var currentRow = row.alternate; // New rows can't be content rows.\n\n\t            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n\t              // This is the beginning of the main content.\n\t              workInProgress.child = row;\n\t              break;\n\t            }\n\n\t            var nextRow = row.sibling;\n\t            row.sibling = _tail;\n\t            _tail = row;\n\t            row = nextRow;\n\t          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n\t          initSuspenseListRenderState(workInProgress, true, // isBackwards\n\t          _tail, null, // last\n\t          tailMode);\n\t          break;\n\t        }\n\n\t      case 'together':\n\t        {\n\t          initSuspenseListRenderState(workInProgress, false, // isBackwards\n\t          null, // tail\n\t          null, // last\n\t          undefined);\n\t          break;\n\t        }\n\n\t      default:\n\t        {\n\t          // The default reveal order is the same as not having\n\t          // a boundary.\n\t          workInProgress.memoizedState = null;\n\t        }\n\t    }\n\t  }\n\n\t  return workInProgress.child;\n\t}\n\n\tfunction updatePortalComponent(current, workInProgress, renderLanes) {\n\t  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n\t  var nextChildren = workInProgress.pendingProps;\n\n\t  if (current === null) {\n\t    // Portals are special because we don't append the children during mount\n\t    // but at commit. Therefore we need to track insertions which the normal\n\t    // flow doesn't do during mount. This doesn't happen at the root because\n\t    // the root always starts with a \"current\" with a null child.\n\t    // TODO: Consider unifying this with how the root works.\n\t    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n\t  } else {\n\t    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\t  }\n\n\t  return workInProgress.child;\n\t}\n\n\tvar hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\n\tfunction updateContextProvider(current, workInProgress, renderLanes) {\n\t  var providerType = workInProgress.type;\n\t  var context = providerType._context;\n\t  var newProps = workInProgress.pendingProps;\n\t  var oldProps = workInProgress.memoizedProps;\n\t  var newValue = newProps.value;\n\n\t  {\n\t    if (!('value' in newProps)) {\n\t      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n\t        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n\t        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n\t      }\n\t    }\n\n\t    var providerPropTypes = workInProgress.type.propTypes;\n\n\t    if (providerPropTypes) {\n\t      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n\t    }\n\t  }\n\n\t  pushProvider(workInProgress, context, newValue);\n\n\t  {\n\t    if (oldProps !== null) {\n\t      var oldValue = oldProps.value;\n\n\t      if (objectIs(oldValue, newValue)) {\n\t        // No change. Bailout early if children are the same.\n\t        if (oldProps.children === newProps.children && !hasContextChanged()) {\n\t          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t        }\n\t      } else {\n\t        // The context value changed. Search for matching consumers and schedule\n\t        // them to update.\n\t        propagateContextChange(workInProgress, context, renderLanes);\n\t      }\n\t    }\n\t  }\n\n\t  var newChildren = newProps.children;\n\t  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tvar hasWarnedAboutUsingContextAsConsumer = false;\n\n\tfunction updateContextConsumer(current, workInProgress, renderLanes) {\n\t  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n\t  // DEV mode, we create a separate object for Context.Consumer that acts\n\t  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n\t  // so we use the old behaviour (Context.Consumer references Context) to\n\t  // reduce size and overhead. The separate object references context via\n\t  // a property called \"_context\", which also gives us the ability to check\n\t  // in DEV mode if this property exists or not and warn if it does not.\n\n\t  {\n\t    if (context._context === undefined) {\n\t      // This may be because it's a Context (rather than a Consumer).\n\t      // Or it may be because it's older React where they're the same thing.\n\t      // We only want to warn if we're sure it's a new React.\n\t      if (context !== context.Consumer) {\n\t        if (!hasWarnedAboutUsingContextAsConsumer) {\n\t          hasWarnedAboutUsingContextAsConsumer = true;\n\n\t          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n\t        }\n\t      }\n\t    } else {\n\t      context = context._context;\n\t    }\n\t  }\n\n\t  var newProps = workInProgress.pendingProps;\n\t  var render = newProps.children;\n\n\t  {\n\t    if (typeof render !== 'function') {\n\t      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n\t    }\n\t  }\n\n\t  prepareToReadContext(workInProgress, renderLanes);\n\t  var newValue = readContext(context);\n\n\t  {\n\t    markComponentRenderStarted(workInProgress);\n\t  }\n\n\t  var newChildren;\n\n\t  {\n\t    ReactCurrentOwner$1.current = workInProgress;\n\t    setIsRendering(true);\n\t    newChildren = render(newValue);\n\t    setIsRendering(false);\n\t  }\n\n\t  {\n\t    markComponentRenderStopped();\n\t  } // React DevTools reads this flag.\n\n\n\t  workInProgress.flags |= PerformedWork;\n\t  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\t  return workInProgress.child;\n\t}\n\n\tfunction markWorkInProgressReceivedUpdate() {\n\t  didReceiveUpdate = true;\n\t}\n\n\tfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n\t  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n\t    if (current !== null) {\n\t      // A lazy component only mounts if it suspended inside a non-\n\t      // concurrent tree, in an inconsistent state. We want to treat it like\n\t      // a new mount, even though an empty version of it already committed.\n\t      // Disconnect the alternate pointers.\n\t      current.alternate = null;\n\t      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n\t      workInProgress.flags |= Placement;\n\t    }\n\t  }\n\t}\n\n\tfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n\t  if (current !== null) {\n\t    // Reuse previous dependencies\n\t    workInProgress.dependencies = current.dependencies;\n\t  }\n\n\t  {\n\t    // Don't update \"base\" render times for bailouts.\n\t    stopProfilerTimerIfRunning();\n\t  }\n\n\t  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n\t  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n\t    // The children don't have any work either. We can skip them.\n\t    // TODO: Once we add back resuming, we should check if the children are\n\t    // a work-in-progress set. If so, we need to transfer their effects.\n\t    {\n\t      return null;\n\t    }\n\t  } // This fiber doesn't have work, but its subtree does. Clone the child\n\t  // fibers and continue.\n\n\n\t  cloneChildFibers(current, workInProgress);\n\t  return workInProgress.child;\n\t}\n\n\tfunction remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n\t  {\n\t    var returnFiber = oldWorkInProgress.return;\n\n\t    if (returnFiber === null) {\n\t      // eslint-disable-next-line react-internal/prod-error-codes\n\t      throw new Error('Cannot swap the root fiber.');\n\t    } // Disconnect from the old current.\n\t    // It will get deleted.\n\n\n\t    current.alternate = null;\n\t    oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n\t    newWorkInProgress.index = oldWorkInProgress.index;\n\t    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n\t    newWorkInProgress.return = oldWorkInProgress.return;\n\t    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n\t    if (oldWorkInProgress === returnFiber.child) {\n\t      returnFiber.child = newWorkInProgress;\n\t    } else {\n\t      var prevSibling = returnFiber.child;\n\n\t      if (prevSibling === null) {\n\t        // eslint-disable-next-line react-internal/prod-error-codes\n\t        throw new Error('Expected parent to have a child.');\n\t      }\n\n\t      while (prevSibling.sibling !== oldWorkInProgress) {\n\t        prevSibling = prevSibling.sibling;\n\n\t        if (prevSibling === null) {\n\t          // eslint-disable-next-line react-internal/prod-error-codes\n\t          throw new Error('Expected to find the previous sibling.');\n\t        }\n\t      }\n\n\t      prevSibling.sibling = newWorkInProgress;\n\t    } // Delete the old fiber and place the new one.\n\t    // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n\t    var deletions = returnFiber.deletions;\n\n\t    if (deletions === null) {\n\t      returnFiber.deletions = [current];\n\t      returnFiber.flags |= ChildDeletion;\n\t    } else {\n\t      deletions.push(current);\n\t    }\n\n\t    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n\t    return newWorkInProgress;\n\t  }\n\t}\n\n\tfunction checkScheduledUpdateOrContext(current, renderLanes) {\n\t  // Before performing an early bailout, we must check if there are pending\n\t  // updates or context.\n\t  var updateLanes = current.lanes;\n\n\t  if (includesSomeLane(updateLanes, renderLanes)) {\n\t    return true;\n\t  } // No pending update, but because context is propagated lazily, we need\n\n\t  return false;\n\t}\n\n\tfunction attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n\t  // This fiber does not have any pending work. Bailout without entering\n\t  // the begin phase. There's still some bookkeeping we that needs to be done\n\t  // in this optimized path, mostly pushing stuff onto the stack.\n\t  switch (workInProgress.tag) {\n\t    case HostRoot:\n\t      pushHostRootContext(workInProgress);\n\t      workInProgress.stateNode;\n\n\t      resetHydrationState();\n\t      break;\n\n\t    case HostComponent:\n\t      pushHostContext(workInProgress);\n\t      break;\n\n\t    case ClassComponent:\n\t      {\n\t        var Component = workInProgress.type;\n\n\t        if (isContextProvider(Component)) {\n\t          pushContextProvider(workInProgress);\n\t        }\n\n\t        break;\n\t      }\n\n\t    case HostPortal:\n\t      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n\t      break;\n\n\t    case ContextProvider:\n\t      {\n\t        var newValue = workInProgress.memoizedProps.value;\n\t        var context = workInProgress.type._context;\n\t        pushProvider(workInProgress, context, newValue);\n\t        break;\n\t      }\n\n\t    case Profiler:\n\t      {\n\t        // Profiler should only call onRender when one of its descendants actually rendered.\n\t        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n\t        if (hasChildWork) {\n\t          workInProgress.flags |= Update;\n\t        }\n\n\t        {\n\t          // Reset effect durations for the next eventual effect phase.\n\t          // These are reset during render to allow the DevTools commit hook a chance to read them,\n\t          var stateNode = workInProgress.stateNode;\n\t          stateNode.effectDuration = 0;\n\t          stateNode.passiveEffectDuration = 0;\n\t        }\n\t      }\n\n\t      break;\n\n\t    case SuspenseComponent:\n\t      {\n\t        var state = workInProgress.memoizedState;\n\n\t        if (state !== null) {\n\t          if (state.dehydrated !== null) {\n\t            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n\t            // been unsuspended it has committed as a resolved Suspense component.\n\t            // If it needs to be retried, it should have work scheduled on it.\n\n\t            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n\t            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n\t            return null;\n\t          } // If this boundary is currently timed out, we need to decide\n\t          // whether to retry the primary children, or to skip over it and\n\t          // go straight to the fallback. Check the priority of the primary\n\t          // child fragment.\n\n\n\t          var primaryChildFragment = workInProgress.child;\n\t          var primaryChildLanes = primaryChildFragment.childLanes;\n\n\t          if (includesSomeLane(renderLanes, primaryChildLanes)) {\n\t            // The primary children have pending work. Use the normal path\n\t            // to attempt to render the primary children again.\n\t            return updateSuspenseComponent(current, workInProgress, renderLanes);\n\t          } else {\n\t            // The primary child fragment does not have pending work marked\n\t            // on it\n\t            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n\t            // priority. Bailout.\n\n\t            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n\t            if (child !== null) {\n\t              // The fallback children have pending work. Skip over the\n\t              // primary children and work on the fallback.\n\t              return child.sibling;\n\t            } else {\n\t              // Note: We can return `null` here because we already checked\n\t              // whether there were nested context consumers, via the call to\n\t              // `bailoutOnAlreadyFinishedWork` above.\n\t              return null;\n\t            }\n\t          }\n\t        } else {\n\t          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n\t        }\n\n\t        break;\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n\t        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n\t        if (didSuspendBefore) {\n\t          if (_hasChildWork) {\n\t            // If something was in fallback state last time, and we have all the\n\t            // same children then we're still in progressive loading state.\n\t            // Something might get unblocked by state updates or retries in the\n\t            // tree which will affect the tail. So we need to use the normal\n\t            // path to compute the correct tail.\n\t            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n\t          } // If none of the children had any work, that means that none of\n\t          // them got retried so they'll still be blocked in the same way\n\t          // as before. We can fast bail out.\n\n\n\t          workInProgress.flags |= DidCapture;\n\t        } // If nothing suspended before and we're rendering the same children,\n\t        // then the tail doesn't matter. Anything new that suspends will work\n\t        // in the \"together\" mode, so we can continue from the state we had.\n\n\n\t        var renderState = workInProgress.memoizedState;\n\n\t        if (renderState !== null) {\n\t          // Reset to the \"together\" mode in case we've started a different\n\t          // update in the past but didn't complete it.\n\t          renderState.rendering = null;\n\t          renderState.tail = null;\n\t          renderState.lastEffect = null;\n\t        }\n\n\t        pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n\t        if (_hasChildWork) {\n\t          break;\n\t        } else {\n\t          // If none of the children had any work, that means that none of\n\t          // them got retried so they'll still be blocked in the same way\n\t          // as before. We can fast bail out.\n\t          return null;\n\t        }\n\t      }\n\n\t    case OffscreenComponent:\n\t    case LegacyHiddenComponent:\n\t      {\n\t        // Need to check if the tree still needs to be deferred. This is\n\t        // almost identical to the logic used in the normal update path,\n\t        // so we'll just enter that. The only difference is we'll bail out\n\t        // at the next level instead of this one, because the child props\n\t        // have not changed. Which is fine.\n\t        // TODO: Probably should refactor `beginWork` to split the bailout\n\t        // path from the normal path. I'm tempted to do a labeled break here\n\t        // but I won't :)\n\t        workInProgress.lanes = NoLanes;\n\t        return updateOffscreenComponent(current, workInProgress, renderLanes);\n\t      }\n\t  }\n\n\t  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\t}\n\n\tfunction beginWork(current, workInProgress, renderLanes) {\n\t  {\n\t    if (workInProgress._debugNeedsRemount && current !== null) {\n\t      // This will restart the begin phase with a new fiber.\n\t      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n\t    }\n\t  }\n\n\t  if (current !== null) {\n\t    var oldProps = current.memoizedProps;\n\t    var newProps = workInProgress.pendingProps;\n\n\t    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n\t     workInProgress.type !== current.type )) {\n\t      // If props or context changed, mark the fiber as having performed work.\n\t      // This may be unset if the props are determined to be equal later (memo).\n\t      didReceiveUpdate = true;\n\t    } else {\n\t      // Neither props nor legacy context changes. Check if there's a pending\n\t      // update or context change.\n\t      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n\t      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n\t      // may not be work scheduled on `current`, so we check for this flag.\n\t      (workInProgress.flags & DidCapture) === NoFlags) {\n\t        // No pending updates or context. Bail out now.\n\t        didReceiveUpdate = false;\n\t        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n\t      }\n\n\t      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n\t        // This is a special case that only exists for legacy mode.\n\t        // See https://github.com/facebook/react/pull/19216.\n\t        didReceiveUpdate = true;\n\t      } else {\n\t        // An update was scheduled on this fiber, but there are no new props\n\t        // nor legacy context. Set this to false. If an update queue or context\n\t        // consumer produces a changed value, it will set this to true. Otherwise,\n\t        // the component will assume the children have not changed and bail out.\n\t        didReceiveUpdate = false;\n\t      }\n\t    }\n\t  } else {\n\t    didReceiveUpdate = false;\n\n\t    if (getIsHydrating() && isForkedChild(workInProgress)) {\n\t      // Check if this child belongs to a list of muliple children in\n\t      // its parent.\n\t      //\n\t      // In a true multi-threaded implementation, we would render children on\n\t      // parallel threads. This would represent the beginning of a new render\n\t      // thread for this subtree.\n\t      //\n\t      // We only use this for id generation during hydration, which is why the\n\t      // logic is located in this special branch.\n\t      var slotIndex = workInProgress.index;\n\t      var numberOfForks = getForksAtLevel();\n\t      pushTreeId(workInProgress, numberOfForks, slotIndex);\n\t    }\n\t  } // Before entering the begin phase, clear pending update priority.\n\t  // TODO: This assumes that we're about to evaluate the component and process\n\t  // the update queue. However, there's an exception: SimpleMemoComponent\n\t  // sometimes bails out later in the begin phase. This indicates that we should\n\t  // move this assignment out of the common path and into each branch.\n\n\n\t  workInProgress.lanes = NoLanes;\n\n\t  switch (workInProgress.tag) {\n\t    case IndeterminateComponent:\n\t      {\n\t        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n\t      }\n\n\t    case LazyComponent:\n\t      {\n\t        var elementType = workInProgress.elementType;\n\t        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n\t      }\n\n\t    case FunctionComponent:\n\t      {\n\t        var Component = workInProgress.type;\n\t        var unresolvedProps = workInProgress.pendingProps;\n\t        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n\t        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        var _Component = workInProgress.type;\n\t        var _unresolvedProps = workInProgress.pendingProps;\n\n\t        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n\t        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n\t      }\n\n\t    case HostRoot:\n\t      return updateHostRoot(current, workInProgress, renderLanes);\n\n\t    case HostComponent:\n\t      return updateHostComponent(current, workInProgress, renderLanes);\n\n\t    case HostText:\n\t      return updateHostText(current, workInProgress);\n\n\t    case SuspenseComponent:\n\t      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n\t    case HostPortal:\n\t      return updatePortalComponent(current, workInProgress, renderLanes);\n\n\t    case ForwardRef:\n\t      {\n\t        var type = workInProgress.type;\n\t        var _unresolvedProps2 = workInProgress.pendingProps;\n\n\t        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n\t        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n\t      }\n\n\t    case Fragment:\n\t      return updateFragment(current, workInProgress, renderLanes);\n\n\t    case Mode:\n\t      return updateMode(current, workInProgress, renderLanes);\n\n\t    case Profiler:\n\t      return updateProfiler(current, workInProgress, renderLanes);\n\n\t    case ContextProvider:\n\t      return updateContextProvider(current, workInProgress, renderLanes);\n\n\t    case ContextConsumer:\n\t      return updateContextConsumer(current, workInProgress, renderLanes);\n\n\t    case MemoComponent:\n\t      {\n\t        var _type2 = workInProgress.type;\n\t        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n\t        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n\t        {\n\t          if (workInProgress.type !== workInProgress.elementType) {\n\t            var outerPropTypes = _type2.propTypes;\n\n\t            if (outerPropTypes) {\n\t              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n\t              'prop', getComponentNameFromType(_type2));\n\t            }\n\t          }\n\t        }\n\n\t        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n\t        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n\t      }\n\n\t    case SimpleMemoComponent:\n\t      {\n\t        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n\t      }\n\n\t    case IncompleteClassComponent:\n\t      {\n\t        var _Component2 = workInProgress.type;\n\t        var _unresolvedProps4 = workInProgress.pendingProps;\n\n\t        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n\t        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n\t      }\n\n\t    case ScopeComponent:\n\t      {\n\n\t        break;\n\t      }\n\n\t    case OffscreenComponent:\n\t      {\n\t        return updateOffscreenComponent(current, workInProgress, renderLanes);\n\t      }\n\t  }\n\n\t  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n\t}\n\n\tfunction markUpdate(workInProgress) {\n\t  // Tag the fiber with an update effect. This turns a Placement into\n\t  // a PlacementAndUpdate.\n\t  workInProgress.flags |= Update;\n\t}\n\n\tfunction markRef$1(workInProgress) {\n\t  workInProgress.flags |= Ref;\n\n\t  {\n\t    workInProgress.flags |= RefStatic;\n\t  }\n\t}\n\n\tfunction hadNoMutationsEffects(current, completedWork) {\n\t  var didBailout = current !== null && current.child === completedWork.child;\n\n\t  if (didBailout) {\n\t    return true;\n\t  }\n\n\t  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n\t    return false;\n\t  } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n\t  // then we only have to check the `completedWork.subtreeFlags`.\n\n\n\t  var child = completedWork.child;\n\n\t  while (child !== null) {\n\t    if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n\t      return false;\n\t    }\n\n\t    child = child.sibling;\n\t  }\n\n\t  return true;\n\t}\n\n\tvar appendAllChildren;\n\tvar updateHostContainer;\n\tvar updateHostComponent$1;\n\tvar updateHostText$1;\n\n\tif (supportsMutation) {\n\t  // Mutation mode\n\t  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n\t    // We only have the top Fiber that was created but we need recurse down its\n\t    // children to find all the terminal nodes.\n\t    var node = workInProgress.child;\n\n\t    while (node !== null) {\n\t      if (node.tag === HostComponent || node.tag === HostText) {\n\t        appendInitialChild(parent, node.stateNode);\n\t      } else if (node.tag === HostPortal) ; else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      }\n\n\t      if (node === workInProgress) {\n\t        return;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === workInProgress) {\n\t          return;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  };\n\n\t  updateHostContainer = function (current, workInProgress) {// Noop\n\t  };\n\n\t  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n\t    // If we have an alternate, that means this is an update and we need to\n\t    // schedule a side-effect to do the updates.\n\t    var oldProps = current.memoizedProps;\n\n\t    if (oldProps === newProps) {\n\t      // In mutation mode, this is sufficient for a bailout because\n\t      // we won't touch this node even if children changed.\n\t      return;\n\t    } // If we get updated because one of our children updated, we don't\n\t    // have newProps so we'll have to reuse them.\n\t    // TODO: Split the update API as separate for the props vs. children.\n\t    // Even better would be if children weren't special cased at all tho.\n\n\n\t    var instance = workInProgress.stateNode;\n\t    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n\t    // component is hitting the resume path. Figure out why. Possibly\n\t    // related to `hidden`.\n\n\t    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n\t    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n\t    // is a new ref we mark this as an update. All the work is done in commitWork.\n\n\t    if (updatePayload) {\n\t      markUpdate(workInProgress);\n\t    }\n\t  };\n\n\t  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n\t    // If the text differs, mark it as an update. All the work in done in commitWork.\n\t    if (oldText !== newText) {\n\t      markUpdate(workInProgress);\n\t    }\n\t  };\n\t} else if (supportsPersistence) {\n\t  // Persistent host tree mode\n\t  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n\t    // We only have the top Fiber that was created but we need recurse down its\n\t    // children to find all the terminal nodes.\n\t    var node = workInProgress.child;\n\n\t    while (node !== null) {\n\t      // eslint-disable-next-line no-labels\n\t       if (node.tag === HostComponent) {\n\t        var instance = node.stateNode;\n\n\t        if (needsVisibilityToggle && isHidden) {\n\t          // This child is inside a timed out tree. Hide it.\n\t          var props = node.memoizedProps;\n\t          var type = node.type;\n\t          instance = cloneHiddenInstance(instance, type, props, node);\n\t        }\n\n\t        appendInitialChild(parent, instance);\n\t      } else if (node.tag === HostText) {\n\t        var _instance = node.stateNode;\n\n\t        if (needsVisibilityToggle && isHidden) {\n\t          // This child is inside a timed out tree. Hide it.\n\t          var text = node.memoizedProps;\n\t          _instance = cloneHiddenTextInstance(_instance, text, node);\n\t        }\n\n\t        appendInitialChild(parent, _instance);\n\t      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n\t        // The children in this boundary are hidden. Toggle their visibility\n\t        // before appending.\n\t        var child = node.child;\n\n\t        if (child !== null) {\n\t          child.return = node;\n\t        }\n\n\t        appendAllChildren(parent, node, true, true);\n\t      } else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n\t      node = node;\n\n\t      if (node === workInProgress) {\n\t        return;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === workInProgress) {\n\t          return;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n\n\t  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n\t    // We only have the top Fiber that was created but we need recurse down its\n\t    // children to find all the terminal nodes.\n\t    var node = workInProgress.child;\n\n\t    while (node !== null) {\n\t      // eslint-disable-next-line no-labels\n\t       if (node.tag === HostComponent) {\n\t        var instance = node.stateNode;\n\n\t        if (needsVisibilityToggle && isHidden) {\n\t          // This child is inside a timed out tree. Hide it.\n\t          var props = node.memoizedProps;\n\t          var type = node.type;\n\t          instance = cloneHiddenInstance(instance, type, props, node);\n\t        }\n\n\t        appendChildToContainerChildSet(containerChildSet, instance);\n\t      } else if (node.tag === HostText) {\n\t        var _instance2 = node.stateNode;\n\n\t        if (needsVisibilityToggle && isHidden) {\n\t          // This child is inside a timed out tree. Hide it.\n\t          var text = node.memoizedProps;\n\t          _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n\t        }\n\n\t        appendChildToContainerChildSet(containerChildSet, _instance2);\n\t      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n\t        // The children in this boundary are hidden. Toggle their visibility\n\t        // before appending.\n\t        var child = node.child;\n\n\t        if (child !== null) {\n\t          child.return = node;\n\t        }\n\n\t        appendAllChildrenToContainer(containerChildSet, node, true, true);\n\t      } else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n\t      node = node;\n\n\t      if (node === workInProgress) {\n\t        return;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === workInProgress) {\n\t          return;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  };\n\n\t  updateHostContainer = function (current, workInProgress) {\n\t    var portalOrRoot = workInProgress.stateNode;\n\t    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n\t    if (childrenUnchanged) ; else {\n\t      var container = portalOrRoot.containerInfo;\n\t      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n\t      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n\t      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n\t      markUpdate(workInProgress);\n\t      finalizeContainerChildren(container, newChildSet);\n\t    }\n\t  };\n\n\t  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n\t    var currentInstance = current.stateNode;\n\t    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n\t    // This guarantees that we can reuse all of them.\n\n\t    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n\t    if (childrenUnchanged && oldProps === newProps) {\n\t      // No changes, just reuse the existing instance.\n\t      // Note that this might release a previous clone.\n\t      workInProgress.stateNode = currentInstance;\n\t      return;\n\t    }\n\n\t    var recyclableInstance = workInProgress.stateNode;\n\t    var currentHostContext = getHostContext();\n\t    var updatePayload = null;\n\n\t    if (oldProps !== newProps) {\n\t      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n\t    }\n\n\t    if (childrenUnchanged && updatePayload === null) {\n\t      // No changes, just reuse the existing instance.\n\t      // Note that this might release a previous clone.\n\t      workInProgress.stateNode = currentInstance;\n\t      return;\n\t    }\n\n\t    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n\n\t    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n\t      markUpdate(workInProgress);\n\t    }\n\n\t    workInProgress.stateNode = newInstance;\n\n\t    if (childrenUnchanged) {\n\t      // If there are no other effects in this tree, we need to flag this node as having one.\n\t      // Even though we're not going to use it for anything.\n\t      // Otherwise parents won't know that there are new children to propagate upwards.\n\t      markUpdate(workInProgress);\n\t    } else {\n\t      // If children might have changed, we have to add them all to the set.\n\t      appendAllChildren(newInstance, workInProgress, false, false);\n\t    }\n\t  };\n\n\t  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n\t    if (oldText !== newText) {\n\t      // If the text content differs, we'll create a new text instance for it.\n\t      var rootContainerInstance = getRootHostContainer();\n\t      var currentHostContext = getHostContext();\n\t      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n\t      // This lets the parents know that at least one of their children has changed.\n\n\t      markUpdate(workInProgress);\n\t    } else {\n\t      workInProgress.stateNode = current.stateNode;\n\t    }\n\t  };\n\t} else {\n\t  // No host operations\n\t  updateHostContainer = function (current, workInProgress) {// Noop\n\t  };\n\n\t  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n\t  };\n\n\t  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop\n\t  };\n\t}\n\n\tfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n\t  if (getIsHydrating()) {\n\t    // If we're hydrating, we should consume as many items as we can\n\t    // so we don't leave any behind.\n\t    return;\n\t  }\n\n\t  switch (renderState.tailMode) {\n\t    case 'hidden':\n\t      {\n\t        // Any insertions at the end of the tail list after this point\n\t        // should be invisible. If there are already mounted boundaries\n\t        // anything before them are not considered for collapsing.\n\t        // Therefore we need to go through the whole tail to find if\n\t        // there are any.\n\t        var tailNode = renderState.tail;\n\t        var lastTailNode = null;\n\n\t        while (tailNode !== null) {\n\t          if (tailNode.alternate !== null) {\n\t            lastTailNode = tailNode;\n\t          }\n\n\t          tailNode = tailNode.sibling;\n\t        } // Next we're simply going to delete all insertions after the\n\t        // last rendered item.\n\n\n\t        if (lastTailNode === null) {\n\t          // All remaining items in the tail are insertions.\n\t          renderState.tail = null;\n\t        } else {\n\t          // Detach the insertion after the last node that was already\n\t          // inserted.\n\t          lastTailNode.sibling = null;\n\t        }\n\n\t        break;\n\t      }\n\n\t    case 'collapsed':\n\t      {\n\t        // Any insertions at the end of the tail list after this point\n\t        // should be invisible. If there are already mounted boundaries\n\t        // anything before them are not considered for collapsing.\n\t        // Therefore we need to go through the whole tail to find if\n\t        // there are any.\n\t        var _tailNode = renderState.tail;\n\t        var _lastTailNode = null;\n\n\t        while (_tailNode !== null) {\n\t          if (_tailNode.alternate !== null) {\n\t            _lastTailNode = _tailNode;\n\t          }\n\n\t          _tailNode = _tailNode.sibling;\n\t        } // Next we're simply going to delete all insertions after the\n\t        // last rendered item.\n\n\n\t        if (_lastTailNode === null) {\n\t          // All remaining items in the tail are insertions.\n\t          if (!hasRenderedATailFallback && renderState.tail !== null) {\n\t            // We suspended during the head. We want to show at least one\n\t            // row at the tail. So we'll keep on and cut off the rest.\n\t            renderState.tail.sibling = null;\n\t          } else {\n\t            renderState.tail = null;\n\t          }\n\t        } else {\n\t          // Detach the insertion after the last node that was already\n\t          // inserted.\n\t          _lastTailNode.sibling = null;\n\t        }\n\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction bubbleProperties(completedWork) {\n\t  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n\t  var newChildLanes = NoLanes;\n\t  var subtreeFlags = NoFlags;\n\n\t  if (!didBailout) {\n\t    // Bubble up the earliest expiration time.\n\t    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n\t      // In profiling mode, resetChildExpirationTime is also used to reset\n\t      // profiler durations.\n\t      var actualDuration = completedWork.actualDuration;\n\t      var treeBaseDuration = completedWork.selfBaseDuration;\n\t      var child = completedWork.child;\n\n\t      while (child !== null) {\n\t        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n\t        subtreeFlags |= child.subtreeFlags;\n\t        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n\t        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n\t        // When work is done, it should bubble to the parent's actualDuration. If\n\t        // the fiber has not been cloned though, (meaning no work was done), then\n\t        // this value will reflect the amount of time spent working on a previous\n\t        // render. In that case it should not bubble. We determine whether it was\n\t        // cloned by comparing the child pointer.\n\n\t        actualDuration += child.actualDuration;\n\t        treeBaseDuration += child.treeBaseDuration;\n\t        child = child.sibling;\n\t      }\n\n\t      completedWork.actualDuration = actualDuration;\n\t      completedWork.treeBaseDuration = treeBaseDuration;\n\t    } else {\n\t      var _child = completedWork.child;\n\n\t      while (_child !== null) {\n\t        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n\t        subtreeFlags |= _child.subtreeFlags;\n\t        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n\t        // smell because it assumes the commit phase is never concurrent with\n\t        // the render phase. Will address during refactor to alternate model.\n\n\t        _child.return = completedWork;\n\t        _child = _child.sibling;\n\t      }\n\t    }\n\n\t    completedWork.subtreeFlags |= subtreeFlags;\n\t  } else {\n\t    // Bubble up the earliest expiration time.\n\t    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n\t      // In profiling mode, resetChildExpirationTime is also used to reset\n\t      // profiler durations.\n\t      var _treeBaseDuration = completedWork.selfBaseDuration;\n\t      var _child2 = completedWork.child;\n\n\t      while (_child2 !== null) {\n\t        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n\t        // so we should bubble those up even during a bailout. All the other\n\t        // flags have a lifetime only of a single render + commit, so we should\n\t        // ignore them.\n\n\t        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n\t        subtreeFlags |= _child2.flags & StaticMask;\n\t        _treeBaseDuration += _child2.treeBaseDuration;\n\t        _child2 = _child2.sibling;\n\t      }\n\n\t      completedWork.treeBaseDuration = _treeBaseDuration;\n\t    } else {\n\t      var _child3 = completedWork.child;\n\n\t      while (_child3 !== null) {\n\t        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n\t        // so we should bubble those up even during a bailout. All the other\n\t        // flags have a lifetime only of a single render + commit, so we should\n\t        // ignore them.\n\n\t        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n\t        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n\t        // smell because it assumes the commit phase is never concurrent with\n\t        // the render phase. Will address during refactor to alternate model.\n\n\t        _child3.return = completedWork;\n\t        _child3 = _child3.sibling;\n\t      }\n\t    }\n\n\t    completedWork.subtreeFlags |= subtreeFlags;\n\t  }\n\n\t  completedWork.childLanes = newChildLanes;\n\t  return didBailout;\n\t}\n\n\tfunction completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n\t  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n\t    warnIfUnhydratedTailNodes(workInProgress);\n\t    resetHydrationState();\n\t    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n\t    return false;\n\t  }\n\n\t  var wasHydrated = popHydrationState(workInProgress);\n\n\t  if (nextState !== null && nextState.dehydrated !== null) {\n\t    // We might be inside a hydration state the first time we're picking up this\n\t    // Suspense boundary, and also after we've reentered it for further hydration.\n\t    if (current === null) {\n\t      if (!wasHydrated) {\n\t        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n\t      }\n\n\t      prepareToHydrateHostSuspenseInstance(workInProgress);\n\t      bubbleProperties(workInProgress);\n\n\t      {\n\t        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n\t          var isTimedOutSuspense = nextState !== null;\n\n\t          if (isTimedOutSuspense) {\n\t            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n\t            var primaryChildFragment = workInProgress.child;\n\n\t            if (primaryChildFragment !== null) {\n\t              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n\t              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      return false;\n\t    } else {\n\t      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n\t      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n\t      resetHydrationState();\n\n\t      if ((workInProgress.flags & DidCapture) === NoFlags) {\n\t        // This boundary did not suspend so it's now hydrated and unsuspended.\n\t        workInProgress.memoizedState = null;\n\t      } // If nothing suspended, we need to schedule an effect to mark this boundary\n\t      // as having hydrated so events know that they're free to be invoked.\n\t      // It's also a signal to replay events and the suspense callback.\n\t      // If something suspended, schedule an effect to attach retry listeners.\n\t      // So we might as well always mark this.\n\n\n\t      workInProgress.flags |= Update;\n\t      bubbleProperties(workInProgress);\n\n\t      {\n\t        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n\t          var _isTimedOutSuspense = nextState !== null;\n\n\t          if (_isTimedOutSuspense) {\n\t            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n\t            var _primaryChildFragment = workInProgress.child;\n\n\t            if (_primaryChildFragment !== null) {\n\t              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n\t              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      return false;\n\t    }\n\t  } else {\n\t    // Successfully completed this tree. If this was a forced client render,\n\t    // there may have been recoverable errors during first hydration\n\t    // attempt. If so, add them to a queue so we can log them in the\n\t    // commit phase.\n\t    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n\t    return true;\n\t  }\n\t}\n\n\tfunction completeWork(current, workInProgress, renderLanes) {\n\t  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n\t  // to the current tree provider fiber is just as fast and less error-prone.\n\t  // Ideally we would have a special version of the work loop only\n\t  // for hydration.\n\n\t  popTreeContext(workInProgress);\n\n\t  switch (workInProgress.tag) {\n\t    case IndeterminateComponent:\n\t    case LazyComponent:\n\t    case SimpleMemoComponent:\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case Fragment:\n\t    case Mode:\n\t    case Profiler:\n\t    case ContextConsumer:\n\t    case MemoComponent:\n\t      bubbleProperties(workInProgress);\n\t      return null;\n\n\t    case ClassComponent:\n\t      {\n\t        var Component = workInProgress.type;\n\n\t        if (isContextProvider(Component)) {\n\t          popContext(workInProgress);\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case HostRoot:\n\t      {\n\t        var fiberRoot = workInProgress.stateNode;\n\t        popHostContainer(workInProgress);\n\t        popTopLevelContextObject(workInProgress);\n\t        resetWorkInProgressVersions();\n\n\t        if (fiberRoot.pendingContext) {\n\t          fiberRoot.context = fiberRoot.pendingContext;\n\t          fiberRoot.pendingContext = null;\n\t        }\n\n\t        if (current === null || current.child === null) {\n\t          // If we hydrated, pop so that we can delete any remaining children\n\t          // that weren't hydrated.\n\t          var wasHydrated = popHydrationState(workInProgress);\n\n\t          if (wasHydrated) {\n\t            // If we hydrated, then we'll need to schedule an update for\n\t            // the commit side-effects on the root.\n\t            markUpdate(workInProgress);\n\t          } else {\n\t            if (current !== null) {\n\t              var prevState = current.memoizedState;\n\n\t              if ( // Check if this is a client root\n\t              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n\t              (workInProgress.flags & ForceClientRender) !== NoFlags) {\n\t                // Schedule an effect to clear this container at the start of the\n\t                // next commit. This handles the case of React rendering into a\n\t                // container with previous children. It's also safe to do for\n\t                // updates too, because current.child would only be null if the\n\t                // previous render was null (so the container would already\n\t                // be empty).\n\t                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n\t                // recoverable errors during first hydration attempt. If so, add\n\t                // them to a queue so we can log them in the commit phase.\n\n\t                upgradeHydrationErrorsToRecoverable();\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        updateHostContainer(current, workInProgress);\n\t        bubbleProperties(workInProgress);\n\n\t        return null;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        popHostContext(workInProgress);\n\t        var rootContainerInstance = getRootHostContainer();\n\t        var type = workInProgress.type;\n\n\t        if (current !== null && workInProgress.stateNode != null) {\n\t          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n\n\t          if (current.ref !== workInProgress.ref) {\n\t            markRef$1(workInProgress);\n\t          }\n\t        } else {\n\t          if (!newProps) {\n\t            if (workInProgress.stateNode === null) {\n\t              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n\t            } // This can happen when we abort work.\n\n\n\t            bubbleProperties(workInProgress);\n\t            return null;\n\t          }\n\n\t          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n\t          // \"stack\" as the parent. Then append children as we go in beginWork\n\t          // or completeWork depending on whether we want to add them top->down or\n\t          // bottom->up. Top->down is faster in IE11.\n\n\t          var _wasHydrated = popHydrationState(workInProgress);\n\n\t          if (_wasHydrated) {\n\t            // TODO: Move this and createInstance step into the beginPhase\n\t            // to consolidate.\n\t            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n\t              // If changes to the hydrated node need to be applied at the\n\t              // commit-phase we mark this as such.\n\t              markUpdate(workInProgress);\n\t            }\n\t          } else {\n\t            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n\t            appendAllChildren(instance, workInProgress, false, false);\n\t            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n\t            // (eg DOM renderer supports auto-focus for certain elements).\n\t            // Make sure such renderers get scheduled for later work.\n\n\t            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n\t              markUpdate(workInProgress);\n\t            }\n\t          }\n\n\t          if (workInProgress.ref !== null) {\n\t            // If there is a ref on a host node we need to schedule a callback\n\t            markRef$1(workInProgress);\n\t          }\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case HostText:\n\t      {\n\t        var newText = newProps;\n\n\t        if (current && workInProgress.stateNode != null) {\n\t          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n\t          // to schedule a side-effect to do the updates.\n\n\t          updateHostText$1(current, workInProgress, oldText, newText);\n\t        } else {\n\t          if (typeof newText !== 'string') {\n\t            if (workInProgress.stateNode === null) {\n\t              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n\t            } // This can happen when we abort work.\n\n\t          }\n\n\t          var _rootContainerInstance = getRootHostContainer();\n\n\t          var _currentHostContext = getHostContext();\n\n\t          var _wasHydrated2 = popHydrationState(workInProgress);\n\n\t          if (_wasHydrated2) {\n\t            if (prepareToHydrateHostTextInstance(workInProgress)) {\n\t              markUpdate(workInProgress);\n\t            }\n\t          } else {\n\t            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n\t          }\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        popSuspenseContext(workInProgress);\n\t        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n\t        // to its own fiber type so that we can add other kinds of hydration\n\t        // boundaries that aren't associated with a Suspense tree. In anticipation\n\t        // of such a refactor, all the hydration logic is contained in\n\t        // this branch.\n\n\t        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n\t          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n\n\t          if (!fallthroughToNormalSuspensePath) {\n\t            if (workInProgress.flags & ShouldCapture) {\n\t              // Special case. There were remaining unhydrated nodes. We treat\n\t              // this as a mismatch. Revert to client rendering.\n\t              return workInProgress;\n\t            } else {\n\t              // Did not finish hydrating, either because this is the initial\n\t              // render or because something suspended.\n\t              return null;\n\t            }\n\t          } // Continue with the normal Suspense path.\n\n\t        }\n\n\t        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n\t          // Something suspended. Re-render with the fallback children.\n\t          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n\t          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n\t            transferActualDuration(workInProgress);\n\t          } // Don't bubble properties in this case.\n\n\n\t          return workInProgress;\n\t        }\n\n\t        var nextDidTimeout = nextState !== null;\n\t        var prevDidTimeout = current !== null && current.memoizedState !== null;\n\t        // a passive effect, which is when we process the transitions\n\n\n\t        if (nextDidTimeout !== prevDidTimeout) {\n\t          // an effect to toggle the subtree's visibility. When we switch from\n\t          // fallback -> primary, the inner Offscreen fiber schedules this effect\n\t          // as part of its normal complete phase. But when we switch from\n\t          // primary -> fallback, the inner Offscreen fiber does not have a complete\n\t          // phase. So we need to schedule its effect here.\n\t          //\n\t          // We also use this flag to connect/disconnect the effects, but the same\n\t          // logic applies: when re-connecting, the Offscreen fiber's complete\n\t          // phase will handle scheduling the effect. It's only when the fallback\n\t          // is active that we have to do anything special.\n\n\n\t          if (nextDidTimeout) {\n\t            var _offscreenFiber2 = workInProgress.child;\n\t            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n\t            // in the concurrent tree already suspended during this render.\n\t            // This is a known bug.\n\n\t            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n\t              // TODO: Move this back to throwException because this is too late\n\t              // if this is a large tree which is common for initial loads. We\n\t              // don't know if we should restart a render or not until we get\n\t              // this marker, and this is too late.\n\t              // If this render already had a ping or lower pri updates,\n\t              // and this is the first time we know we're going to suspend we\n\t              // should be able to immediately restart from within throwException.\n\t              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n\t              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n\t                // If this was in an invisible tree or a new render, then showing\n\t                // this boundary is ok.\n\t                renderDidSuspend();\n\t              } else {\n\t                // Otherwise, we're going to have to hide content so we should\n\t                // suspend for longer if possible.\n\t                renderDidSuspendDelayIfPossible();\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        var wakeables = workInProgress.updateQueue;\n\n\t        if (wakeables !== null) {\n\t          // Schedule an effect to attach a retry listener to the promise.\n\t          // TODO: Move to passive phase\n\t          workInProgress.flags |= Update;\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\n\t        {\n\t          if ((workInProgress.mode & ProfileMode) !== NoMode) {\n\t            if (nextDidTimeout) {\n\t              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n\t              var primaryChildFragment = workInProgress.child;\n\n\t              if (primaryChildFragment !== null) {\n\t                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n\t                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        return null;\n\t      }\n\n\t    case HostPortal:\n\t      popHostContainer(workInProgress);\n\t      updateHostContainer(current, workInProgress);\n\n\t      if (current === null) {\n\t        preparePortalMount(workInProgress.stateNode.containerInfo);\n\t      }\n\n\t      bubbleProperties(workInProgress);\n\t      return null;\n\n\t    case ContextProvider:\n\t      // Pop provider fiber\n\t      var context = workInProgress.type._context;\n\t      popProvider(context, workInProgress);\n\t      bubbleProperties(workInProgress);\n\t      return null;\n\n\t    case IncompleteClassComponent:\n\t      {\n\t        // Same as class component case. I put it down here so that the tags are\n\t        // sequential to ensure this switch is compiled to a jump table.\n\t        var _Component = workInProgress.type;\n\n\t        if (isContextProvider(_Component)) {\n\t          popContext(workInProgress);\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        popSuspenseContext(workInProgress);\n\t        var renderState = workInProgress.memoizedState;\n\n\t        if (renderState === null) {\n\t          // We're running in the default, \"independent\" mode.\n\t          // We don't do anything in this mode.\n\t          bubbleProperties(workInProgress);\n\t          return null;\n\t        }\n\n\t        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\t        var renderedTail = renderState.rendering;\n\n\t        if (renderedTail === null) {\n\t          // We just rendered the head.\n\t          if (!didSuspendAlready) {\n\t            // This is the first pass. We need to figure out if anything is still\n\t            // suspended in the rendered set.\n\t            // If new content unsuspended, but there's still some content that\n\t            // didn't. Then we need to do a second pass that forces everything\n\t            // to keep showing their fallbacks.\n\t            // We might be suspended if something in this render pass suspended, or\n\t            // something in the previous committed pass suspended. Otherwise,\n\t            // there's no chance so we can skip the expensive call to\n\t            // findFirstSuspended.\n\t            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n\t            if (!cannotBeSuspended) {\n\t              var row = workInProgress.child;\n\n\t              while (row !== null) {\n\t                var suspended = findFirstSuspended(row);\n\n\t                if (suspended !== null) {\n\t                  didSuspendAlready = true;\n\t                  workInProgress.flags |= DidCapture;\n\t                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n\t                  // part of the second pass. In that case nothing will subscribe to\n\t                  // its thenables. Instead, we'll transfer its thenables to the\n\t                  // SuspenseList so that it can retry if they resolve.\n\t                  // There might be multiple of these in the list but since we're\n\t                  // going to wait for all of them anyway, it doesn't really matter\n\t                  // which ones gets to ping. In theory we could get clever and keep\n\t                  // track of how many dependencies remain but it gets tricky because\n\t                  // in the meantime, we can add/remove/change items and dependencies.\n\t                  // We might bail out of the loop before finding any but that\n\t                  // doesn't matter since that means that the other boundaries that\n\t                  // we did find already has their listeners attached.\n\n\t                  var newThenables = suspended.updateQueue;\n\n\t                  if (newThenables !== null) {\n\t                    workInProgress.updateQueue = newThenables;\n\t                    workInProgress.flags |= Update;\n\t                  } // Rerender the whole list, but this time, we'll force fallbacks\n\t                  // to stay in place.\n\t                  // Reset the effect flags before doing the second pass since that's now invalid.\n\t                  // Reset the child fibers to their original state.\n\n\n\t                  workInProgress.subtreeFlags = NoFlags;\n\t                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n\t                  // rerender the children.\n\n\t                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n\t                  return workInProgress.child;\n\t                }\n\n\t                row = row.sibling;\n\t              }\n\t            }\n\n\t            if (renderState.tail !== null && now() > getRenderTargetTime()) {\n\t              // We have already passed our CPU deadline but we still have rows\n\t              // left in the tail. We'll just give up further attempts to render\n\t              // the main content and only render fallbacks.\n\t              workInProgress.flags |= DidCapture;\n\t              didSuspendAlready = true;\n\t              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n\t              // to get it started back up to attempt the next item. While in terms\n\t              // of priority this work has the same priority as this current render,\n\t              // it's not part of the same transition once the transition has\n\t              // committed. If it's sync, we still want to yield so that it can be\n\t              // painted. Conceptually, this is really the same as pinging.\n\t              // We can use any RetryLane even if it's the one currently rendering\n\t              // since we're leaving it behind on this node.\n\n\t              workInProgress.lanes = SomeRetryLane;\n\t            }\n\t          } else {\n\t            cutOffTailIfNeeded(renderState, false);\n\t          } // Next we're going to render the tail.\n\n\t        } else {\n\t          // Append the rendered row to the child list.\n\t          if (!didSuspendAlready) {\n\t            var _suspended = findFirstSuspended(renderedTail);\n\n\t            if (_suspended !== null) {\n\t              workInProgress.flags |= DidCapture;\n\t              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n\t              // get lost if this row ends up dropped during a second pass.\n\n\t              var _newThenables = _suspended.updateQueue;\n\n\t              if (_newThenables !== null) {\n\t                workInProgress.updateQueue = _newThenables;\n\t                workInProgress.flags |= Update;\n\t              }\n\n\t              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n\t              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n\t              ) {\n\t                  // We're done.\n\t                  bubbleProperties(workInProgress);\n\t                  return null;\n\t                }\n\t            } else if ( // The time it took to render last row is greater than the remaining\n\t            // time we have to render. So rendering one more row would likely\n\t            // exceed it.\n\t            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n\t              // We have now passed our CPU deadline and we'll just give up further\n\t              // attempts to render the main content and only render fallbacks.\n\t              // The assumption is that this is usually faster.\n\t              workInProgress.flags |= DidCapture;\n\t              didSuspendAlready = true;\n\t              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n\t              // to get it started back up to attempt the next item. While in terms\n\t              // of priority this work has the same priority as this current render,\n\t              // it's not part of the same transition once the transition has\n\t              // committed. If it's sync, we still want to yield so that it can be\n\t              // painted. Conceptually, this is really the same as pinging.\n\t              // We can use any RetryLane even if it's the one currently rendering\n\t              // since we're leaving it behind on this node.\n\n\t              workInProgress.lanes = SomeRetryLane;\n\t            }\n\t          }\n\n\t          if (renderState.isBackwards) {\n\t            // The effect list of the backwards tail will have been added\n\t            // to the end. This breaks the guarantee that life-cycles fire in\n\t            // sibling order but that isn't a strong guarantee promised by React.\n\t            // Especially since these might also just pop in during future commits.\n\t            // Append to the beginning of the list.\n\t            renderedTail.sibling = workInProgress.child;\n\t            workInProgress.child = renderedTail;\n\t          } else {\n\t            var previousSibling = renderState.last;\n\n\t            if (previousSibling !== null) {\n\t              previousSibling.sibling = renderedTail;\n\t            } else {\n\t              workInProgress.child = renderedTail;\n\t            }\n\n\t            renderState.last = renderedTail;\n\t          }\n\t        }\n\n\t        if (renderState.tail !== null) {\n\t          // We still have tail rows to render.\n\t          // Pop a row.\n\t          var next = renderState.tail;\n\t          renderState.rendering = next;\n\t          renderState.tail = next.sibling;\n\t          renderState.renderingStartTime = now();\n\t          next.sibling = null; // Restore the context.\n\t          // TODO: We can probably just avoid popping it instead and only\n\t          // setting it the first time we go from not suspended to suspended.\n\n\t          var suspenseContext = suspenseStackCursor.current;\n\n\t          if (didSuspendAlready) {\n\t            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\t          } else {\n\t            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\t          }\n\n\t          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n\t          // Don't bubble properties in this case.\n\n\t          return next;\n\t        }\n\n\t        bubbleProperties(workInProgress);\n\t        return null;\n\t      }\n\n\t    case ScopeComponent:\n\t      {\n\n\t        break;\n\t      }\n\n\t    case OffscreenComponent:\n\t    case LegacyHiddenComponent:\n\t      {\n\t        popRenderLanes(workInProgress);\n\t        var _nextState = workInProgress.memoizedState;\n\t        var nextIsHidden = _nextState !== null;\n\n\t        if (current !== null) {\n\t          var _prevState = current.memoizedState;\n\t          var prevIsHidden = _prevState !== null;\n\n\t          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.\n\t          !enableLegacyHidden )) {\n\t            workInProgress.flags |= Visibility;\n\t          }\n\t        }\n\n\t        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n\t          bubbleProperties(workInProgress);\n\t        } else {\n\t          // Don't bubble properties for hidden children unless we're rendering\n\t          // at offscreen priority.\n\t          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n\t            bubbleProperties(workInProgress);\n\n\t            if (supportsMutation) {\n\t              // Check if there was an insertion or update in the hidden subtree.\n\t              // If so, we need to hide those nodes in the commit phase, so\n\t              // schedule a visibility effect.\n\t              if ( workInProgress.subtreeFlags & (Placement | Update)) {\n\t                workInProgress.flags |= Visibility;\n\t              }\n\t            }\n\t          }\n\t        }\n\t        return null;\n\t      }\n\n\t    case CacheComponent:\n\t      {\n\n\t        return null;\n\t      }\n\n\t    case TracingMarkerComponent:\n\t      {\n\n\t        return null;\n\t      }\n\t  }\n\n\t  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n\t}\n\n\tfunction unwindWork(current, workInProgress, renderLanes) {\n\t  // Note: This intentionally doesn't check if we're hydrating because comparing\n\t  // to the current tree provider fiber is just as fast and less error-prone.\n\t  // Ideally we would have a special version of the work loop only\n\t  // for hydration.\n\t  popTreeContext(workInProgress);\n\n\t  switch (workInProgress.tag) {\n\t    case ClassComponent:\n\t      {\n\t        var Component = workInProgress.type;\n\n\t        if (isContextProvider(Component)) {\n\t          popContext(workInProgress);\n\t        }\n\n\t        var flags = workInProgress.flags;\n\n\t        if (flags & ShouldCapture) {\n\t          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n\t          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n\t            transferActualDuration(workInProgress);\n\t          }\n\n\t          return workInProgress;\n\t        }\n\n\t        return null;\n\t      }\n\n\t    case HostRoot:\n\t      {\n\t        workInProgress.stateNode;\n\t        popHostContainer(workInProgress);\n\t        popTopLevelContextObject(workInProgress);\n\t        resetWorkInProgressVersions();\n\t        var _flags = workInProgress.flags;\n\n\t        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n\t          // There was an error during render that wasn't captured by a suspense\n\t          // boundary. Do a second pass on the root to unmount the children.\n\t          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n\t          return workInProgress;\n\t        } // We unwound to the root without completing it. Exit.\n\n\n\t        return null;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        // TODO: popHydrationState\n\t        popHostContext(workInProgress);\n\t        return null;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        popSuspenseContext(workInProgress);\n\t        var suspenseState = workInProgress.memoizedState;\n\n\t        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n\t          if (workInProgress.alternate === null) {\n\t            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n\t          }\n\n\t          resetHydrationState();\n\t        }\n\n\t        var _flags2 = workInProgress.flags;\n\n\t        if (_flags2 & ShouldCapture) {\n\t          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n\t          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n\t            transferActualDuration(workInProgress);\n\t          }\n\n\t          return workInProgress;\n\t        }\n\n\t        return null;\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n\t        // caught by a nested boundary. If not, it should bubble through.\n\n\t        return null;\n\t      }\n\n\t    case HostPortal:\n\t      popHostContainer(workInProgress);\n\t      return null;\n\n\t    case ContextProvider:\n\t      var context = workInProgress.type._context;\n\t      popProvider(context, workInProgress);\n\t      return null;\n\n\t    case OffscreenComponent:\n\t    case LegacyHiddenComponent:\n\t      popRenderLanes(workInProgress);\n\t      return null;\n\n\t    case CacheComponent:\n\n\t      return null;\n\n\t    default:\n\t      return null;\n\t  }\n\t}\n\n\tfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n\t  // Note: This intentionally doesn't check if we're hydrating because comparing\n\t  // to the current tree provider fiber is just as fast and less error-prone.\n\t  // Ideally we would have a special version of the work loop only\n\t  // for hydration.\n\t  popTreeContext(interruptedWork);\n\n\t  switch (interruptedWork.tag) {\n\t    case ClassComponent:\n\t      {\n\t        var childContextTypes = interruptedWork.type.childContextTypes;\n\n\t        if (childContextTypes !== null && childContextTypes !== undefined) {\n\t          popContext(interruptedWork);\n\t        }\n\n\t        break;\n\t      }\n\n\t    case HostRoot:\n\t      {\n\t        interruptedWork.stateNode;\n\t        popHostContainer(interruptedWork);\n\t        popTopLevelContextObject(interruptedWork);\n\t        resetWorkInProgressVersions();\n\t        break;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        popHostContext(interruptedWork);\n\t        break;\n\t      }\n\n\t    case HostPortal:\n\t      popHostContainer(interruptedWork);\n\t      break;\n\n\t    case SuspenseComponent:\n\t      popSuspenseContext(interruptedWork);\n\t      break;\n\n\t    case SuspenseListComponent:\n\t      popSuspenseContext(interruptedWork);\n\t      break;\n\n\t    case ContextProvider:\n\t      var context = interruptedWork.type._context;\n\t      popProvider(context, interruptedWork);\n\t      break;\n\n\t    case OffscreenComponent:\n\t    case LegacyHiddenComponent:\n\t      popRenderLanes(interruptedWork);\n\t      break;\n\t  }\n\t}\n\n\tfunction invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n\t  var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n\t  try {\n\t    func.apply(context, funcArgs);\n\t  } catch (error) {\n\t    this.onError(error);\n\t  }\n\t}\n\n\tvar invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\n\t{\n\t  // In DEV mode, we swap out invokeGuardedCallback for a special version\n\t  // that plays more nicely with the browser's DevTools. The idea is to preserve\n\t  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n\t  // functions in invokeGuardedCallback, and the production version of\n\t  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n\t  // like caught exceptions, and the DevTools won't pause unless the developer\n\t  // takes the extra step of enabling pause on caught exceptions. This is\n\t  // unintuitive, though, because even though React has caught the error, from\n\t  // the developer's perspective, the error is uncaught.\n\t  //\n\t  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n\t  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n\t  // DOM node, and call the user-provided callback from inside an event handler\n\t  // for that fake event. If the callback throws, the error is \"captured\" using\n\t  // a global event handler. But because the error happens in a different\n\t  // event loop context, it does not interrupt the normal program flow.\n\t  // Effectively, this gives us try-catch behavior without actually using\n\t  // try-catch. Neat!\n\t  // Check that the browser supports the APIs we need to implement our special\n\t  // DEV version of invokeGuardedCallback\n\t  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n\t    var fakeNode = document.createElement('react');\n\n\t    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n\t      // If document doesn't exist we know for sure we will crash in this method\n\t      // when we call document.createEvent(). However this can cause confusing\n\t      // errors: https://github.com/facebook/create-react-app/issues/3482\n\t      // So we preemptively throw with a better message instead.\n\t      if (typeof document === 'undefined' || document === null) {\n\t        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n\t      }\n\n\t      var evt = document.createEvent('Event');\n\t      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n\t      // set this to true at the beginning, then set it to false right after\n\t      // calling the function. If the function errors, `didError` will never be\n\t      // set to false. This strategy works even if the browser is flaky and\n\t      // fails to call our global error handler, because it doesn't rely on\n\t      // the error event at all.\n\n\t      var didError = true; // Keeps track of the value of window.event so that we can reset it\n\t      // during the callback to let user code access window.event in the\n\t      // browsers that support it.\n\n\t      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n\t      // dispatching: https://github.com/facebook/react/issues/13688\n\n\t      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n\t      function restoreAfterDispatch() {\n\t        // We immediately remove the callback from event listeners so that\n\t        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n\t        // nested call would trigger the fake event handlers of any call higher\n\t        // in the stack.\n\t        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n\t        // window.event assignment in both IE <= 10 as they throw an error\n\t        // \"Member not found\" in strict mode, and in Firefox which does not\n\t        // support window.event.\n\n\t        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n\t          window.event = windowEvent;\n\t        }\n\t      } // Create an event handler for our fake event. We will synchronously\n\t      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n\t      // call the user-provided callback.\n\n\n\t      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n\t      function callCallback() {\n\t        didCall = true;\n\t        restoreAfterDispatch();\n\t        func.apply(context, funcArgs);\n\t        didError = false;\n\t      } // Create a global error event handler. We use this to capture the value\n\t      // that was thrown. It's possible that this error handler will fire more\n\t      // than once; for example, if non-React code also calls `dispatchEvent`\n\t      // and a handler for that event throws. We should be resilient to most of\n\t      // those cases. Even if our error event handler fires more than once, the\n\t      // last error event is always used. If the callback actually does error,\n\t      // we know that the last error event is the correct one, because it's not\n\t      // possible for anything else to have happened in between our callback\n\t      // erroring and the code that follows the `dispatchEvent` call below. If\n\t      // the callback doesn't error, but the error event was fired, we know to\n\t      // ignore it because `didError` will be false, as described above.\n\n\n\t      var error; // Use this to track whether the error event is ever called.\n\n\t      var didSetError = false;\n\t      var isCrossOriginError = false;\n\n\t      function handleWindowError(event) {\n\t        error = event.error;\n\t        didSetError = true;\n\n\t        if (error === null && event.colno === 0 && event.lineno === 0) {\n\t          isCrossOriginError = true;\n\t        }\n\n\t        if (event.defaultPrevented) {\n\t          // Some other error handler has prevented default.\n\t          // Browsers silence the error report if this happens.\n\t          // We'll remember this to later decide whether to log it or not.\n\t          if (error != null && typeof error === 'object') {\n\t            try {\n\t              error._suppressLogging = true;\n\t            } catch (inner) {// Ignore.\n\t            }\n\t          }\n\t        }\n\t      } // Create a fake event type.\n\n\n\t      var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n\t      window.addEventListener('error', handleWindowError);\n\t      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n\t      // errors, it will trigger our global error handler.\n\n\t      evt.initEvent(evtType, false, false);\n\t      fakeNode.dispatchEvent(evt);\n\n\t      if (windowEventDescriptor) {\n\t        Object.defineProperty(window, 'event', windowEventDescriptor);\n\t      }\n\n\t      if (didCall && didError) {\n\t        if (!didSetError) {\n\t          // The callback errored, but the error event never fired.\n\t          // eslint-disable-next-line react-internal/prod-error-codes\n\t          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n\t        } else if (isCrossOriginError) {\n\t          // eslint-disable-next-line react-internal/prod-error-codes\n\t          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n\t        }\n\n\t        this.onError(error);\n\t      } // Remove our event listeners\n\n\n\t      window.removeEventListener('error', handleWindowError);\n\n\t      if (!didCall) {\n\t        // Something went really wrong, and our event was not dispatched.\n\t        // https://github.com/facebook/react/issues/16734\n\t        // https://github.com/facebook/react/issues/16585\n\t        // Fall back to the production implementation.\n\t        restoreAfterDispatch();\n\t        return invokeGuardedCallbackProd.apply(this, arguments);\n\t      }\n\t    };\n\t  }\n\t}\n\n\tvar invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n\n\tvar hasError = false;\n\tvar caughtError = null; // Used by event system to capture/rethrow the first error.\n\tvar reporter = {\n\t  onError: function (error) {\n\t    hasError = true;\n\t    caughtError = error;\n\t  }\n\t};\n\t/**\n\t * Call a function while guarding against errors that happens within it.\n\t * Returns an error if it throws, otherwise null.\n\t *\n\t * In production, this is implemented using a try-catch. The reason we don't\n\t * use a try-catch directly is so that we can swap out a different\n\t * implementation in DEV mode.\n\t *\n\t * @param {String} name of the guard to use for logging or debugging\n\t * @param {Function} func The function to invoke\n\t * @param {*} context The context to use when calling the function\n\t * @param {...*} args Arguments for function\n\t */\n\n\tfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n\t  hasError = false;\n\t  caughtError = null;\n\t  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n\t}\n\tfunction hasCaughtError() {\n\t  return hasError;\n\t}\n\tfunction clearCaughtError() {\n\t  if (hasError) {\n\t    var error = caughtError;\n\t    hasError = false;\n\t    caughtError = null;\n\t    return error;\n\t  } else {\n\t    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n\t  }\n\t}\n\n\tvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n\t{\n\t  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n\t} // Used during the commit phase to track the state of the Offscreen component stack.\n\t// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n\t// Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n\n\tvar offscreenSubtreeIsHidden = false;\n\tvar offscreenSubtreeWasHidden = false;\n\tvar PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\tvar nextEffect = null; // Used for Profiling builds to track updaters.\n\n\tvar inProgressLanes = null;\n\tvar inProgressRoot = null;\n\tfunction reportUncaughtErrorInDEV(error) {\n\t  // Wrapping each small part of the commit phase into a guarded\n\t  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n\t  // But we rely on it to surface errors to DEV tools like overlays\n\t  // (https://github.com/facebook/react/issues/21712).\n\t  // As a compromise, rethrow only caught errors in a guard.\n\t  {\n\t    invokeGuardedCallback(null, function () {\n\t      throw error;\n\t    });\n\t    clearCaughtError();\n\t  }\n\t}\n\n\tvar callComponentWillUnmountWithTimer = function (current, instance) {\n\t  instance.props = current.memoizedProps;\n\t  instance.state = current.memoizedState;\n\n\t  if ( current.mode & ProfileMode) {\n\t    try {\n\t      startLayoutEffectTimer();\n\t      instance.componentWillUnmount();\n\t    } finally {\n\t      recordLayoutEffectDuration(current);\n\t    }\n\t  } else {\n\t    instance.componentWillUnmount();\n\t  }\n\t}; // Capture errors so they don't interrupt mounting.\n\n\n\tfunction safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n\t  try {\n\t    commitHookEffectListMount(Layout, current);\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t} // Capture errors so they don't interrupt unmounting.\n\n\n\tfunction safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n\t  try {\n\t    callComponentWillUnmountWithTimer(current, instance);\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t} // Capture errors so they don't interrupt mounting.\n\n\n\tfunction safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n\t  try {\n\t    instance.componentDidMount();\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t} // Capture errors so they don't interrupt mounting.\n\n\n\tfunction safelyAttachRef(current, nearestMountedAncestor) {\n\t  try {\n\t    commitAttachRef(current);\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t}\n\n\tfunction safelyDetachRef(current, nearestMountedAncestor) {\n\t  var ref = current.ref;\n\n\t  if (ref !== null) {\n\t    if (typeof ref === 'function') {\n\t      var retVal;\n\n\t      try {\n\t        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n\t          try {\n\t            startLayoutEffectTimer();\n\t            retVal = ref(null);\n\t          } finally {\n\t            recordLayoutEffectDuration(current);\n\t          }\n\t        } else {\n\t          retVal = ref(null);\n\t        }\n\t      } catch (error) {\n\t        captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t      }\n\n\t      {\n\t        if (typeof retVal === 'function') {\n\t          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n\t        }\n\t      }\n\t    } else {\n\t      ref.current = null;\n\t    }\n\t  }\n\t}\n\n\tfunction safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n\t  try {\n\t    destroy();\n\t  } catch (error) {\n\t    captureCommitPhaseError(current, nearestMountedAncestor, error);\n\t  }\n\t}\n\tvar shouldFireAfterActiveInstanceBlur = false;\n\tfunction commitBeforeMutationEffects(root, firstChild) {\n\t  prepareForCommit(root.containerInfo);\n\t  nextEffect = firstChild;\n\t  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n\t  var shouldFire = shouldFireAfterActiveInstanceBlur;\n\t  shouldFireAfterActiveInstanceBlur = false;\n\t  return shouldFire;\n\t}\n\n\tfunction commitBeforeMutationEffects_begin() {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n\t    var child = fiber.child;\n\n\t    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n\t      child.return = fiber;\n\t      nextEffect = child;\n\t    } else {\n\t      commitBeforeMutationEffects_complete();\n\t    }\n\t  }\n\t}\n\n\tfunction commitBeforeMutationEffects_complete() {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    setCurrentFiber(fiber);\n\n\t    try {\n\t      commitBeforeMutationEffectsOnFiber(fiber);\n\t    } catch (error) {\n\t      captureCommitPhaseError(fiber, fiber.return, error);\n\t    }\n\n\t    resetCurrentFiber();\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction commitBeforeMutationEffectsOnFiber(finishedWork) {\n\t  var current = finishedWork.alternate;\n\t  var flags = finishedWork.flags;\n\n\t  if ((flags & Snapshot) !== NoFlags) {\n\t    setCurrentFiber(finishedWork);\n\n\t    switch (finishedWork.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          if (current !== null) {\n\t            var prevProps = current.memoizedProps;\n\t            var prevState = current.memoizedState;\n\t            var instance = finishedWork.stateNode; // We could update instance props and state here,\n\t            // but instead we rely on them being set during last render.\n\t            // TODO: revisit this when we implement resuming.\n\n\t            {\n\t              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n\t                if (instance.props !== finishedWork.memoizedProps) {\n\t                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                }\n\n\t                if (instance.state !== finishedWork.memoizedState) {\n\t                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                }\n\t              }\n\t            }\n\n\t            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n\t            {\n\t              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n\t              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n\t                didWarnSet.add(finishedWork.type);\n\n\t                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n\t              }\n\t            }\n\n\t            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostRoot:\n\t        {\n\t          if (supportsMutation) {\n\t            var root = finishedWork.stateNode;\n\t            clearContainer(root.containerInfo);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t      case HostText:\n\t      case HostPortal:\n\t      case IncompleteClassComponent:\n\t        // Nothing to do for these component types\n\t        break;\n\n\t      default:\n\t        {\n\t          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n\t        }\n\t    }\n\n\t    resetCurrentFiber();\n\t  }\n\t}\n\n\tfunction commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n\t  var updateQueue = finishedWork.updateQueue;\n\t  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n\t  if (lastEffect !== null) {\n\t    var firstEffect = lastEffect.next;\n\t    var effect = firstEffect;\n\n\t    do {\n\t      if ((effect.tag & flags) === flags) {\n\t        // Unmount\n\t        var destroy = effect.destroy;\n\t        effect.destroy = undefined;\n\n\t        if (destroy !== undefined) {\n\t          {\n\t            if ((flags & Passive$1) !== NoFlags$1) {\n\t              markComponentPassiveEffectUnmountStarted(finishedWork);\n\t            } else if ((flags & Layout) !== NoFlags$1) {\n\t              markComponentLayoutEffectUnmountStarted(finishedWork);\n\t            }\n\t          }\n\n\t          {\n\t            if ((flags & Insertion) !== NoFlags$1) {\n\t              setIsRunningInsertionEffect(true);\n\t            }\n\t          }\n\n\t          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n\n\t          {\n\t            if ((flags & Insertion) !== NoFlags$1) {\n\t              setIsRunningInsertionEffect(false);\n\t            }\n\t          }\n\n\t          {\n\t            if ((flags & Passive$1) !== NoFlags$1) {\n\t              markComponentPassiveEffectUnmountStopped();\n\t            } else if ((flags & Layout) !== NoFlags$1) {\n\t              markComponentLayoutEffectUnmountStopped();\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      effect = effect.next;\n\t    } while (effect !== firstEffect);\n\t  }\n\t}\n\n\tfunction commitHookEffectListMount(flags, finishedWork) {\n\t  var updateQueue = finishedWork.updateQueue;\n\t  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n\t  if (lastEffect !== null) {\n\t    var firstEffect = lastEffect.next;\n\t    var effect = firstEffect;\n\n\t    do {\n\t      if ((effect.tag & flags) === flags) {\n\t        {\n\t          if ((flags & Passive$1) !== NoFlags$1) {\n\t            markComponentPassiveEffectMountStarted(finishedWork);\n\t          } else if ((flags & Layout) !== NoFlags$1) {\n\t            markComponentLayoutEffectMountStarted(finishedWork);\n\t          }\n\t        } // Mount\n\n\n\t        var create = effect.create;\n\n\t        {\n\t          if ((flags & Insertion) !== NoFlags$1) {\n\t            setIsRunningInsertionEffect(true);\n\t          }\n\t        }\n\n\t        effect.destroy = create();\n\n\t        {\n\t          if ((flags & Insertion) !== NoFlags$1) {\n\t            setIsRunningInsertionEffect(false);\n\t          }\n\t        }\n\n\t        {\n\t          if ((flags & Passive$1) !== NoFlags$1) {\n\t            markComponentPassiveEffectMountStopped();\n\t          } else if ((flags & Layout) !== NoFlags$1) {\n\t            markComponentLayoutEffectMountStopped();\n\t          }\n\t        }\n\n\t        {\n\t          var destroy = effect.destroy;\n\n\t          if (destroy !== undefined && typeof destroy !== 'function') {\n\t            var hookName = void 0;\n\n\t            if ((effect.tag & Layout) !== NoFlags) {\n\t              hookName = 'useLayoutEffect';\n\t            } else if ((effect.tag & Insertion) !== NoFlags) {\n\t              hookName = 'useInsertionEffect';\n\t            } else {\n\t              hookName = 'useEffect';\n\t            }\n\n\t            var addendum = void 0;\n\n\t            if (destroy === null) {\n\t              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n\t            } else if (typeof destroy.then === 'function') {\n\t              addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n\t            } else {\n\t              addendum = ' You returned: ' + destroy;\n\t            }\n\n\t            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n\t          }\n\t        }\n\t      }\n\n\t      effect = effect.next;\n\t    } while (effect !== firstEffect);\n\t  }\n\t}\n\n\tfunction commitPassiveEffectDurations(finishedRoot, finishedWork) {\n\t  {\n\t    // Only Profilers with work in their subtree will have an Update effect scheduled.\n\t    if ((finishedWork.flags & Update) !== NoFlags) {\n\t      switch (finishedWork.tag) {\n\t        case Profiler:\n\t          {\n\t            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n\t            var _finishedWork$memoize = finishedWork.memoizedProps,\n\t                id = _finishedWork$memoize.id,\n\t                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n\t            // It does not get reset until the start of the next commit phase.\n\n\t            var commitTime = getCommitTime();\n\t            var phase = finishedWork.alternate === null ? 'mount' : 'update';\n\n\t            {\n\t              if (isCurrentUpdateNested()) {\n\t                phase = 'nested-update';\n\t              }\n\t            }\n\n\t            if (typeof onPostCommit === 'function') {\n\t              onPostCommit(id, phase, passiveEffectDuration, commitTime);\n\t            } // Bubble times to the next nearest ancestor Profiler.\n\t            // After we process that Profiler, we'll bubble further up.\n\n\n\t            var parentFiber = finishedWork.return;\n\n\t            outer: while (parentFiber !== null) {\n\t              switch (parentFiber.tag) {\n\t                case HostRoot:\n\t                  var root = parentFiber.stateNode;\n\t                  root.passiveEffectDuration += passiveEffectDuration;\n\t                  break outer;\n\n\t                case Profiler:\n\t                  var parentStateNode = parentFiber.stateNode;\n\t                  parentStateNode.passiveEffectDuration += passiveEffectDuration;\n\t                  break outer;\n\t              }\n\n\t              parentFiber = parentFiber.return;\n\t            }\n\n\t            break;\n\t          }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n\t  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n\t    switch (finishedWork.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          if ( !offscreenSubtreeWasHidden) {\n\t            // At this point layout effects have already been destroyed (during mutation phase).\n\t            // This is done to prevent sibling component effects from interfering with each other,\n\t            // e.g. a destroy function in one component should never override a ref set\n\t            // by a create function in another component during the same commit.\n\t            if ( finishedWork.mode & ProfileMode) {\n\t              try {\n\t                startLayoutEffectTimer();\n\t                commitHookEffectListMount(Layout | HasEffect, finishedWork);\n\t              } finally {\n\t                recordLayoutEffectDuration(finishedWork);\n\t              }\n\t            } else {\n\t              commitHookEffectListMount(Layout | HasEffect, finishedWork);\n\t            }\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          var instance = finishedWork.stateNode;\n\n\t          if (finishedWork.flags & Update) {\n\t            if (!offscreenSubtreeWasHidden) {\n\t              if (current === null) {\n\t                // We could update instance props and state here,\n\t                // but instead we rely on them being set during last render.\n\t                // TODO: revisit this when we implement resuming.\n\t                {\n\t                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n\t                    if (instance.props !== finishedWork.memoizedProps) {\n\t                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                    }\n\n\t                    if (instance.state !== finishedWork.memoizedState) {\n\t                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                    }\n\t                  }\n\t                }\n\n\t                if ( finishedWork.mode & ProfileMode) {\n\t                  try {\n\t                    startLayoutEffectTimer();\n\t                    instance.componentDidMount();\n\t                  } finally {\n\t                    recordLayoutEffectDuration(finishedWork);\n\t                  }\n\t                } else {\n\t                  instance.componentDidMount();\n\t                }\n\t              } else {\n\t                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n\t                var prevState = current.memoizedState; // We could update instance props and state here,\n\t                // but instead we rely on them being set during last render.\n\t                // TODO: revisit this when we implement resuming.\n\n\t                {\n\t                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n\t                    if (instance.props !== finishedWork.memoizedProps) {\n\t                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                    }\n\n\t                    if (instance.state !== finishedWork.memoizedState) {\n\t                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                    }\n\t                  }\n\t                }\n\n\t                if ( finishedWork.mode & ProfileMode) {\n\t                  try {\n\t                    startLayoutEffectTimer();\n\t                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n\t                  } finally {\n\t                    recordLayoutEffectDuration(finishedWork);\n\t                  }\n\t                } else {\n\t                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n\t                }\n\t              }\n\t            }\n\t          } // TODO: I think this is now always non-null by the time it reaches the\n\t          // commit phase. Consider removing the type check.\n\n\n\t          var updateQueue = finishedWork.updateQueue;\n\n\t          if (updateQueue !== null) {\n\t            {\n\t              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n\t                if (instance.props !== finishedWork.memoizedProps) {\n\t                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                }\n\n\t                if (instance.state !== finishedWork.memoizedState) {\n\t                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n\t                }\n\t              }\n\t            } // We could update instance props and state here,\n\t            // but instead we rely on them being set during last render.\n\t            // TODO: revisit this when we implement resuming.\n\n\n\t            commitUpdateQueue(finishedWork, updateQueue, instance);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostRoot:\n\t        {\n\t          // TODO: I think this is now always non-null by the time it reaches the\n\t          // commit phase. Consider removing the type check.\n\t          var _updateQueue = finishedWork.updateQueue;\n\n\t          if (_updateQueue !== null) {\n\t            var _instance = null;\n\n\t            if (finishedWork.child !== null) {\n\t              switch (finishedWork.child.tag) {\n\t                case HostComponent:\n\t                  _instance = getPublicInstance(finishedWork.child.stateNode);\n\t                  break;\n\n\t                case ClassComponent:\n\t                  _instance = finishedWork.child.stateNode;\n\t                  break;\n\t              }\n\t            }\n\n\t            commitUpdateQueue(finishedWork, _updateQueue, _instance);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t        {\n\t          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n\t          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n\t          // These effects should only be committed when components are first mounted,\n\t          // aka when there is no current/alternate.\n\n\t          if (current === null && finishedWork.flags & Update) {\n\t            var type = finishedWork.type;\n\t            var props = finishedWork.memoizedProps;\n\t            commitMount(_instance2, type, props, finishedWork);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostText:\n\t        {\n\t          // We have no life-cycles associated with text.\n\t          break;\n\t        }\n\n\t      case HostPortal:\n\t        {\n\t          // We have no life-cycles associated with portals.\n\t          break;\n\t        }\n\n\t      case Profiler:\n\t        {\n\t          {\n\t            var _finishedWork$memoize2 = finishedWork.memoizedProps,\n\t                onCommit = _finishedWork$memoize2.onCommit,\n\t                onRender = _finishedWork$memoize2.onRender;\n\t            var effectDuration = finishedWork.stateNode.effectDuration;\n\t            var commitTime = getCommitTime();\n\t            var phase = current === null ? 'mount' : 'update';\n\n\t            {\n\t              if (isCurrentUpdateNested()) {\n\t                phase = 'nested-update';\n\t              }\n\t            }\n\n\t            if (typeof onRender === 'function') {\n\t              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n\t            }\n\n\t            {\n\t              if (typeof onCommit === 'function') {\n\t                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n\t              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n\t              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n\t              // because the effect is also where times bubble to parent Profilers.\n\n\n\t              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n\t              // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n\t              var parentFiber = finishedWork.return;\n\n\t              outer: while (parentFiber !== null) {\n\t                switch (parentFiber.tag) {\n\t                  case HostRoot:\n\t                    var root = parentFiber.stateNode;\n\t                    root.effectDuration += effectDuration;\n\t                    break outer;\n\n\t                  case Profiler:\n\t                    var parentStateNode = parentFiber.stateNode;\n\t                    parentStateNode.effectDuration += effectDuration;\n\t                    break outer;\n\t                }\n\n\t                parentFiber = parentFiber.return;\n\t              }\n\t            }\n\t          }\n\n\t          break;\n\t        }\n\n\t      case SuspenseComponent:\n\t        {\n\t          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n\t          break;\n\t        }\n\n\t      case SuspenseListComponent:\n\t      case IncompleteClassComponent:\n\t      case ScopeComponent:\n\t      case OffscreenComponent:\n\t      case LegacyHiddenComponent:\n\t      case TracingMarkerComponent:\n\t        {\n\t          break;\n\t        }\n\n\t      default:\n\t        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n\t    }\n\t  }\n\n\t  if ( !offscreenSubtreeWasHidden) {\n\t    {\n\t      if (finishedWork.flags & Ref) {\n\t        commitAttachRef(finishedWork);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction reappearLayoutEffectsOnFiber(node) {\n\t  // Turn on layout effects in a tree that previously disappeared.\n\t  // TODO (Offscreen) Check: flags & LayoutStatic\n\t  switch (node.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if ( node.mode & ProfileMode) {\n\t          try {\n\t            startLayoutEffectTimer();\n\t            safelyCallCommitHookLayoutEffectListMount(node, node.return);\n\t          } finally {\n\t            recordLayoutEffectDuration(node);\n\t          }\n\t        } else {\n\t          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n\t        }\n\n\t        break;\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        var instance = node.stateNode;\n\n\t        if (typeof instance.componentDidMount === 'function') {\n\t          safelyCallComponentDidMount(node, node.return, instance);\n\t        }\n\n\t        safelyAttachRef(node, node.return);\n\t        break;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        safelyAttachRef(node, node.return);\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n\t  // Only hide or unhide the top-most host nodes.\n\t  var hostSubtreeRoot = null;\n\n\t  if (supportsMutation) {\n\t    // We only have the top Fiber that was inserted but we need to recurse down its\n\t    // children to find all the terminal nodes.\n\t    var node = finishedWork;\n\n\t    while (true) {\n\t      if (node.tag === HostComponent) {\n\t        if (hostSubtreeRoot === null) {\n\t          hostSubtreeRoot = node;\n\n\t          try {\n\t            var instance = node.stateNode;\n\n\t            if (isHidden) {\n\t              hideInstance(instance);\n\t            } else {\n\t              unhideInstance(node.stateNode, node.memoizedProps);\n\t            }\n\t          } catch (error) {\n\t            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t          }\n\t        }\n\t      } else if (node.tag === HostText) {\n\t        if (hostSubtreeRoot === null) {\n\t          try {\n\t            var _instance3 = node.stateNode;\n\n\t            if (isHidden) {\n\t              hideTextInstance(_instance3);\n\t            } else {\n\t              unhideTextInstance(_instance3, node.memoizedProps);\n\t            }\n\t          } catch (error) {\n\t            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t          }\n\t        }\n\t      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      }\n\n\t      if (node === finishedWork) {\n\t        return;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === finishedWork) {\n\t          return;\n\t        }\n\n\t        if (hostSubtreeRoot === node) {\n\t          hostSubtreeRoot = null;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      if (hostSubtreeRoot === node) {\n\t        hostSubtreeRoot = null;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  }\n\t}\n\n\tfunction commitAttachRef(finishedWork) {\n\t  var ref = finishedWork.ref;\n\n\t  if (ref !== null) {\n\t    var instance = finishedWork.stateNode;\n\t    var instanceToUse;\n\n\t    switch (finishedWork.tag) {\n\t      case HostComponent:\n\t        instanceToUse = getPublicInstance(instance);\n\t        break;\n\n\t      default:\n\t        instanceToUse = instance;\n\t    } // Moved outside to ensure DCE works with this flag\n\n\t    if (typeof ref === 'function') {\n\t      var retVal;\n\n\t      if ( finishedWork.mode & ProfileMode) {\n\t        try {\n\t          startLayoutEffectTimer();\n\t          retVal = ref(instanceToUse);\n\t        } finally {\n\t          recordLayoutEffectDuration(finishedWork);\n\t        }\n\t      } else {\n\t        retVal = ref(instanceToUse);\n\t      }\n\n\t      {\n\t        if (typeof retVal === 'function') {\n\t          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n\t        }\n\t      }\n\t    } else {\n\t      {\n\t        if (!ref.hasOwnProperty('current')) {\n\t          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n\t        }\n\t      }\n\n\t      ref.current = instanceToUse;\n\t    }\n\t  }\n\t}\n\n\tfunction detachFiberMutation(fiber) {\n\t  // Cut off the return pointer to disconnect it from the tree.\n\t  // This enables us to detect and warn against state updates on an unmounted component.\n\t  // It also prevents events from bubbling from within disconnected components.\n\t  //\n\t  // Ideally, we should also clear the child pointer of the parent alternate to let this\n\t  // get GC:ed but we don't know which for sure which parent is the current\n\t  // one so we'll settle for GC:ing the subtree of this child.\n\t  // This child itself will be GC:ed when the parent updates the next time.\n\t  //\n\t  // Note that we can't clear child or sibling pointers yet.\n\t  // They're needed for passive effects and for findDOMNode.\n\t  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n\t  //\n\t  // Don't reset the alternate yet, either. We need that so we can detach the\n\t  // alternate's fields in the passive phase. Clearing the return pointer is\n\t  // sufficient for findDOMNode semantics.\n\t  var alternate = fiber.alternate;\n\n\t  if (alternate !== null) {\n\t    alternate.return = null;\n\t  }\n\n\t  fiber.return = null;\n\t}\n\n\tfunction detachFiberAfterEffects(fiber) {\n\t  var alternate = fiber.alternate;\n\n\t  if (alternate !== null) {\n\t    fiber.alternate = null;\n\t    detachFiberAfterEffects(alternate);\n\t  } // Note: Defensively using negation instead of < in case\n\t  // `deletedTreeCleanUpLevel` is undefined.\n\n\n\t  {\n\t    // Clear cyclical Fiber fields. This level alone is designed to roughly\n\t    // approximate the planned Fiber refactor. In that world, `setState` will be\n\t    // bound to a special \"instance\" object instead of a Fiber. The Instance\n\t    // object will not have any of these fields. It will only be connected to\n\t    // the fiber tree via a single link at the root. So if this level alone is\n\t    // sufficient to fix memory issues, that bodes well for our plans.\n\t    fiber.child = null;\n\t    fiber.deletions = null;\n\t    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n\t    // tree, which has its own pointers to children, parents, and siblings.\n\t    // The other host nodes also point back to fibers, so we should detach that\n\t    // one, too.\n\n\t    if (fiber.tag === HostComponent) {\n\t      var hostInstance = fiber.stateNode;\n\n\t      if (hostInstance !== null) {\n\t        detachDeletedInstance(hostInstance);\n\t      }\n\t    }\n\n\t    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n\t    // already disconnect the `return` pointer at the root of the deleted\n\t    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n\t    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n\t    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n\t    {\n\t      fiber._debugOwner = null;\n\t    }\n\n\t    {\n\t      // Theoretically, nothing in here should be necessary, because we already\n\t      // disconnected the fiber from the tree. So even if something leaks this\n\t      // particular fiber, it won't leak anything else\n\t      //\n\t      // The purpose of this branch is to be super aggressive so we can measure\n\t      // if there's any difference in memory impact. If there is, that could\n\t      // indicate a React leak we don't know about.\n\t      fiber.return = null;\n\t      fiber.dependencies = null;\n\t      fiber.memoizedProps = null;\n\t      fiber.memoizedState = null;\n\t      fiber.pendingProps = null;\n\t      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n\t      fiber.updateQueue = null;\n\t    }\n\t  }\n\t}\n\n\tfunction emptyPortalContainer(current) {\n\t  if (!supportsPersistence) {\n\t    return;\n\t  }\n\n\t  var portal = current.stateNode;\n\t  var containerInfo = portal.containerInfo;\n\t  var emptyChildSet = createContainerChildSet(containerInfo);\n\t  replaceContainerChildren(containerInfo, emptyChildSet);\n\t}\n\n\tfunction getHostParentFiber(fiber) {\n\t  var parent = fiber.return;\n\n\t  while (parent !== null) {\n\t    if (isHostParent(parent)) {\n\t      return parent;\n\t    }\n\n\t    parent = parent.return;\n\t  }\n\n\t  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n\t}\n\n\tfunction isHostParent(fiber) {\n\t  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n\t}\n\n\tfunction getHostSibling(fiber) {\n\t  // We're going to search forward into the tree until we find a sibling host\n\t  // node. Unfortunately, if multiple insertions are done in a row we have to\n\t  // search past them. This leads to exponential search for the next sibling.\n\t  // TODO: Find a more efficient way to do this.\n\t  var node = fiber;\n\n\t  siblings: while (true) {\n\t    // If we didn't find anything, let's try the next sibling.\n\t    while (node.sibling === null) {\n\t      if (node.return === null || isHostParent(node.return)) {\n\t        // If we pop out of the root or hit the parent the fiber we are the\n\t        // last sibling.\n\t        return null;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    node.sibling.return = node.return;\n\t    node = node.sibling;\n\n\t    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n\t      // If it is not host node and, we might have a host node inside it.\n\t      // Try to search down until we find one.\n\t      if (node.flags & Placement) {\n\t        // If we don't have a child, try the siblings instead.\n\t        continue siblings;\n\t      } // If we don't have a child, try the siblings instead.\n\t      // We also skip portals because they are not part of this host tree.\n\n\n\t      if (node.child === null || node.tag === HostPortal) {\n\t        continue siblings;\n\t      } else {\n\t        node.child.return = node;\n\t        node = node.child;\n\t      }\n\t    } // Check if this host node is stable or about to be placed.\n\n\n\t    if (!(node.flags & Placement)) {\n\t      // Found it!\n\t      return node.stateNode;\n\t    }\n\t  }\n\t}\n\n\tfunction commitPlacement(finishedWork) {\n\t  if (!supportsMutation) {\n\t    return;\n\t  } // Recursively insert all host nodes into the parent.\n\n\n\t  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n\t  switch (parentFiber.tag) {\n\t    case HostComponent:\n\t      {\n\t        var parent = parentFiber.stateNode;\n\n\t        if (parentFiber.flags & ContentReset) {\n\t          // Reset the text content of the parent before doing any insertions\n\t          resetTextContent(parent); // Clear ContentReset from the effect tag\n\n\t          parentFiber.flags &= ~ContentReset;\n\t        }\n\n\t        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n\t        // children to find all the terminal nodes.\n\n\t        insertOrAppendPlacementNode(finishedWork, before, parent);\n\t        break;\n\t      }\n\n\t    case HostRoot:\n\t    case HostPortal:\n\t      {\n\t        var _parent = parentFiber.stateNode.containerInfo;\n\n\t        var _before = getHostSibling(finishedWork);\n\n\t        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n\t        break;\n\t      }\n\t    // eslint-disable-next-line-no-fallthrough\n\n\t    default:\n\t      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n\t  }\n\t}\n\n\tfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n\t  var tag = node.tag;\n\t  var isHost = tag === HostComponent || tag === HostText;\n\n\t  if (isHost) {\n\t    var stateNode = node.stateNode;\n\n\t    if (before) {\n\t      insertInContainerBefore(parent, stateNode, before);\n\t    } else {\n\t      appendChildToContainer(parent, stateNode);\n\t    }\n\t  } else if (tag === HostPortal) ; else {\n\t    var child = node.child;\n\n\t    if (child !== null) {\n\t      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n\t      var sibling = child.sibling;\n\n\t      while (sibling !== null) {\n\t        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n\t        sibling = sibling.sibling;\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction insertOrAppendPlacementNode(node, before, parent) {\n\t  var tag = node.tag;\n\t  var isHost = tag === HostComponent || tag === HostText;\n\n\t  if (isHost) {\n\t    var stateNode = node.stateNode;\n\n\t    if (before) {\n\t      insertBefore(parent, stateNode, before);\n\t    } else {\n\t      appendChild(parent, stateNode);\n\t    }\n\t  } else if (tag === HostPortal) ; else {\n\t    var child = node.child;\n\n\t    if (child !== null) {\n\t      insertOrAppendPlacementNode(child, before, parent);\n\t      var sibling = child.sibling;\n\n\t      while (sibling !== null) {\n\t        insertOrAppendPlacementNode(sibling, before, parent);\n\t        sibling = sibling.sibling;\n\t      }\n\t    }\n\t  }\n\t} // These are tracked on the stack as we recursively traverse a\n\t// deleted subtree.\n\t// TODO: Update these during the whole mutation phase, not just during\n\t// a deletion.\n\n\n\tvar hostParent = null;\n\tvar hostParentIsContainer = false;\n\n\tfunction commitDeletionEffects(root, returnFiber, deletedFiber) {\n\t  if (supportsMutation) {\n\t    // We only have the top Fiber that was deleted but we need to recurse down its\n\t    // children to find all the terminal nodes.\n\t    // Recursively delete all host nodes from the parent, detach refs, clean\n\t    // up mounted layout effects, and call componentWillUnmount.\n\t    // We only need to remove the topmost host child in each branch. But then we\n\t    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n\t    // could split this into two separate traversals functions, where the second\n\t    // one doesn't include any removeChild logic. This is maybe the same\n\t    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n\t    // the layout phase is refactored to use recursion).\n\t    // Before starting, find the nearest host parent on the stack so we know\n\t    // which instance/container to remove the children from.\n\t    // TODO: Instead of searching up the fiber return path on every deletion, we\n\t    // can track the nearest host component on the JS stack as we traverse the\n\t    // tree during the commit phase. This would make insertions faster, too.\n\t    var parent = returnFiber;\n\n\t    findParent: while (parent !== null) {\n\t      switch (parent.tag) {\n\t        case HostComponent:\n\t          {\n\t            hostParent = parent.stateNode;\n\t            hostParentIsContainer = false;\n\t            break findParent;\n\t          }\n\n\t        case HostRoot:\n\t          {\n\t            hostParent = parent.stateNode.containerInfo;\n\t            hostParentIsContainer = true;\n\t            break findParent;\n\t          }\n\n\t        case HostPortal:\n\t          {\n\t            hostParent = parent.stateNode.containerInfo;\n\t            hostParentIsContainer = true;\n\t            break findParent;\n\t          }\n\t      }\n\n\t      parent = parent.return;\n\t    }\n\n\t    if (hostParent === null) {\n\t      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n\t    }\n\n\t    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n\t    hostParent = null;\n\t    hostParentIsContainer = false;\n\t  } else {\n\t    // Detach refs and call componentWillUnmount() on the whole subtree.\n\t    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n\t  }\n\n\t  detachFiberMutation(deletedFiber);\n\t}\n\n\tfunction recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n\t  // TODO: Use a static flag to skip trees that don't have unmount effects\n\t  var child = parent.child;\n\n\t  while (child !== null) {\n\t    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n\t    child = child.sibling;\n\t  }\n\t}\n\n\tfunction commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n\t  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n\t  // into their subtree. There are simpler cases in the inner switch\n\t  // that don't modify the stack.\n\n\t  switch (deletedFiber.tag) {\n\t    case HostComponent:\n\t      {\n\t        if (!offscreenSubtreeWasHidden) {\n\t          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n\t        } // Intentional fallthrough to next branch\n\n\t      }\n\t    // eslint-disable-next-line-no-fallthrough\n\n\t    case HostText:\n\t      {\n\t        // We only need to remove the nearest host child. Set the host parent\n\t        // to `null` on the stack to indicate that nested children don't\n\t        // need to be removed.\n\t        if (supportsMutation) {\n\t          var prevHostParent = hostParent;\n\t          var prevHostParentIsContainer = hostParentIsContainer;\n\t          hostParent = null;\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t          hostParent = prevHostParent;\n\t          hostParentIsContainer = prevHostParentIsContainer;\n\n\t          if (hostParent !== null) {\n\t            // Now that all the child effects have unmounted, we can remove the\n\t            // node from the tree.\n\t            if (hostParentIsContainer) {\n\t              removeChildFromContainer(hostParent, deletedFiber.stateNode);\n\t            } else {\n\t              removeChild(hostParent, deletedFiber.stateNode);\n\t            }\n\t          }\n\t        } else {\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        }\n\n\t        return;\n\t      }\n\n\t    case DehydratedFragment:\n\t      {\n\t        // Delete the dehydrated suspense boundary and all of its content.\n\n\n\t        if (supportsMutation) {\n\t          if (hostParent !== null) {\n\t            if (hostParentIsContainer) {\n\t              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n\t            } else {\n\t              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostPortal:\n\t      {\n\t        if (supportsMutation) {\n\t          // When we go into a portal, it becomes the parent to remove from.\n\t          var _prevHostParent = hostParent;\n\t          var _prevHostParentIsContainer = hostParentIsContainer;\n\t          hostParent = deletedFiber.stateNode.containerInfo;\n\t          hostParentIsContainer = true;\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t          hostParent = _prevHostParent;\n\t          hostParentIsContainer = _prevHostParentIsContainer;\n\t        } else {\n\t          emptyPortalContainer(deletedFiber);\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        }\n\n\t        return;\n\t      }\n\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case MemoComponent:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if (!offscreenSubtreeWasHidden) {\n\t          var updateQueue = deletedFiber.updateQueue;\n\n\t          if (updateQueue !== null) {\n\t            var lastEffect = updateQueue.lastEffect;\n\n\t            if (lastEffect !== null) {\n\t              var firstEffect = lastEffect.next;\n\t              var effect = firstEffect;\n\n\t              do {\n\t                var _effect = effect,\n\t                    destroy = _effect.destroy,\n\t                    tag = _effect.tag;\n\n\t                if (destroy !== undefined) {\n\t                  if ((tag & Insertion) !== NoFlags$1) {\n\t                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n\t                  } else if ((tag & Layout) !== NoFlags$1) {\n\t                    {\n\t                      markComponentLayoutEffectUnmountStarted(deletedFiber);\n\t                    }\n\n\t                    if ( deletedFiber.mode & ProfileMode) {\n\t                      startLayoutEffectTimer();\n\t                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n\t                      recordLayoutEffectDuration(deletedFiber);\n\t                    } else {\n\t                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n\t                    }\n\n\t                    {\n\t                      markComponentLayoutEffectUnmountStopped();\n\t                    }\n\t                  }\n\t                }\n\n\t                effect = effect.next;\n\t              } while (effect !== firstEffect);\n\t            }\n\t          }\n\t        }\n\n\t        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        return;\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        if (!offscreenSubtreeWasHidden) {\n\t          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n\t          var instance = deletedFiber.stateNode;\n\n\t          if (typeof instance.componentWillUnmount === 'function') {\n\t            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n\t          }\n\t        }\n\n\t        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        return;\n\t      }\n\n\t    case ScopeComponent:\n\t      {\n\n\t        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        return;\n\t      }\n\n\t    case OffscreenComponent:\n\t      {\n\t        if ( // TODO: Remove this dead flag\n\t         deletedFiber.mode & ConcurrentMode) {\n\t          // If this offscreen component is hidden, we already unmounted it. Before\n\t          // deleting the children, track that it's already unmounted so that we\n\t          // don't attempt to unmount the effects again.\n\t          // TODO: If the tree is hidden, in most cases we should be able to skip\n\t          // over the nested children entirely. An exception is we haven't yet found\n\t          // the topmost host node to delete, which we already track on the stack.\n\t          // But the other case is portals, which need to be detached no matter how\n\t          // deeply they are nested. We should use a subtree flag to track whether a\n\t          // subtree includes a nested portal.\n\t          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\t          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n\t        } else {\n\t          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        }\n\n\t        break;\n\t      }\n\n\t    default:\n\t      {\n\t        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\t        return;\n\t      }\n\t  }\n\t}\n\n\tfunction commitSuspenseCallback(finishedWork) {\n\t  // TODO: Move this to passive phase\n\t  finishedWork.memoizedState;\n\t}\n\n\tfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n\t  if (!supportsHydration) {\n\t    return;\n\t  }\n\n\t  var newState = finishedWork.memoizedState;\n\n\t  if (newState === null) {\n\t    var current = finishedWork.alternate;\n\n\t    if (current !== null) {\n\t      var prevState = current.memoizedState;\n\n\t      if (prevState !== null) {\n\t        var suspenseInstance = prevState.dehydrated;\n\n\t        if (suspenseInstance !== null) {\n\t          commitHydratedSuspenseInstance(suspenseInstance);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction attachSuspenseRetryListeners(finishedWork) {\n\t  // If this boundary just timed out, then it will have a set of wakeables.\n\t  // For each wakeable, attach a listener so that when it resolves, React\n\t  // attempts to re-render the boundary in the primary (pre-timeout) state.\n\t  var wakeables = finishedWork.updateQueue;\n\n\t  if (wakeables !== null) {\n\t    finishedWork.updateQueue = null;\n\t    var retryCache = finishedWork.stateNode;\n\n\t    if (retryCache === null) {\n\t      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n\t    }\n\n\t    wakeables.forEach(function (wakeable) {\n\t      // Memoize using the boundary fiber to prevent redundant listeners.\n\t      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n\t      if (!retryCache.has(wakeable)) {\n\t        retryCache.add(wakeable);\n\n\t        {\n\t          if (isDevToolsPresent) {\n\t            if (inProgressLanes !== null && inProgressRoot !== null) {\n\t              // If we have pending work still, associate the original updaters with it.\n\t              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n\t            } else {\n\t              throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n\t            }\n\t          }\n\t        }\n\n\t        wakeable.then(retry, retry);\n\t      }\n\t    });\n\t  }\n\t} // This function detects when a Suspense boundary goes from visible to hidden.\n\tfunction commitMutationEffects(root, finishedWork, committedLanes) {\n\t  inProgressLanes = committedLanes;\n\t  inProgressRoot = root;\n\t  setCurrentFiber(finishedWork);\n\t  commitMutationEffectsOnFiber(finishedWork, root);\n\t  setCurrentFiber(finishedWork);\n\t  inProgressLanes = null;\n\t  inProgressRoot = null;\n\t}\n\n\tfunction recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n\t  // Deletions effects can be scheduled on any fiber type. They need to happen\n\t  // before the children effects hae fired.\n\t  var deletions = parentFiber.deletions;\n\n\t  if (deletions !== null) {\n\t    for (var i = 0; i < deletions.length; i++) {\n\t      var childToDelete = deletions[i];\n\n\t      try {\n\t        commitDeletionEffects(root, parentFiber, childToDelete);\n\t      } catch (error) {\n\t        captureCommitPhaseError(childToDelete, parentFiber, error);\n\t      }\n\t    }\n\t  }\n\n\t  var prevDebugFiber = getCurrentFiber();\n\n\t  if (parentFiber.subtreeFlags & MutationMask) {\n\t    var child = parentFiber.child;\n\n\t    while (child !== null) {\n\t      setCurrentFiber(child);\n\t      commitMutationEffectsOnFiber(child, root);\n\t      child = child.sibling;\n\t    }\n\t  }\n\n\t  setCurrentFiber(prevDebugFiber);\n\t}\n\n\tfunction commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n\t  var current = finishedWork.alternate;\n\t  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n\t  // because the fiber tag is more specific. An exception is any flag related\n\t  // to reconcilation, because those can be set on all fiber types.\n\n\t  switch (finishedWork.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case MemoComponent:\n\t    case SimpleMemoComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          try {\n\t            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n\t            commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n\t          } catch (error) {\n\t            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t          } // Layout effects are destroyed during the mutation phase so that all\n\t          // destroy functions for all fibers are called before any create functions.\n\t          // This prevents sibling component effects from interfering with each other,\n\t          // e.g. a destroy function in one component should never override a ref set\n\t          // by a create function in another component during the same commit.\n\n\n\t          if ( finishedWork.mode & ProfileMode) {\n\t            try {\n\t              startLayoutEffectTimer();\n\t              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\n\t            recordLayoutEffectDuration(finishedWork);\n\t          } else {\n\t            try {\n\t              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case ClassComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Ref) {\n\t          if (current !== null) {\n\t            safelyDetachRef(current, current.return);\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Ref) {\n\t          if (current !== null) {\n\t            safelyDetachRef(current, current.return);\n\t          }\n\t        }\n\n\t        if (supportsMutation) {\n\t          // TODO: ContentReset gets cleared by the children during the commit\n\t          // phase. This is a refactor hazard because it means we must read\n\t          // flags the flags after `commitReconciliationEffects` has already run;\n\t          // the order matters. We should refactor so that ContentReset does not\n\t          // rely on mutating the flag during commit. Like by setting a flag\n\t          // during the render phase instead.\n\t          if (finishedWork.flags & ContentReset) {\n\t            var instance = finishedWork.stateNode;\n\n\t            try {\n\t              resetTextContent(instance);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\n\t          if (flags & Update) {\n\t            var _instance4 = finishedWork.stateNode;\n\n\t            if (_instance4 != null) {\n\t              // Commit the work prepared earlier.\n\t              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n\t              // as the newProps. The updatePayload will contain the real change in\n\t              // this case.\n\n\t              var oldProps = current !== null ? current.memoizedProps : newProps;\n\t              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n\t              var updatePayload = finishedWork.updateQueue;\n\t              finishedWork.updateQueue = null;\n\n\t              if (updatePayload !== null) {\n\t                try {\n\t                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);\n\t                } catch (error) {\n\t                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostText:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          if (supportsMutation) {\n\t            if (finishedWork.stateNode === null) {\n\t              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n\t            }\n\n\t            var textInstance = finishedWork.stateNode;\n\t            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n\t            // as the newProps. The updatePayload will contain the real change in\n\t            // this case.\n\n\t            var oldText = current !== null ? current.memoizedProps : newText;\n\n\t            try {\n\t              commitTextUpdate(textInstance, oldText, newText);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostRoot:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          if (supportsMutation && supportsHydration) {\n\t            if (current !== null) {\n\t              var prevRootState = current.memoizedState;\n\n\t              if (prevRootState.isDehydrated) {\n\t                try {\n\t                  commitHydratedContainer(root.containerInfo);\n\t                } catch (error) {\n\t                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t                }\n\t              }\n\t            }\n\t          }\n\n\t          if (supportsPersistence) {\n\t            var containerInfo = root.containerInfo;\n\t            var pendingChildren = root.pendingChildren;\n\n\t            try {\n\t              replaceContainerChildren(containerInfo, pendingChildren);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case HostPortal:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          if (supportsPersistence) {\n\t            var portal = finishedWork.stateNode;\n\t            var _containerInfo = portal.containerInfo;\n\t            var _pendingChildren = portal.pendingChildren;\n\n\t            try {\n\t              replaceContainerChildren(_containerInfo, _pendingChildren);\n\t            } catch (error) {\n\t              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t            }\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\t        var offscreenFiber = finishedWork.child;\n\n\t        if (offscreenFiber.flags & Visibility) {\n\t          var offscreenInstance = offscreenFiber.stateNode;\n\t          var newState = offscreenFiber.memoizedState;\n\t          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can\n\t          // read it during an event\n\n\t          offscreenInstance.isHidden = isHidden;\n\n\t          if (isHidden) {\n\t            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;\n\n\t            if (!wasHidden) {\n\t              // TODO: Move to passive phase\n\t              markCommitTimeOfFallback();\n\t            }\n\t          }\n\t        }\n\n\t        if (flags & Update) {\n\t          try {\n\t            commitSuspenseCallback(finishedWork);\n\t          } catch (error) {\n\t            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t          }\n\n\t          attachSuspenseRetryListeners(finishedWork);\n\t        }\n\n\t        return;\n\t      }\n\n\t    case OffscreenComponent:\n\t      {\n\t        var _wasHidden = current !== null && current.memoizedState !== null;\n\n\t        if ( // TODO: Remove this dead flag\n\t         finishedWork.mode & ConcurrentMode) {\n\t          // Before committing the children, track on the stack whether this\n\t          // offscreen subtree was already hidden, so that we don't unmount the\n\t          // effects again.\n\t          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\t          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;\n\t          recursivelyTraverseMutationEffects(root, finishedWork);\n\t          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n\t        } else {\n\t          recursivelyTraverseMutationEffects(root, finishedWork);\n\t        }\n\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Visibility) {\n\t          var _offscreenInstance = finishedWork.stateNode;\n\t          var _newState = finishedWork.memoizedState;\n\n\t          var _isHidden = _newState !== null;\n\n\t          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can\n\t          // read it during an event\n\n\t          _offscreenInstance.isHidden = _isHidden;\n\n\t          {\n\t            if (_isHidden) {\n\t              if (!_wasHidden) {\n\t                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n\t                  nextEffect = offscreenBoundary;\n\t                  var offscreenChild = offscreenBoundary.child;\n\n\t                  while (offscreenChild !== null) {\n\t                    nextEffect = offscreenChild;\n\t                    disappearLayoutEffects_begin(offscreenChild);\n\t                    offscreenChild = offscreenChild.sibling;\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\n\t          if (supportsMutation) {\n\t            // TODO: This needs to run whenever there's an insertion or update\n\t            // inside a hidden Offscreen tree.\n\t            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n\t          }\n\t        }\n\n\t        return;\n\t      }\n\n\t    case SuspenseListComponent:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\n\t        if (flags & Update) {\n\t          attachSuspenseRetryListeners(finishedWork);\n\t        }\n\n\t        return;\n\t      }\n\n\t    case ScopeComponent:\n\t      {\n\n\t        return;\n\t      }\n\n\t    default:\n\t      {\n\t        recursivelyTraverseMutationEffects(root, finishedWork);\n\t        commitReconciliationEffects(finishedWork);\n\t        return;\n\t      }\n\t  }\n\t}\n\n\tfunction commitReconciliationEffects(finishedWork) {\n\t  // Placement effects (insertions, reorders) can be scheduled on any fiber\n\t  // type. They needs to happen after the children effects have fired, but\n\t  // before the effects on this fiber have fired.\n\t  var flags = finishedWork.flags;\n\n\t  if (flags & Placement) {\n\t    try {\n\t      commitPlacement(finishedWork);\n\t    } catch (error) {\n\t      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n\t    } // Clear the \"placement\" from effect tag so that we know that this is\n\t    // inserted, before any life-cycles like componentDidMount gets called.\n\t    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n\t    // and isMounted is deprecated anyway so we should be able to kill this.\n\n\n\t    finishedWork.flags &= ~Placement;\n\t  }\n\n\t  if (flags & Hydrating) {\n\t    finishedWork.flags &= ~Hydrating;\n\t  }\n\t}\n\n\tfunction commitLayoutEffects(finishedWork, root, committedLanes) {\n\t  inProgressLanes = committedLanes;\n\t  inProgressRoot = root;\n\t  nextEffect = finishedWork;\n\t  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n\t  inProgressLanes = null;\n\t  inProgressRoot = null;\n\t}\n\n\tfunction commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n\t  // Suspense layout effects semantics don't change for legacy roots.\n\t  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var firstChild = fiber.child;\n\n\t    if ( fiber.tag === OffscreenComponent && isModernRoot) {\n\t      // Keep track of the current Offscreen stack's state.\n\t      var isHidden = fiber.memoizedState !== null;\n\t      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n\n\t      if (newOffscreenSubtreeIsHidden) {\n\t        // The Offscreen tree is hidden. Skip over its layout effects.\n\t        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\t        continue;\n\t      } else {\n\t        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n\t        var current = fiber.alternate;\n\t        var wasHidden = current !== null && current.memoizedState !== null;\n\t        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n\t        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n\t        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n\t        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n\t        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n\t        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n\t          // This is the root of a reappearing boundary. Turn its layout effects\n\t          // back on.\n\t          nextEffect = fiber;\n\t          reappearLayoutEffects_begin(fiber);\n\t        }\n\n\t        var child = firstChild;\n\n\t        while (child !== null) {\n\t          nextEffect = child;\n\t          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.\n\t          root, committedLanes);\n\t          child = child.sibling;\n\t        } // Restore Offscreen state and resume in our-progress traversal.\n\n\n\t        nextEffect = fiber;\n\t        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n\t        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n\t        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\t        continue;\n\t      }\n\t    }\n\n\t    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n\t      firstChild.return = fiber;\n\t      nextEffect = firstChild;\n\t    } else {\n\t      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\t    }\n\t  }\n\t}\n\n\tfunction commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\n\t    if ((fiber.flags & LayoutMask) !== NoFlags) {\n\t      var current = fiber.alternate;\n\t      setCurrentFiber(fiber);\n\n\t      try {\n\t        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n\t      } catch (error) {\n\t        captureCommitPhaseError(fiber, fiber.return, error);\n\t      }\n\n\t      resetCurrentFiber();\n\t    }\n\n\t    if (fiber === subtreeRoot) {\n\t      nextEffect = null;\n\t      return;\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction disappearLayoutEffects_begin(subtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case MemoComponent:\n\t      case SimpleMemoComponent:\n\t        {\n\t          if ( fiber.mode & ProfileMode) {\n\t            try {\n\t              startLayoutEffectTimer();\n\t              commitHookEffectListUnmount(Layout, fiber, fiber.return);\n\t            } finally {\n\t              recordLayoutEffectDuration(fiber);\n\t            }\n\t          } else {\n\t            commitHookEffectListUnmount(Layout, fiber, fiber.return);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          // TODO (Offscreen) Check: flags & RefStatic\n\t          safelyDetachRef(fiber, fiber.return);\n\t          var instance = fiber.stateNode;\n\n\t          if (typeof instance.componentWillUnmount === 'function') {\n\t            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case HostComponent:\n\t        {\n\t          safelyDetachRef(fiber, fiber.return);\n\t          break;\n\t        }\n\n\t      case OffscreenComponent:\n\t        {\n\t          // Check if this is a\n\t          var isHidden = fiber.memoizedState !== null;\n\n\t          if (isHidden) {\n\t            // Nested Offscreen tree is already hidden. Don't disappear\n\t            // its effects.\n\t            disappearLayoutEffects_complete(subtreeRoot);\n\t            continue;\n\t          }\n\n\t          break;\n\t        }\n\t    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n\t    if (firstChild !== null) {\n\t      firstChild.return = fiber;\n\t      nextEffect = firstChild;\n\t    } else {\n\t      disappearLayoutEffects_complete(subtreeRoot);\n\t    }\n\t  }\n\t}\n\n\tfunction disappearLayoutEffects_complete(subtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\n\t    if (fiber === subtreeRoot) {\n\t      nextEffect = null;\n\t      return;\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction reappearLayoutEffects_begin(subtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var firstChild = fiber.child;\n\n\t    if (fiber.tag === OffscreenComponent) {\n\t      var isHidden = fiber.memoizedState !== null;\n\n\t      if (isHidden) {\n\t        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n\t        reappearLayoutEffects_complete(subtreeRoot);\n\t        continue;\n\t      }\n\t    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n\t    if (firstChild !== null) {\n\t      // This node may have been reused from a previous render, so we can't\n\t      // assume its return pointer is correct.\n\t      firstChild.return = fiber;\n\t      nextEffect = firstChild;\n\t    } else {\n\t      reappearLayoutEffects_complete(subtreeRoot);\n\t    }\n\t  }\n\t}\n\n\tfunction reappearLayoutEffects_complete(subtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n\t    setCurrentFiber(fiber);\n\n\t    try {\n\t      reappearLayoutEffectsOnFiber(fiber);\n\t    } catch (error) {\n\t      captureCommitPhaseError(fiber, fiber.return, error);\n\t    }\n\n\t    resetCurrentFiber();\n\n\t    if (fiber === subtreeRoot) {\n\t      nextEffect = null;\n\t      return;\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      // This node may have been reused from a previous render, so we can't\n\t      // assume its return pointer is correct.\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n\t  nextEffect = finishedWork;\n\t  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);\n\t}\n\n\tfunction commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var firstChild = fiber.child;\n\n\t    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n\t      firstChild.return = fiber;\n\t      nextEffect = firstChild;\n\t    } else {\n\t      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);\n\t    }\n\t  }\n\t}\n\n\tfunction commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\n\t    if ((fiber.flags & Passive) !== NoFlags) {\n\t      setCurrentFiber(fiber);\n\n\t      try {\n\t        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);\n\t      } catch (error) {\n\t        captureCommitPhaseError(fiber, fiber.return, error);\n\t      }\n\n\t      resetCurrentFiber();\n\t    }\n\n\t    if (fiber === subtreeRoot) {\n\t      nextEffect = null;\n\t      return;\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n\t  switch (finishedWork.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if ( finishedWork.mode & ProfileMode) {\n\t          startPassiveEffectTimer();\n\n\t          try {\n\t            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n\t          } finally {\n\t            recordPassiveEffectDuration(finishedWork);\n\t          }\n\t        } else {\n\t          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n\t        }\n\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountEffects(firstChild) {\n\t  nextEffect = firstChild;\n\t  commitPassiveUnmountEffects_begin();\n\t}\n\n\tfunction commitPassiveUnmountEffects_begin() {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var child = fiber.child;\n\n\t    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n\t      var deletions = fiber.deletions;\n\n\t      if (deletions !== null) {\n\t        for (var i = 0; i < deletions.length; i++) {\n\t          var fiberToDelete = deletions[i];\n\t          nextEffect = fiberToDelete;\n\t          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n\t        }\n\n\t        {\n\t          // A fiber was deleted from this parent fiber, but it's still part of\n\t          // the previous (alternate) parent fiber's list of children. Because\n\t          // children are a linked list, an earlier sibling that's still alive\n\t          // will be connected to the deleted fiber via its `alternate`:\n\t          //\n\t          //   live fiber\n\t          //   --alternate--> previous live fiber\n\t          //   --sibling--> deleted fiber\n\t          //\n\t          // We can't disconnect `alternate` on nodes that haven't been deleted\n\t          // yet, but we can disconnect the `sibling` and `child` pointers.\n\t          var previousFiber = fiber.alternate;\n\n\t          if (previousFiber !== null) {\n\t            var detachedChild = previousFiber.child;\n\n\t            if (detachedChild !== null) {\n\t              previousFiber.child = null;\n\n\t              do {\n\t                var detachedSibling = detachedChild.sibling;\n\t                detachedChild.sibling = null;\n\t                detachedChild = detachedSibling;\n\t              } while (detachedChild !== null);\n\t            }\n\t          }\n\t        }\n\n\t        nextEffect = fiber;\n\t      }\n\t    }\n\n\t    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n\t      child.return = fiber;\n\t      nextEffect = child;\n\t    } else {\n\t      commitPassiveUnmountEffects_complete();\n\t    }\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountEffects_complete() {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\n\t    if ((fiber.flags & Passive) !== NoFlags) {\n\t      setCurrentFiber(fiber);\n\t      commitPassiveUnmountOnFiber(fiber);\n\t      resetCurrentFiber();\n\t    }\n\n\t    var sibling = fiber.sibling;\n\n\t    if (sibling !== null) {\n\t      sibling.return = fiber.return;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = fiber.return;\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountOnFiber(finishedWork) {\n\t  switch (finishedWork.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if ( finishedWork.mode & ProfileMode) {\n\t          startPassiveEffectTimer();\n\t          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n\t          recordPassiveEffectDuration(finishedWork);\n\t        } else {\n\t          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n\t        }\n\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect; // Deletion effects fire in parent -> child order\n\t    // TODO: Check if fiber has a PassiveStatic flag\n\n\t    setCurrentFiber(fiber);\n\t    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n\t    resetCurrentFiber();\n\t    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n\t    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n\t    if (child !== null) {\n\t      child.return = fiber;\n\t      nextEffect = child;\n\t    } else {\n\t      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n\t    }\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n\t  while (nextEffect !== null) {\n\t    var fiber = nextEffect;\n\t    var sibling = fiber.sibling;\n\t    var returnFiber = fiber.return;\n\n\t    {\n\t      // Recursively traverse the entire deleted tree and clean up fiber fields.\n\t      // This is more aggressive than ideal, and the long term goal is to only\n\t      // have to detach the deleted tree at the root.\n\t      detachFiberAfterEffects(fiber);\n\n\t      if (fiber === deletedSubtreeRoot) {\n\t        nextEffect = null;\n\t        return;\n\t      }\n\t    }\n\n\t    if (sibling !== null) {\n\t      sibling.return = returnFiber;\n\t      nextEffect = sibling;\n\t      return;\n\t    }\n\n\t    nextEffect = returnFiber;\n\t  }\n\t}\n\n\tfunction commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n\t  switch (current.tag) {\n\t    case FunctionComponent:\n\t    case ForwardRef:\n\t    case SimpleMemoComponent:\n\t      {\n\t        if ( current.mode & ProfileMode) {\n\t          startPassiveEffectTimer();\n\t          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n\t          recordPassiveEffectDuration(current);\n\t        } else {\n\t          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n\t        }\n\n\t        break;\n\t      }\n\t  }\n\t} // TODO: Reuse reappearLayoutEffects traversal here?\n\n\n\tfunction invokeLayoutEffectMountInDEV(fiber) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          try {\n\t            commitHookEffectListMount(Layout | HasEffect, fiber);\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          var instance = fiber.stateNode;\n\n\t          try {\n\t            instance.componentDidMount();\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\n\t          break;\n\t        }\n\t    }\n\t  }\n\t}\n\n\tfunction invokePassiveEffectMountInDEV(fiber) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          try {\n\t            commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\n\t          break;\n\t        }\n\t    }\n\t  }\n\t}\n\n\tfunction invokeLayoutEffectUnmountInDEV(fiber) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          try {\n\t            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ClassComponent:\n\t        {\n\t          var instance = fiber.stateNode;\n\n\t          if (typeof instance.componentWillUnmount === 'function') {\n\t            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n\t          }\n\n\t          break;\n\t        }\n\t    }\n\t  }\n\t}\n\n\tfunction invokePassiveEffectUnmountInDEV(fiber) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    switch (fiber.tag) {\n\t      case FunctionComponent:\n\t      case ForwardRef:\n\t      case SimpleMemoComponent:\n\t        {\n\t          try {\n\t            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n\t          } catch (error) {\n\t            captureCommitPhaseError(fiber, fiber.return, error);\n\t          }\n\t        }\n\t    }\n\t  }\n\t}\n\n\tvar COMPONENT_TYPE = 0;\n\tvar HAS_PSEUDO_CLASS_TYPE = 1;\n\tvar ROLE_TYPE = 2;\n\tvar TEST_NAME_TYPE = 3;\n\tvar TEXT_TYPE = 4;\n\n\tif (typeof Symbol === 'function' && Symbol.for) {\n\t  var symbolFor = Symbol.for;\n\t  COMPONENT_TYPE = symbolFor('selector.component');\n\t  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n\t  ROLE_TYPE = symbolFor('selector.role');\n\t  TEST_NAME_TYPE = symbolFor('selector.test_id');\n\t  TEXT_TYPE = symbolFor('selector.text');\n\t}\n\n\tfunction createComponentSelector(component) {\n\t  return {\n\t    $$typeof: COMPONENT_TYPE,\n\t    value: component\n\t  };\n\t}\n\tfunction createHasPseudoClassSelector(selectors) {\n\t  return {\n\t    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n\t    value: selectors\n\t  };\n\t}\n\tfunction createRoleSelector(role) {\n\t  return {\n\t    $$typeof: ROLE_TYPE,\n\t    value: role\n\t  };\n\t}\n\tfunction createTextSelector(text) {\n\t  return {\n\t    $$typeof: TEXT_TYPE,\n\t    value: text\n\t  };\n\t}\n\tfunction createTestNameSelector(id) {\n\t  return {\n\t    $$typeof: TEST_NAME_TYPE,\n\t    value: id\n\t  };\n\t}\n\n\tfunction findFiberRootForHostRoot(hostRoot) {\n\t  var maybeFiber = getInstanceFromNode(hostRoot);\n\n\t  if (maybeFiber != null) {\n\t    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n\t      throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n\t    }\n\n\t    return maybeFiber;\n\t  } else {\n\t    var fiberRoot = findFiberRoot(hostRoot);\n\n\t    if (fiberRoot === null) {\n\t      throw new Error('Could not find React container within specified host subtree.');\n\t    } // The Flow type for FiberRoot is a little funky.\n\t    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n\n\t    return fiberRoot.stateNode.current;\n\t  }\n\t}\n\n\tfunction matchSelector(fiber, selector) {\n\t  switch (selector.$$typeof) {\n\t    case COMPONENT_TYPE:\n\t      if (fiber.type === selector.value) {\n\t        return true;\n\t      }\n\n\t      break;\n\n\t    case HAS_PSEUDO_CLASS_TYPE:\n\t      return hasMatchingPaths(fiber, selector.value);\n\n\t    case ROLE_TYPE:\n\t      if (fiber.tag === HostComponent) {\n\t        var node = fiber.stateNode;\n\n\t        if (matchAccessibilityRole(node, selector.value)) {\n\t          return true;\n\t        }\n\t      }\n\n\t      break;\n\n\t    case TEXT_TYPE:\n\t      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n\t        var textContent = getTextContent(fiber);\n\n\t        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n\t          return true;\n\t        }\n\t      }\n\n\t      break;\n\n\t    case TEST_NAME_TYPE:\n\t      if (fiber.tag === HostComponent) {\n\t        var dataTestID = fiber.memoizedProps['data-testname'];\n\n\t        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n\t          return true;\n\t        }\n\t      }\n\n\t      break;\n\n\t    default:\n\t      throw new Error('Invalid selector type specified.');\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction selectorToString(selector) {\n\t  switch (selector.$$typeof) {\n\t    case COMPONENT_TYPE:\n\t      var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n\t      return \"<\" + displayName + \">\";\n\n\t    case HAS_PSEUDO_CLASS_TYPE:\n\t      return \":has(\" + (selectorToString(selector) || '') + \")\";\n\n\t    case ROLE_TYPE:\n\t      return \"[role=\\\"\" + selector.value + \"\\\"]\";\n\n\t    case TEXT_TYPE:\n\t      return \"\\\"\" + selector.value + \"\\\"\";\n\n\t    case TEST_NAME_TYPE:\n\t      return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n\n\t    default:\n\t      throw new Error('Invalid selector type specified.');\n\t  }\n\t}\n\n\tfunction findPaths(root, selectors) {\n\t  var matchingFibers = [];\n\t  var stack = [root, 0];\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var fiber = stack[index++];\n\t    var selectorIndex = stack[index++];\n\t    var selector = selectors[selectorIndex];\n\n\t    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n\t      continue;\n\t    } else {\n\t      while (selector != null && matchSelector(fiber, selector)) {\n\t        selectorIndex++;\n\t        selector = selectors[selectorIndex];\n\t      }\n\t    }\n\n\t    if (selectorIndex === selectors.length) {\n\t      matchingFibers.push(fiber);\n\t    } else {\n\t      var child = fiber.child;\n\n\t      while (child !== null) {\n\t        stack.push(child, selectorIndex);\n\t        child = child.sibling;\n\t      }\n\t    }\n\t  }\n\n\t  return matchingFibers;\n\t} // Same as findPaths but with eager bailout on first match\n\n\n\tfunction hasMatchingPaths(root, selectors) {\n\t  var stack = [root, 0];\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var fiber = stack[index++];\n\t    var selectorIndex = stack[index++];\n\t    var selector = selectors[selectorIndex];\n\n\t    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n\t      continue;\n\t    } else {\n\t      while (selector != null && matchSelector(fiber, selector)) {\n\t        selectorIndex++;\n\t        selector = selectors[selectorIndex];\n\t      }\n\t    }\n\n\t    if (selectorIndex === selectors.length) {\n\t      return true;\n\t    } else {\n\t      var child = fiber.child;\n\n\t      while (child !== null) {\n\t        stack.push(child, selectorIndex);\n\t        child = child.sibling;\n\t      }\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction findAllNodes(hostRoot, selectors) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var root = findFiberRootForHostRoot(hostRoot);\n\t  var matchingFibers = findPaths(root, selectors);\n\t  var instanceRoots = [];\n\t  var stack = Array.from(matchingFibers);\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var node = stack[index++];\n\n\t    if (node.tag === HostComponent) {\n\t      if (isHiddenSubtree(node)) {\n\t        continue;\n\t      }\n\n\t      instanceRoots.push(node.stateNode);\n\t    } else {\n\t      var child = node.child;\n\n\t      while (child !== null) {\n\t        stack.push(child);\n\t        child = child.sibling;\n\t      }\n\t    }\n\t  }\n\n\t  return instanceRoots;\n\t}\n\tfunction getFindAllNodesFailureDescription(hostRoot, selectors) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var root = findFiberRootForHostRoot(hostRoot);\n\t  var maxSelectorIndex = 0;\n\t  var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n\t  var stack = [root, 0];\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var fiber = stack[index++];\n\t    var selectorIndex = stack[index++];\n\t    var selector = selectors[selectorIndex];\n\n\t    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n\t      continue;\n\t    } else if (matchSelector(fiber, selector)) {\n\t      matchedNames.push(selectorToString(selector));\n\t      selectorIndex++;\n\n\t      if (selectorIndex > maxSelectorIndex) {\n\t        maxSelectorIndex = selectorIndex;\n\t      }\n\t    }\n\n\t    if (selectorIndex < selectors.length) {\n\t      var child = fiber.child;\n\n\t      while (child !== null) {\n\t        stack.push(child, selectorIndex);\n\t        child = child.sibling;\n\t      }\n\t    }\n\t  }\n\n\t  if (maxSelectorIndex < selectors.length) {\n\t    var unmatchedNames = [];\n\n\t    for (var i = maxSelectorIndex; i < selectors.length; i++) {\n\t      unmatchedNames.push(selectorToString(selectors[i]));\n\t    }\n\n\t    return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n\t  }\n\n\t  return null;\n\t}\n\tfunction findBoundingRects(hostRoot, selectors) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var instanceRoots = findAllNodes(hostRoot, selectors);\n\t  var boundingRects = [];\n\n\t  for (var i = 0; i < instanceRoots.length; i++) {\n\t    boundingRects.push(getBoundingRect(instanceRoots[i]));\n\t  }\n\n\t  for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n\t    var targetRect = boundingRects[_i];\n\t    var targetLeft = targetRect.x;\n\t    var targetRight = targetLeft + targetRect.width;\n\t    var targetTop = targetRect.y;\n\t    var targetBottom = targetTop + targetRect.height;\n\n\t    for (var j = _i - 1; j >= 0; j--) {\n\t      if (_i !== j) {\n\t        var otherRect = boundingRects[j];\n\t        var otherLeft = otherRect.x;\n\t        var otherRight = otherLeft + otherRect.width;\n\t        var otherTop = otherRect.y;\n\t        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n\t        // but we can handle the most common cases:\n\t        // 1. completely overlapping rects\n\t        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n\t        //\n\t        // Even given the above constraints,\n\t        // we still won't end up with the fewest possible rects without doing multiple passes,\n\t        // but it's good enough for this purpose.\n\n\t        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n\t          // Complete overlapping rects; remove the inner one.\n\t          boundingRects.splice(_i, 1);\n\t          break;\n\t        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n\t          // Adjacent vertical rects; merge them.\n\t          if (otherTop > targetTop) {\n\t            otherRect.height += otherTop - targetTop;\n\t            otherRect.y = targetTop;\n\t          }\n\n\t          if (otherBottom < targetBottom) {\n\t            otherRect.height = targetBottom - otherTop;\n\t          }\n\n\t          boundingRects.splice(_i, 1);\n\t          break;\n\t        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n\t          // Adjacent horizontal rects; merge them.\n\t          if (otherLeft > targetLeft) {\n\t            otherRect.width += otherLeft - targetLeft;\n\t            otherRect.x = targetLeft;\n\t          }\n\n\t          if (otherRight < targetRight) {\n\t            otherRect.width = targetRight - otherLeft;\n\t          }\n\n\t          boundingRects.splice(_i, 1);\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  return boundingRects;\n\t}\n\tfunction focusWithin(hostRoot, selectors) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var root = findFiberRootForHostRoot(hostRoot);\n\t  var matchingFibers = findPaths(root, selectors);\n\t  var stack = Array.from(matchingFibers);\n\t  var index = 0;\n\n\t  while (index < stack.length) {\n\t    var fiber = stack[index++];\n\n\t    if (isHiddenSubtree(fiber)) {\n\t      continue;\n\t    }\n\n\t    if (fiber.tag === HostComponent) {\n\t      var node = fiber.stateNode;\n\n\t      if (setFocusIfFocusable(node)) {\n\t        return true;\n\t      }\n\t    }\n\n\t    var child = fiber.child;\n\n\t    while (child !== null) {\n\t      stack.push(child);\n\t      child = child.sibling;\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\tvar commitHooks = [];\n\tfunction onCommitRoot$1() {\n\t  if (supportsTestSelectors) {\n\t    commitHooks.forEach(function (commitHook) {\n\t      return commitHook();\n\t    });\n\t  }\n\t}\n\tfunction observeVisibleRects(hostRoot, selectors, callback, options) {\n\t  if (!supportsTestSelectors) {\n\t    throw new Error('Test selector API is not supported by this renderer.');\n\t  }\n\n\t  var instanceRoots = findAllNodes(hostRoot, selectors);\n\n\t  var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n\t      disconnect = _setupIntersectionObs.disconnect,\n\t      observe = _setupIntersectionObs.observe,\n\t      unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n\n\t  var commitHook = function () {\n\t    var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\t    instanceRoots.forEach(function (target) {\n\t      if (nextInstanceRoots.indexOf(target) < 0) {\n\t        unobserve(target);\n\t      }\n\t    });\n\t    nextInstanceRoots.forEach(function (target) {\n\t      if (instanceRoots.indexOf(target) < 0) {\n\t        observe(target);\n\t      }\n\t    });\n\t  };\n\n\t  commitHooks.push(commitHook);\n\t  return {\n\t    disconnect: function () {\n\t      // Stop listening for React mutations:\n\t      var index = commitHooks.indexOf(commitHook);\n\n\t      if (index >= 0) {\n\t        commitHooks.splice(index, 1);\n\t      } // Disconnect the host observer:\n\n\n\t      disconnect();\n\t    }\n\t  };\n\t}\n\n\tvar ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n\tfunction isLegacyActEnvironment(fiber) {\n\t  {\n\t    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n\t    // act environment whenever `jest` is defined, but you can still turn off\n\t    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n\t    // to false.\n\t    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n\t    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n\t    var jestIsDefined = typeof jest !== 'undefined';\n\t    return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n\t  }\n\t}\n\tfunction isConcurrentActEnvironment() {\n\t  {\n\t    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n\t    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n\t    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n\t      // TODO: Include link to relevant documentation page.\n\t      error('The current testing environment is not configured to support ' + 'act(...)');\n\t    }\n\n\t    return isReactActEnvironmentGlobal;\n\t  }\n\t}\n\n\tvar ceil = Math.ceil;\n\tvar ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n\t    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n\t    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n\t    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n\tvar NoContext =\n\t/*             */\n\t0;\n\tvar BatchedContext =\n\t/*               */\n\t1;\n\tvar RenderContext =\n\t/*                */\n\t2;\n\tvar CommitContext =\n\t/*                */\n\t4;\n\tvar RootInProgress = 0;\n\tvar RootFatalErrored = 1;\n\tvar RootErrored = 2;\n\tvar RootSuspended = 3;\n\tvar RootSuspendedWithDelay = 4;\n\tvar RootCompleted = 5;\n\tvar RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\n\tvar executionContext = NoContext; // The root we're working on\n\n\tvar workInProgressRoot = null; // The fiber we're working on\n\n\tvar workInProgress = null; // The lanes we're rendering\n\n\tvar workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n\t// This is a superset of the lanes we started working on at the root. The only\n\t// case where it's different from `workInProgressRootRenderLanes` is when we\n\t// enter a subtree that is hidden and needs to be unhidden: Suspense and\n\t// Offscreen component.\n\t//\n\t// Most things in the work loop should deal with workInProgressRootRenderLanes.\n\t// Most things in begin/complete phases should deal with subtreeRenderLanes.\n\n\tvar subtreeRenderLanes = NoLanes;\n\tvar subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\n\tvar workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\n\tvar workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n\t// includes unprocessed updates, not work in bailed out children.\n\n\tvar workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\n\tvar workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\n\tvar workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\n\tvar workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n\t// We will log them once the tree commits.\n\n\tvar workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n\t// model where we don't commit new loading states in too quick succession.\n\n\tvar globalMostRecentFallbackTime = 0;\n\tvar FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n\t// more and prefer CPU suspense heuristics instead.\n\n\tvar workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n\t// suspense heuristics and opt out of rendering more content.\n\n\tvar RENDER_TIMEOUT_MS = 500;\n\tvar workInProgressTransitions = null;\n\n\tfunction resetRenderTimer() {\n\t  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n\t}\n\n\tfunction getRenderTargetTime() {\n\t  return workInProgressRootRenderTargetTime;\n\t}\n\tvar hasUncaughtError = false;\n\tvar firstUncaughtError = null;\n\tvar legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\n\tvar rootDoesHavePassiveEffects = false;\n\tvar rootWithPendingPassiveEffects = null;\n\tvar pendingPassiveEffectsLanes = NoLanes;\n\tvar pendingPassiveProfilerEffects = [];\n\tvar pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n\n\tvar NESTED_UPDATE_LIMIT = 50;\n\tvar nestedUpdateCount = 0;\n\tvar rootWithNestedUpdates = null;\n\tvar isFlushingPassiveEffects = false;\n\tvar didScheduleUpdateDuringPassiveEffects = false;\n\tvar NESTED_PASSIVE_UPDATE_LIMIT = 50;\n\tvar nestedPassiveUpdateCount = 0;\n\tvar rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their\n\t// event times as simultaneous, even if the actual clock time has advanced\n\t// between the first and second call.\n\n\tvar currentEventTime = NoTimestamp;\n\tvar currentEventTransitionLane = NoLanes;\n\tvar isRunningInsertionEffect = false;\n\tfunction getWorkInProgressRoot() {\n\t  return workInProgressRoot;\n\t}\n\tfunction requestEventTime() {\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    // We're inside React, so it's fine to read the actual time.\n\t    return now();\n\t  } // We're not inside React, so we may be in the middle of a browser event.\n\n\n\t  if (currentEventTime !== NoTimestamp) {\n\t    // Use the same start time for all updates until we enter React again.\n\t    return currentEventTime;\n\t  } // This is the first update since React yielded. Compute a new start time.\n\n\n\t  currentEventTime = now();\n\t  return currentEventTime;\n\t}\n\tfunction requestUpdateLane(fiber) {\n\t  // Special cases\n\t  var mode = fiber.mode;\n\n\t  if ((mode & ConcurrentMode) === NoMode) {\n\t    return SyncLane;\n\t  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n\t    // This is a render phase update. These are not officially supported. The\n\t    // old behavior is to give this the same \"thread\" (lanes) as\n\t    // whatever is currently rendering. So if you call `setState` on a component\n\t    // that happens later in the same render, it will flush. Ideally, we want to\n\t    // remove the special case and treat them as if they came from an\n\t    // interleaved event. Regardless, this pattern is not officially supported.\n\t    // This behavior is only a fallback. The flag only exists until we can roll\n\t    // out the setState warning, since existing code might accidentally rely on\n\t    // the current behavior.\n\t    return pickArbitraryLane(workInProgressRootRenderLanes);\n\t  }\n\n\t  var isTransition = requestCurrentTransition() !== NoTransition;\n\n\t  if (isTransition) {\n\t    if ( ReactCurrentBatchConfig$2.transition !== null) {\n\t      var transition = ReactCurrentBatchConfig$2.transition;\n\n\t      if (!transition._updatedFibers) {\n\t        transition._updatedFibers = new Set();\n\t      }\n\n\t      transition._updatedFibers.add(fiber);\n\t    } // The algorithm for assigning an update to a lane should be stable for all\n\t    // updates at the same priority within the same event. To do this, the\n\t    // inputs to the algorithm must be the same.\n\t    //\n\t    // The trick we use is to cache the first of each of these inputs within an\n\t    // event. Then reset the cached values once we can be sure the event is\n\t    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n\t    if (currentEventTransitionLane === NoLane) {\n\t      // All transitions within the same event are assigned the same lane.\n\t      currentEventTransitionLane = claimNextTransitionLane();\n\t    }\n\n\t    return currentEventTransitionLane;\n\t  } // Updates originating inside certain React methods, like flushSync, have\n\t  // their priority set by tracking it with a context variable.\n\t  //\n\t  // The opaque type returned by the host config is internally a lane, so we can\n\t  // use that directly.\n\t  // TODO: Move this type conversion to the event priority module.\n\n\n\t  var updateLane = getCurrentUpdatePriority();\n\n\t  if (updateLane !== NoLane) {\n\t    return updateLane;\n\t  } // This update originated outside React. Ask the host environment for an\n\t  // appropriate priority, based on the type of event.\n\t  //\n\t  // The opaque type returned by the host config is internally a lane, so we can\n\t  // use that directly.\n\t  // TODO: Move this type conversion to the event priority module.\n\n\n\t  var eventLane = getCurrentEventPriority();\n\t  return eventLane;\n\t}\n\n\tfunction requestRetryLane(fiber) {\n\t  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n\t  // \"retries\" — a special update that attempts to flip a Suspense boundary\n\t  // from its placeholder state to its primary/resolved state.\n\t  // Special cases\n\t  var mode = fiber.mode;\n\n\t  if ((mode & ConcurrentMode) === NoMode) {\n\t    return SyncLane;\n\t  }\n\n\t  return claimNextRetryLane();\n\t}\n\n\tfunction scheduleUpdateOnFiber(root, fiber, lane, eventTime) {\n\t  checkForNestedUpdates();\n\n\t  {\n\t    if (isRunningInsertionEffect) {\n\t      error('useInsertionEffect must not schedule updates.');\n\t    }\n\t  }\n\n\t  {\n\t    if (isFlushingPassiveEffects) {\n\t      didScheduleUpdateDuringPassiveEffects = true;\n\t    }\n\t  } // Mark that the root has a pending update.\n\n\n\t  markRootUpdated(root, lane, eventTime);\n\n\t  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n\t    // This update was dispatched during the render phase. This is a mistake\n\t    // if the update originates from user space (with the exception of local\n\t    // hook updates, which are handled differently and don't reach this\n\t    // function), but there are some internal React features that use this as\n\t    // an implementation detail, like selective hydration.\n\t    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n\t  } else {\n\t    // This is a normal update, scheduled from outside the render phase. For\n\t    // example, during an input event.\n\t    {\n\t      if (isDevToolsPresent) {\n\t        addFiberToLanesMap(root, fiber, lane);\n\t      }\n\t    }\n\n\t    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n\t    if (root === workInProgressRoot) {\n\t      // Received an update to a tree that's in the middle of rendering. Mark\n\t      // that there was an interleaved update work on this root. Unless the\n\t      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n\t      // phase update. In that case, we don't treat render phase updates as if\n\t      // they were interleaved, for backwards compat reasons.\n\t      if ( (executionContext & RenderContext) === NoContext) {\n\t        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n\t      }\n\n\t      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n\t        // The root already suspended with a delay, which means this render\n\t        // definitely won't finish. Since we have a new update, let's mark it as\n\t        // suspended now, right before marking the incoming update. This has the\n\t        // effect of interrupting the current render and switching to the update.\n\t        // TODO: Make sure this doesn't override pings that happen while we've\n\t        // already started rendering.\n\t        markRootSuspended$1(root, workInProgressRootRenderLanes);\n\t      }\n\t    }\n\n\t    ensureRootIsScheduled(root, eventTime);\n\n\t    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n\t    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n\t      // Flush the synchronous work now, unless we're already working or inside\n\t      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n\t      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n\t      // without immediately flushing it. We only do this for user-initiated\n\t      // updates, to preserve historical behavior of legacy mode.\n\t      resetRenderTimer();\n\t      flushSyncCallbacksOnlyInLegacyMode();\n\t    }\n\t  }\n\t}\n\tfunction scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n\t  // This is a special fork of scheduleUpdateOnFiber that is only used to\n\t  // schedule the initial hydration of a root that has just been created. Most\n\t  // of the stuff in scheduleUpdateOnFiber can be skipped.\n\t  //\n\t  // The main reason for this separate path, though, is to distinguish the\n\t  // initial children from subsequent updates. In fully client-rendered roots\n\t  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n\t  // updates, but hydration roots are special because the initial render must\n\t  // match what was rendered on the server.\n\t  var current = root.current;\n\t  current.lanes = lane;\n\t  markRootUpdated(root, lane, eventTime);\n\t  ensureRootIsScheduled(root, eventTime);\n\t}\n\tfunction isUnsafeClassRenderPhaseUpdate(fiber) {\n\t  // Check if this is a render phase update. Only called by class components,\n\t  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n\t  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n\t    // decided not to enable it.\n\t     (executionContext & RenderContext) !== NoContext\n\t  );\n\t} // Use this function to schedule a task for a root. There's only one task per\n\t// root; if a task was already scheduled, we'll check to make sure the priority\n\t// of the existing task is the same as the priority of the next level that the\n\t// root has work on. This function is called on every update, and right before\n\t// exiting a task.\n\n\tfunction ensureRootIsScheduled(root, currentTime) {\n\t  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n\t  // expired so we know to work on those next.\n\n\t  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n\t  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n\t  if (nextLanes === NoLanes) {\n\t    // Special case: There's nothing to work on.\n\t    if (existingCallbackNode !== null) {\n\t      cancelCallback$1(existingCallbackNode);\n\t    }\n\n\t    root.callbackNode = null;\n\t    root.callbackPriority = NoLane;\n\t    return;\n\t  } // We use the highest priority lane to represent the priority of the callback.\n\n\n\t  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n\t  var existingCallbackPriority = root.callbackPriority;\n\n\t  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n\t  // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n\t  // on the `act` queue.\n\t  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n\t    {\n\t      // If we're going to re-use an existing task, it needs to exist.\n\t      // Assume that discrete update microtasks are non-cancellable and null.\n\t      // TODO: Temporary until we confirm this warning is not fired.\n\t      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n\t        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n\t      }\n\t    } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n\n\t    return;\n\t  }\n\n\t  if (existingCallbackNode != null) {\n\t    // Cancel the existing callback. We'll schedule a new one below.\n\t    cancelCallback$1(existingCallbackNode);\n\t  } // Schedule a new callback.\n\n\n\t  var newCallbackNode;\n\n\t  if (newCallbackPriority === SyncLane) {\n\t    // Special case: Sync React callbacks are scheduled on a special\n\t    // internal queue\n\t    if (root.tag === LegacyRoot) {\n\t      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n\t        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n\t      }\n\n\t      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n\t    } else {\n\t      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n\t    }\n\n\t    if (supportsMicrotasks) {\n\t      // Flush the queue in a microtask.\n\t      if ( ReactCurrentActQueue$1.current !== null) {\n\t        // Inside `act`, use our internal `act` queue so that these get flushed\n\t        // at the end of the current scope even when using the sync version\n\t        // of `act`.\n\t        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n\t      } else {\n\t        scheduleMicrotask(function () {\n\t          // In Safari, appending an iframe forces microtasks to run.\n\t          // https://github.com/facebook/react/issues/22459\n\t          // We don't support running callbacks in the middle of render\n\t          // or commit so we need to check against that.\n\t          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n\t            // Note that this would still prematurely flush the callbacks\n\t            // if this happens outside render or commit phase (e.g. in an event).\n\t            flushSyncCallbacks();\n\t          }\n\t        });\n\t      }\n\t    } else {\n\t      // Flush the queue in an Immediate task.\n\t      scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n\t    }\n\n\t    newCallbackNode = null;\n\t  } else {\n\t    var schedulerPriorityLevel;\n\n\t    switch (lanesToEventPriority(nextLanes)) {\n\t      case DiscreteEventPriority:\n\t        schedulerPriorityLevel = ImmediatePriority;\n\t        break;\n\n\t      case ContinuousEventPriority:\n\t        schedulerPriorityLevel = UserBlockingPriority;\n\t        break;\n\n\t      case DefaultEventPriority:\n\t        schedulerPriorityLevel = NormalPriority;\n\t        break;\n\n\t      case IdleEventPriority:\n\t        schedulerPriorityLevel = IdlePriority;\n\t        break;\n\n\t      default:\n\t        schedulerPriorityLevel = NormalPriority;\n\t        break;\n\t    }\n\n\t    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n\t  }\n\n\t  root.callbackPriority = newCallbackPriority;\n\t  root.callbackNode = newCallbackNode;\n\t} // This is the entry point for every concurrent task, i.e. anything that\n\t// goes through Scheduler.\n\n\n\tfunction performConcurrentWorkOnRoot(root, didTimeout) {\n\t  {\n\t    resetNestedUpdateFlag();\n\t  } // Since we know we're in a React event, we can clear the current\n\t  // event time. The next update will compute a new event time.\n\n\n\t  currentEventTime = NoTimestamp;\n\t  currentEventTransitionLane = NoLanes;\n\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    throw new Error('Should not already be working.');\n\t  } // Flush any pending passive effects before deciding which lanes to work on,\n\t  // in case they schedule additional work.\n\n\n\t  var originalCallbackNode = root.callbackNode;\n\t  var didFlushPassiveEffects = flushPassiveEffects();\n\n\t  if (didFlushPassiveEffects) {\n\t    // Something in the passive effect phase may have canceled the current task.\n\t    // Check if the task node for this root was changed.\n\t    if (root.callbackNode !== originalCallbackNode) {\n\t      // The current task was canceled. Exit. We don't need to call\n\t      // `ensureRootIsScheduled` because the check above implies either that\n\t      // there's a new task, or that there's no remaining work on this root.\n\t      return null;\n\t    }\n\t  } // Determine the next lanes to work on, using the fields stored\n\t  // on the root.\n\n\n\t  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n\t  if (lanes === NoLanes) {\n\t    // Defensive coding. This is never expected to happen.\n\t    return null;\n\t  } // We disable time-slicing in some cases: if the work has been CPU-bound\n\t  // for too long (\"expired\" work, to prevent starvation), or we're in\n\t  // sync-updates-by-default mode.\n\t  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n\t  // bug we're still investigating. Once the bug in Scheduler is fixed,\n\t  // we can remove this, since we track expiration ourselves.\n\n\n\t  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);\n\t  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n\t  if (exitStatus !== RootInProgress) {\n\t    if (exitStatus === RootErrored) {\n\t      // If something threw an error, try rendering one more time. We'll\n\t      // render synchronously to block concurrent data mutations, and we'll\n\t      // includes all pending updates are included. If it still fails after\n\t      // the second attempt, we'll give up and commit the resulting tree.\n\t      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n\t      if (errorRetryLanes !== NoLanes) {\n\t        lanes = errorRetryLanes;\n\t        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n\t      }\n\t    }\n\n\t    if (exitStatus === RootFatalErrored) {\n\t      var fatalError = workInProgressRootFatalError;\n\t      prepareFreshStack(root, NoLanes);\n\t      markRootSuspended$1(root, lanes);\n\t      ensureRootIsScheduled(root, now());\n\t      throw fatalError;\n\t    }\n\n\t    if (exitStatus === RootDidNotComplete) {\n\t      // The render unwound without completing the tree. This happens in special\n\t      // cases where need to exit the current render without producing a\n\t      // consistent tree or committing.\n\t      //\n\t      // This should only happen during a concurrent render, not a discrete or\n\t      // synchronous update. We should have already checked for this when we\n\t      // unwound the stack.\n\t      markRootSuspended$1(root, lanes);\n\t    } else {\n\t      // The render completed.\n\t      // Check if this render may have yielded to a concurrent event, and if so,\n\t      // confirm that any newly rendered stores are consistent.\n\t      // TODO: It's possible that even a concurrent render may never have yielded\n\t      // to the main thread, if it was fast enough, or if it expired. We could\n\t      // skip the consistency check in that case, too.\n\t      var renderWasConcurrent = !includesBlockingLane(root, lanes);\n\t      var finishedWork = root.current.alternate;\n\n\t      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n\t        // A store was mutated in an interleaved event. Render again,\n\t        // synchronously, to block further mutations.\n\t        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n\t        if (exitStatus === RootErrored) {\n\t          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n\t          if (_errorRetryLanes !== NoLanes) {\n\t            lanes = _errorRetryLanes;\n\t            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n\t            // concurrent events.\n\t          }\n\t        }\n\n\t        if (exitStatus === RootFatalErrored) {\n\t          var _fatalError = workInProgressRootFatalError;\n\t          prepareFreshStack(root, NoLanes);\n\t          markRootSuspended$1(root, lanes);\n\t          ensureRootIsScheduled(root, now());\n\t          throw _fatalError;\n\t        }\n\t      } // We now have a consistent tree. The next step is either to commit it,\n\t      // or, if something suspended, wait to commit it after a timeout.\n\n\n\t      root.finishedWork = finishedWork;\n\t      root.finishedLanes = lanes;\n\t      finishConcurrentRender(root, exitStatus, lanes);\n\t    }\n\t  }\n\n\t  ensureRootIsScheduled(root, now());\n\n\t  if (root.callbackNode === originalCallbackNode) {\n\t    // The task node scheduled for this root is the same one that's\n\t    // currently executed. Need to return a continuation.\n\t    return performConcurrentWorkOnRoot.bind(null, root);\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction recoverFromConcurrentError(root, errorRetryLanes) {\n\t  // If an error occurred during hydration, discard server response and fall\n\t  // back to client side render.\n\t  // Before rendering again, save the errors from the previous attempt.\n\t  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n\t  if (isRootDehydrated(root)) {\n\t    // The shell failed to hydrate. Set a flag to force a client rendering\n\t    // during the next attempt. To do this, we call prepareFreshStack now\n\t    // to create the root work-in-progress fiber. This is a bit weird in terms\n\t    // of factoring, because it relies on renderRootSync not calling\n\t    // prepareFreshStack again in the call below, which happens because the\n\t    // root and lanes haven't changed.\n\t    //\n\t    // TODO: I think what we should do is set ForceClientRender inside\n\t    // throwException, like we do for nested Suspense boundaries. The reason\n\t    // it's here instead is so we can switch to the synchronous work loop, too.\n\t    // Something to consider for a future refactor.\n\t    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n\t    rootWorkInProgress.flags |= ForceClientRender;\n\n\t    {\n\t      errorHydratingContainer(root.containerInfo);\n\t    }\n\t  }\n\n\t  var exitStatus = renderRootSync(root, errorRetryLanes);\n\n\t  if (exitStatus !== RootErrored) {\n\t    // Successfully finished rendering on retry\n\t    // The errors from the failed first attempt have been recovered. Add\n\t    // them to the collection of recoverable errors. We'll log them in the\n\t    // commit phase.\n\t    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n\t    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n\t    // from the first attempt, to preserve the causal sequence.\n\n\t    if (errorsFromSecondAttempt !== null) {\n\t      queueRecoverableErrors(errorsFromSecondAttempt);\n\t    }\n\t  }\n\n\t  return exitStatus;\n\t}\n\n\tfunction queueRecoverableErrors(errors) {\n\t  if (workInProgressRootRecoverableErrors === null) {\n\t    workInProgressRootRecoverableErrors = errors;\n\t  } else {\n\t    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n\t  }\n\t}\n\n\tfunction finishConcurrentRender(root, exitStatus, lanes) {\n\t  switch (exitStatus) {\n\t    case RootInProgress:\n\t    case RootFatalErrored:\n\t      {\n\t        throw new Error('Root did not complete. This is a bug in React.');\n\t      }\n\t    // Flow knows about invariant, so it complains if I add a break\n\t    // statement, but eslint doesn't know about invariant, so it complains\n\t    // if I do. eslint-disable-next-line no-fallthrough\n\n\t    case RootErrored:\n\t      {\n\t        // We should have already attempted to retry this tree. If we reached\n\t        // this point, it errored again. Commit it.\n\t        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n\t        break;\n\t      }\n\n\t    case RootSuspended:\n\t      {\n\t        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n\t        // should immediately commit it or wait a bit.\n\n\t        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n\t        !shouldForceFlushFallbacksInDEV()) {\n\t          // This render only included retries, no updates. Throttle committing\n\t          // retries so that we don't show too many loading states too quickly.\n\t          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n\t          if (msUntilTimeout > 10) {\n\t            var nextLanes = getNextLanes(root, NoLanes);\n\n\t            if (nextLanes !== NoLanes) {\n\t              // There's additional work on this root.\n\t              break;\n\t            }\n\n\t            var suspendedLanes = root.suspendedLanes;\n\n\t            if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n\t              // We should prefer to render the fallback of at the last\n\t              // suspended level. Ping the last suspended level to try\n\t              // rendering it again.\n\t              // FIXME: What if the suspended lanes are Idle? Should not restart.\n\t              requestEventTime();\n\t              markRootPinged(root, suspendedLanes);\n\t              break;\n\t            } // The render is suspended, it hasn't timed out, and there's no\n\t            // lower priority work to do. Instead of committing the fallback\n\t            // immediately, wait for more data to arrive.\n\n\n\t            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);\n\t            break;\n\t          }\n\t        } // The work expired. Commit immediately.\n\n\n\t        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n\t        break;\n\t      }\n\n\t    case RootSuspendedWithDelay:\n\t      {\n\t        markRootSuspended$1(root, lanes);\n\n\t        if (includesOnlyTransitions(lanes)) {\n\t          // This is a transition, so we should exit without committing a\n\t          // placeholder and without scheduling a timeout. Delay indefinitely\n\t          // until we receive more data.\n\t          break;\n\t        }\n\n\t        if (!shouldForceFlushFallbacksInDEV()) {\n\t          // This is not a transition, but we did trigger an avoided state.\n\t          // Schedule a placeholder to display after a short delay, using the Just\n\t          // Noticeable Difference.\n\t          // TODO: Is the JND optimization worth the added complexity? If this is\n\t          // the only reason we track the event time, then probably not.\n\t          // Consider removing.\n\t          var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n\t          var eventTimeMs = mostRecentEventTime;\n\t          var timeElapsedMs = now() - eventTimeMs;\n\n\t          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n\t          if (_msUntilTimeout > 10) {\n\t            // Instead of committing the fallback immediately, wait for more data\n\t            // to arrive.\n\t            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);\n\t            break;\n\t          }\n\t        } // Commit the placeholder.\n\n\n\t        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n\t        break;\n\t      }\n\n\t    case RootCompleted:\n\t      {\n\t        // The work completed. Ready to commit.\n\t        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n\t        break;\n\t      }\n\n\t    default:\n\t      {\n\t        throw new Error('Unknown root exit status.');\n\t      }\n\t  }\n\t}\n\n\tfunction isRenderConsistentWithExternalStores(finishedWork) {\n\t  // Search the rendered tree for external store reads, and check whether the\n\t  // stores were mutated in a concurrent event. Intentionally using an iterative\n\t  // loop instead of recursion so we can exit early.\n\t  var node = finishedWork;\n\n\t  while (true) {\n\t    if (node.flags & StoreConsistency) {\n\t      var updateQueue = node.updateQueue;\n\n\t      if (updateQueue !== null) {\n\t        var checks = updateQueue.stores;\n\n\t        if (checks !== null) {\n\t          for (var i = 0; i < checks.length; i++) {\n\t            var check = checks[i];\n\t            var getSnapshot = check.getSnapshot;\n\t            var renderedValue = check.value;\n\n\t            try {\n\t              if (!objectIs(getSnapshot(), renderedValue)) {\n\t                // Found an inconsistent store.\n\t                return false;\n\t              }\n\t            } catch (error) {\n\t              // If `getSnapshot` throws, return `false`. This will schedule\n\t              // a re-render, and the error will be rethrown during render.\n\t              return false;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    var child = node.child;\n\n\t    if (node.subtreeFlags & StoreConsistency && child !== null) {\n\t      child.return = node;\n\t      node = child;\n\t      continue;\n\t    }\n\n\t    if (node === finishedWork) {\n\t      return true;\n\t    }\n\n\t    while (node.sibling === null) {\n\t      if (node.return === null || node.return === finishedWork) {\n\t        return true;\n\t      }\n\n\t      node = node.return;\n\t    }\n\n\t    node.sibling.return = node.return;\n\t    node = node.sibling;\n\t  } // Flow doesn't know this is unreachable, but eslint does\n\t  // eslint-disable-next-line no-unreachable\n\n\n\t  return true;\n\t}\n\n\tfunction markRootSuspended$1(root, suspendedLanes) {\n\t  // When suspending, we should always exclude lanes that were pinged or (more\n\t  // rarely, since we try to avoid it) updated during the render phase.\n\t  // TODO: Lol maybe there's a better way to factor this besides this\n\t  // obnoxiously named function :)\n\t  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n\t  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n\t  markRootSuspended(root, suspendedLanes);\n\t} // This is the entry point for synchronous tasks that don't go\n\t// through Scheduler\n\n\n\tfunction performSyncWorkOnRoot(root) {\n\t  {\n\t    syncNestedUpdateFlag();\n\t  }\n\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    throw new Error('Should not already be working.');\n\t  }\n\n\t  flushPassiveEffects();\n\t  var lanes = getNextLanes(root, NoLanes);\n\n\t  if (!includesSomeLane(lanes, SyncLane)) {\n\t    // There's no remaining sync work left.\n\t    ensureRootIsScheduled(root, now());\n\t    return null;\n\t  }\n\n\t  var exitStatus = renderRootSync(root, lanes);\n\n\t  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n\t    // If something threw an error, try rendering one more time. We'll render\n\t    // synchronously to block concurrent data mutations, and we'll includes\n\t    // all pending updates are included. If it still fails after the second\n\t    // attempt, we'll give up and commit the resulting tree.\n\t    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n\t    if (errorRetryLanes !== NoLanes) {\n\t      lanes = errorRetryLanes;\n\t      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n\t    }\n\t  }\n\n\t  if (exitStatus === RootFatalErrored) {\n\t    var fatalError = workInProgressRootFatalError;\n\t    prepareFreshStack(root, NoLanes);\n\t    markRootSuspended$1(root, lanes);\n\t    ensureRootIsScheduled(root, now());\n\t    throw fatalError;\n\t  }\n\n\t  if (exitStatus === RootDidNotComplete) {\n\t    throw new Error('Root did not complete. This is a bug in React.');\n\t  } // We now have a consistent tree. Because this is a sync render, we\n\t  // will commit it even if something suspended.\n\n\n\t  var finishedWork = root.current.alternate;\n\t  root.finishedWork = finishedWork;\n\t  root.finishedLanes = lanes;\n\t  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next\n\t  // pending level.\n\n\t  ensureRootIsScheduled(root, now());\n\t  return null;\n\t}\n\n\tfunction flushRoot(root, lanes) {\n\t  if (lanes !== NoLanes) {\n\t    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n\t    ensureRootIsScheduled(root, now());\n\n\t    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n\t      resetRenderTimer();\n\t      flushSyncCallbacks();\n\t    }\n\t  }\n\t}\n\tfunction deferredUpdates(fn) {\n\t  var previousPriority = getCurrentUpdatePriority();\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DefaultEventPriority);\n\t    return fn();\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t  }\n\t}\n\tfunction batchedUpdates(fn, a) {\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= BatchedContext;\n\n\t  try {\n\t    return fn(a);\n\t  } finally {\n\t    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n\t    // most batchedUpdates-like method.\n\n\t    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n\t    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n\t      resetRenderTimer();\n\t      flushSyncCallbacksOnlyInLegacyMode();\n\t    }\n\t  }\n\t}\n\tfunction discreteUpdates(fn, a, b, c, d) {\n\t  var previousPriority = getCurrentUpdatePriority();\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\t    return fn(a, b, c, d);\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\n\t    if (executionContext === NoContext) {\n\t      resetRenderTimer();\n\t    }\n\t  }\n\t} // Overload the definition to the two valid signatures.\n\t// Warning, this opts-out of checking the function body.\n\n\t// eslint-disable-next-line no-redeclare\n\tfunction flushSync(fn) {\n\t  // In legacy mode, we flush pending passive effects at the beginning of the\n\t  // next event, not at the end of the previous one.\n\t  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n\t    flushPassiveEffects();\n\t  }\n\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= BatchedContext;\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\t  var previousPriority = getCurrentUpdatePriority();\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\n\t    if (fn) {\n\t      return fn();\n\t    } else {\n\t      return undefined;\n\t    }\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n\t    // Note that this will happen even if batchedUpdates is higher up\n\t    // the stack.\n\n\t    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n\t      flushSyncCallbacks();\n\t    }\n\t  }\n\t}\n\tfunction isAlreadyRendering() {\n\t  // Used by the renderer to print a warning if certain APIs are called from\n\t  // the wrong context.\n\t  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;\n\t}\n\tfunction flushControlled(fn) {\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= BatchedContext;\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\t  var previousPriority = getCurrentUpdatePriority();\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\t    fn();\n\t  } finally {\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t    executionContext = prevExecutionContext;\n\n\t    if (executionContext === NoContext) {\n\t      // Flush the immediate callbacks that were scheduled during this batch\n\t      resetRenderTimer();\n\t      flushSyncCallbacks();\n\t    }\n\t  }\n\t}\n\tfunction pushRenderLanes(fiber, lanes) {\n\t  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n\t  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n\t}\n\tfunction popRenderLanes(fiber) {\n\t  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n\t  pop(subtreeRenderLanesCursor, fiber);\n\t}\n\n\tfunction prepareFreshStack(root, lanes) {\n\t  root.finishedWork = null;\n\t  root.finishedLanes = NoLanes;\n\t  var timeoutHandle = root.timeoutHandle;\n\n\t  if (timeoutHandle !== noTimeout) {\n\t    // The root previous suspended and scheduled a timeout to commit a fallback\n\t    // state. Now that we have additional work, cancel the timeout.\n\t    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n\t    cancelTimeout(timeoutHandle);\n\t  }\n\n\t  if (workInProgress !== null) {\n\t    var interruptedWork = workInProgress.return;\n\n\t    while (interruptedWork !== null) {\n\t      var current = interruptedWork.alternate;\n\t      unwindInterruptedWork(current, interruptedWork);\n\t      interruptedWork = interruptedWork.return;\n\t    }\n\t  }\n\n\t  workInProgressRoot = root;\n\t  var rootWorkInProgress = createWorkInProgress(root.current, null);\n\t  workInProgress = rootWorkInProgress;\n\t  workInProgressRootRenderLanes = subtreeRenderLanes = lanes;\n\t  workInProgressRootExitStatus = RootInProgress;\n\t  workInProgressRootFatalError = null;\n\t  workInProgressRootSkippedLanes = NoLanes;\n\t  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n\t  workInProgressRootPingedLanes = NoLanes;\n\t  workInProgressRootConcurrentErrors = null;\n\t  workInProgressRootRecoverableErrors = null;\n\t  finishQueueingConcurrentUpdates();\n\n\t  {\n\t    ReactStrictModeWarnings.discardPendingWarnings();\n\t  }\n\n\t  return rootWorkInProgress;\n\t}\n\n\tfunction handleError(root, thrownValue) {\n\t  do {\n\t    var erroredWork = workInProgress;\n\n\t    try {\n\t      // Reset module-level state that was set during the render phase.\n\t      resetContextDependencies();\n\t      resetHooksAfterThrow();\n\t      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n\t      // separate issue. Write a regression test using string refs.\n\n\t      ReactCurrentOwner$2.current = null;\n\n\t      if (erroredWork === null || erroredWork.return === null) {\n\t        // Expected to be working on a non-root fiber. This is a fatal error\n\t        // because there's no ancestor that can handle it; the root is\n\t        // supposed to capture all errors that weren't caught by an error\n\t        // boundary.\n\t        workInProgressRootExitStatus = RootFatalErrored;\n\t        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n\t        // sibling, or the parent if there are no siblings. But since the root\n\t        // has no siblings nor a parent, we set it to null. Usually this is\n\t        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n\t        // intentionally not calling those, we need set it here.\n\t        // TODO: Consider calling `unwindWork` to pop the contexts.\n\n\t        workInProgress = null;\n\t        return;\n\t      }\n\n\t      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n\t        // Record the time spent rendering before an error was thrown. This\n\t        // avoids inaccurate Profiler durations in the case of a\n\t        // suspended render.\n\t        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n\t      }\n\n\t      if (enableSchedulingProfiler) {\n\t        markComponentRenderStopped();\n\n\t        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n\t          var wakeable = thrownValue;\n\t          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n\t        } else {\n\t          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n\t        }\n\t      }\n\n\t      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n\t      completeUnitOfWork(erroredWork);\n\t    } catch (yetAnotherThrownValue) {\n\t      // Something in the return path also threw.\n\t      thrownValue = yetAnotherThrownValue;\n\n\t      if (workInProgress === erroredWork && erroredWork !== null) {\n\t        // If this boundary has already errored, then we had trouble processing\n\t        // the error. Bubble it to the next boundary.\n\t        erroredWork = erroredWork.return;\n\t        workInProgress = erroredWork;\n\t      } else {\n\t        erroredWork = workInProgress;\n\t      }\n\n\t      continue;\n\t    } // Return to the normal work loop.\n\n\n\t    return;\n\t  } while (true);\n\t}\n\n\tfunction pushDispatcher() {\n\t  var prevDispatcher = ReactCurrentDispatcher$2.current;\n\t  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n\t  if (prevDispatcher === null) {\n\t    // The React isomorphic package does not include a default dispatcher.\n\t    // Instead the first renderer will lazily attach one, in order to give\n\t    // nicer error messages.\n\t    return ContextOnlyDispatcher;\n\t  } else {\n\t    return prevDispatcher;\n\t  }\n\t}\n\n\tfunction popDispatcher(prevDispatcher) {\n\t  ReactCurrentDispatcher$2.current = prevDispatcher;\n\t}\n\n\tfunction markCommitTimeOfFallback() {\n\t  globalMostRecentFallbackTime = now();\n\t}\n\tfunction markSkippedUpdateLanes(lane) {\n\t  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n\t}\n\tfunction renderDidSuspend() {\n\t  if (workInProgressRootExitStatus === RootInProgress) {\n\t    workInProgressRootExitStatus = RootSuspended;\n\t  }\n\t}\n\tfunction renderDidSuspendDelayIfPossible() {\n\t  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n\t    workInProgressRootExitStatus = RootSuspendedWithDelay;\n\t  } // Check if there are updates that we skipped tree that might have unblocked\n\t  // this render.\n\n\n\t  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n\t    // Mark the current render as suspended so that we switch to working on\n\t    // the updates that were skipped. Usually we only suspend at the end of\n\t    // the render phase.\n\t    // TODO: We should probably always mark the root as suspended immediately\n\t    // (inside this function), since by suspending at the end of the render\n\t    // phase introduces a potential mistake where we suspend lanes that were\n\t    // pinged or updated while we were rendering.\n\t    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n\t  }\n\t}\n\tfunction renderDidError(error) {\n\t  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n\t    workInProgressRootExitStatus = RootErrored;\n\t  }\n\n\t  if (workInProgressRootConcurrentErrors === null) {\n\t    workInProgressRootConcurrentErrors = [error];\n\t  } else {\n\t    workInProgressRootConcurrentErrors.push(error);\n\t  }\n\t} // Called during render to determine if anything has suspended.\n\t// Returns false if we're not sure.\n\n\tfunction renderHasNotSuspendedYet() {\n\t  // If something errored or completed, we can't really be sure,\n\t  // so those are false.\n\t  return workInProgressRootExitStatus === RootInProgress;\n\t}\n\n\tfunction renderRootSync(root, lanes) {\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= RenderContext;\n\t  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n\t  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n\t  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n\t    {\n\t      if (isDevToolsPresent) {\n\t        var memoizedUpdaters = root.memoizedUpdaters;\n\n\t        if (memoizedUpdaters.size > 0) {\n\t          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n\t          memoizedUpdaters.clear();\n\t        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n\t        // If we bailout on this work, we'll move them back (like above).\n\t        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n\t        // That way we can keep the current update and future updates separate.\n\n\n\t        movePendingFibersToMemoized(root, lanes);\n\t      }\n\t    }\n\n\t    workInProgressTransitions = getTransitionsForLanes();\n\t    prepareFreshStack(root, lanes);\n\t  }\n\n\t  {\n\t    markRenderStarted(lanes);\n\t  }\n\n\t  do {\n\t    try {\n\t      workLoopSync();\n\t      break;\n\t    } catch (thrownValue) {\n\t      handleError(root, thrownValue);\n\t    }\n\t  } while (true);\n\n\t  resetContextDependencies();\n\t  executionContext = prevExecutionContext;\n\t  popDispatcher(prevDispatcher);\n\n\t  if (workInProgress !== null) {\n\t    // This is a sync render, so we should have finished the whole tree.\n\t    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n\t  }\n\n\t  {\n\t    markRenderStopped();\n\t  } // Set this to null to indicate there's no in-progress render.\n\n\n\t  workInProgressRoot = null;\n\t  workInProgressRootRenderLanes = NoLanes;\n\t  return workInProgressRootExitStatus;\n\t} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n\t/** @noinline */\n\n\n\tfunction workLoopSync() {\n\t  // Already timed out, so perform work without checking if we need to yield.\n\t  while (workInProgress !== null) {\n\t    performUnitOfWork(workInProgress);\n\t  }\n\t}\n\n\tfunction renderRootConcurrent(root, lanes) {\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= RenderContext;\n\t  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n\t  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n\t  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n\t    {\n\t      if (isDevToolsPresent) {\n\t        var memoizedUpdaters = root.memoizedUpdaters;\n\n\t        if (memoizedUpdaters.size > 0) {\n\t          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n\t          memoizedUpdaters.clear();\n\t        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n\t        // If we bailout on this work, we'll move them back (like above).\n\t        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n\t        // That way we can keep the current update and future updates separate.\n\n\n\t        movePendingFibersToMemoized(root, lanes);\n\t      }\n\t    }\n\n\t    workInProgressTransitions = getTransitionsForLanes();\n\t    resetRenderTimer();\n\t    prepareFreshStack(root, lanes);\n\t  }\n\n\t  {\n\t    markRenderStarted(lanes);\n\t  }\n\n\t  do {\n\t    try {\n\t      workLoopConcurrent();\n\t      break;\n\t    } catch (thrownValue) {\n\t      handleError(root, thrownValue);\n\t    }\n\t  } while (true);\n\n\t  resetContextDependencies();\n\t  popDispatcher(prevDispatcher);\n\t  executionContext = prevExecutionContext;\n\n\n\t  if (workInProgress !== null) {\n\t    // Still work remaining.\n\t    {\n\t      markRenderYielded();\n\t    }\n\n\t    return RootInProgress;\n\t  } else {\n\t    // Completed the tree.\n\t    {\n\t      markRenderStopped();\n\t    } // Set this to null to indicate there's no in-progress render.\n\n\n\t    workInProgressRoot = null;\n\t    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n\t    return workInProgressRootExitStatus;\n\t  }\n\t}\n\t/** @noinline */\n\n\n\tfunction workLoopConcurrent() {\n\t  // Perform work until Scheduler asks us to yield\n\t  while (workInProgress !== null && !shouldYield()) {\n\t    performUnitOfWork(workInProgress);\n\t  }\n\t}\n\n\tfunction performUnitOfWork(unitOfWork) {\n\t  // The current, flushed, state of this fiber is the alternate. Ideally\n\t  // nothing should rely on this, but relying on it here means that we don't\n\t  // need an additional field on the work in progress.\n\t  var current = unitOfWork.alternate;\n\t  setCurrentFiber(unitOfWork);\n\t  var next;\n\n\t  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\n\t    startProfilerTimer(unitOfWork);\n\t    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n\t    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n\t  } else {\n\t    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n\t  }\n\n\t  resetCurrentFiber();\n\t  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n\t  if (next === null) {\n\t    // If this doesn't spawn new work, complete the current work.\n\t    completeUnitOfWork(unitOfWork);\n\t  } else {\n\t    workInProgress = next;\n\t  }\n\n\t  ReactCurrentOwner$2.current = null;\n\t}\n\n\tfunction completeUnitOfWork(unitOfWork) {\n\t  // Attempt to complete the current unit of work, then move to the next\n\t  // sibling. If there are no more siblings, return to the parent fiber.\n\t  var completedWork = unitOfWork;\n\n\t  do {\n\t    // The current, flushed, state of this fiber is the alternate. Ideally\n\t    // nothing should rely on this, but relying on it here means that we don't\n\t    // need an additional field on the work in progress.\n\t    var current = completedWork.alternate;\n\t    var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n\t    if ((completedWork.flags & Incomplete) === NoFlags) {\n\t      setCurrentFiber(completedWork);\n\t      var next = void 0;\n\n\t      if ( (completedWork.mode & ProfileMode) === NoMode) {\n\t        next = completeWork(current, completedWork, subtreeRenderLanes);\n\t      } else {\n\t        startProfilerTimer(completedWork);\n\t        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n\t        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\t      }\n\n\t      resetCurrentFiber();\n\n\t      if (next !== null) {\n\t        // Completing this fiber spawned new work. Work on that next.\n\t        workInProgress = next;\n\t        return;\n\t      }\n\t    } else {\n\t      // This fiber did not complete because something threw. Pop values off\n\t      // the stack without entering the complete phase. If this is a boundary,\n\t      // capture values if possible.\n\t      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n\t      if (_next !== null) {\n\t        // If completing this work spawned new work, do that next. We'll come\n\t        // back here again.\n\t        // Since we're restarting, remove anything that is not a host effect\n\t        // from the effect tag.\n\t        _next.flags &= HostEffectMask;\n\t        workInProgress = _next;\n\t        return;\n\t      }\n\n\t      if ( (completedWork.mode & ProfileMode) !== NoMode) {\n\t        // Record the render duration for the fiber that errored.\n\t        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n\t        var actualDuration = completedWork.actualDuration;\n\t        var child = completedWork.child;\n\n\t        while (child !== null) {\n\t          actualDuration += child.actualDuration;\n\t          child = child.sibling;\n\t        }\n\n\t        completedWork.actualDuration = actualDuration;\n\t      }\n\n\t      if (returnFiber !== null) {\n\t        // Mark the parent fiber as incomplete and clear its subtree flags.\n\t        returnFiber.flags |= Incomplete;\n\t        returnFiber.subtreeFlags = NoFlags;\n\t        returnFiber.deletions = null;\n\t      } else {\n\t        // We've unwound all the way to the root.\n\t        workInProgressRootExitStatus = RootDidNotComplete;\n\t        workInProgress = null;\n\t        return;\n\t      }\n\t    }\n\n\t    var siblingFiber = completedWork.sibling;\n\n\t    if (siblingFiber !== null) {\n\t      // If there is more work to do in this returnFiber, do that next.\n\t      workInProgress = siblingFiber;\n\t      return;\n\t    } // Otherwise, return to the parent\n\n\n\t    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n\t    workInProgress = completedWork;\n\t  } while (completedWork !== null); // We've reached the root.\n\n\n\t  if (workInProgressRootExitStatus === RootInProgress) {\n\t    workInProgressRootExitStatus = RootCompleted;\n\t  }\n\t}\n\n\tfunction commitRoot(root, recoverableErrors, transitions) {\n\t  // TODO: This no longer makes any sense. We already wrap the mutation and\n\t  // layout phases. Should be able to remove.\n\t  var previousUpdateLanePriority = getCurrentUpdatePriority();\n\t  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n\t  try {\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\t    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);\n\t  } finally {\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t    setCurrentUpdatePriority(previousUpdateLanePriority);\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {\n\t  do {\n\t    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n\t    // means `flushPassiveEffects` will sometimes result in additional\n\t    // passive effects. So we need to keep flushing in a loop until there are\n\t    // no more pending effects.\n\t    // TODO: Might be better if `flushPassiveEffects` did not automatically\n\t    // flush synchronous work at the end, to avoid factoring hazards like this.\n\t    flushPassiveEffects();\n\t  } while (rootWithPendingPassiveEffects !== null);\n\n\t  flushRenderPhaseStrictModeWarningsInDEV();\n\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    throw new Error('Should not already be working.');\n\t  }\n\n\t  var finishedWork = root.finishedWork;\n\t  var lanes = root.finishedLanes;\n\n\t  {\n\t    markCommitStarted(lanes);\n\t  }\n\n\t  if (finishedWork === null) {\n\n\t    {\n\t      markCommitStopped();\n\t    }\n\n\t    return null;\n\t  } else {\n\t    {\n\t      if (lanes === NoLanes) {\n\t        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n\t      }\n\t    }\n\t  }\n\n\t  root.finishedWork = null;\n\t  root.finishedLanes = NoLanes;\n\n\t  if (finishedWork === root.current) {\n\t    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n\t  } // commitRoot never returns a continuation; it always finishes synchronously.\n\t  // So we can clear these now to allow a new callback to be scheduled.\n\n\n\t  root.callbackNode = null;\n\t  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n\t  // pending time is whatever is left on the root fiber.\n\n\t  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n\t  markRootFinished(root, remainingLanes);\n\n\t  if (root === workInProgressRoot) {\n\t    // We can reset these now that they are finished.\n\t    workInProgressRoot = null;\n\t    workInProgress = null;\n\t    workInProgressRootRenderLanes = NoLanes;\n\t  } // If there are pending passive effects, schedule a callback to process them.\n\t  // Do this as early as possible, so it is queued before anything else that\n\t  // might get scheduled in the commit phase. (See #16714.)\n\t  // TODO: Delete all other places that schedule the passive effect callback\n\t  // They're redundant.\n\n\n\t  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n\t    if (!rootDoesHavePassiveEffects) {\n\t      rootDoesHavePassiveEffects = true;\n\t      // to store it in pendingPassiveTransitions until they get processed\n\t      // We need to pass this through as an argument to commitRoot\n\t      // because workInProgressTransitions might have changed between\n\t      // the previous render and commit if we throttle the commit\n\t      // with setTimeout\n\n\t      pendingPassiveTransitions = transitions;\n\t      scheduleCallback$1(NormalPriority, function () {\n\t        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n\t        // *after* passive effects fire to avoid freeing a cache pool that may\n\t        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n\t        return null;\n\t      });\n\t    }\n\t  } // Check if there are any effects in the whole tree.\n\t  // TODO: This is left over from the effect list implementation, where we had\n\t  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n\t  // only other reason this optimization exists is because it affects profiling.\n\t  // Reconsider whether this is necessary.\n\n\n\t  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\t  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n\t  if (subtreeHasEffects || rootHasEffect) {\n\t    var prevTransition = ReactCurrentBatchConfig$2.transition;\n\t    ReactCurrentBatchConfig$2.transition = null;\n\t    var previousPriority = getCurrentUpdatePriority();\n\t    setCurrentUpdatePriority(DiscreteEventPriority);\n\t    var prevExecutionContext = executionContext;\n\t    executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n\t    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n\t    // of the effect list for each phase: all mutation effects come before all\n\t    // layout effects, and so on.\n\t    // The first phase a \"before mutation\" phase. We use this phase to read the\n\t    // state of the host tree right before we mutate it. This is where\n\t    // getSnapshotBeforeUpdate is called.\n\n\t    commitBeforeMutationEffects(root, finishedWork);\n\n\t    {\n\t      // Mark the current commit time to be shared by all Profilers in this\n\t      // batch. This enables them to be grouped later.\n\t      recordCommitTime();\n\t    }\n\n\n\t    commitMutationEffects(root, finishedWork, lanes);\n\n\t    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n\t    // the mutation phase, so that the previous tree is still current during\n\t    // componentWillUnmount, but before the layout phase, so that the finished\n\t    // work is current during componentDidMount/Update.\n\n\t    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n\t    {\n\t      markLayoutEffectsStarted(lanes);\n\t    }\n\n\t    commitLayoutEffects(finishedWork, root, lanes);\n\n\t    {\n\t      markLayoutEffectsStopped();\n\t    }\n\t    // opportunity to paint.\n\n\n\t    requestPaint();\n\t    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n\t    setCurrentUpdatePriority(previousPriority);\n\t    ReactCurrentBatchConfig$2.transition = prevTransition;\n\t  } else {\n\t    // No effects.\n\t    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n\t    // no effects.\n\t    // TODO: Maybe there's a better way to report this.\n\n\t    {\n\t      recordCommitTime();\n\t    }\n\t  }\n\n\t  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n\t  if (rootDoesHavePassiveEffects) {\n\t    // This commit has passive effects. Stash a reference to them. But don't\n\t    // schedule a callback until after flushing layout work.\n\t    rootDoesHavePassiveEffects = false;\n\t    rootWithPendingPassiveEffects = root;\n\t    pendingPassiveEffectsLanes = lanes;\n\t  } else {\n\n\t    {\n\t      nestedPassiveUpdateCount = 0;\n\t      rootWithPassiveNestedUpdates = null;\n\t    }\n\t  } // Read this again, since an effect might have updated it\n\n\n\t  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n\t  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n\t  // is to detect whether something might have called setState inside\n\t  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n\t  // inside `componentDidCatch` is itself flawed — that's why we recommend\n\t  // `getDerivedStateFromError` instead. However, it could be improved by\n\t  // checking if remainingLanes includes Sync work, instead of whether there's\n\t  // any work remaining at all (which would also include stuff like Suspense\n\t  // retries or transitions). It's been like this for a while, though, so fixing\n\t  // it probably isn't that urgent.\n\n\t  if (remainingLanes === NoLanes) {\n\t    // If there's no remaining work, we can clear the set of already failed\n\t    // error boundaries.\n\t    legacyErrorBoundariesThatAlreadyFailed = null;\n\t  }\n\n\t  {\n\t    if (!rootDidHavePassiveEffects) {\n\t      commitDoubleInvokeEffectsInDEV(root.current, false);\n\t    }\n\t  }\n\n\t  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n\t  {\n\t    if (isDevToolsPresent) {\n\t      root.memoizedUpdaters.clear();\n\t    }\n\t  }\n\n\t  {\n\t    onCommitRoot$1();\n\t  } // Always call this before exiting `commitRoot`, to ensure that any\n\t  // additional work on this root is scheduled.\n\n\n\t  ensureRootIsScheduled(root, now());\n\n\t  if (recoverableErrors !== null) {\n\t    // There were errors during this render, but recovered from them without\n\t    // needing to surface it to the UI. We log them here.\n\t    var onRecoverableError = root.onRecoverableError;\n\n\t    for (var i = 0; i < recoverableErrors.length; i++) {\n\t      var recoverableError = recoverableErrors[i];\n\t      var componentStack = recoverableError.stack;\n\t      var digest = recoverableError.digest;\n\t      onRecoverableError(recoverableError.value, {\n\t        componentStack: componentStack,\n\t        digest: digest\n\t      });\n\t    }\n\t  }\n\n\t  if (hasUncaughtError) {\n\t    hasUncaughtError = false;\n\t    var error$1 = firstUncaughtError;\n\t    firstUncaughtError = null;\n\t    throw error$1;\n\t  } // If the passive effects are the result of a discrete render, flush them\n\t  // synchronously at the end of the current task so that the result is\n\t  // immediately observable. Otherwise, we assume that they are not\n\t  // order-dependent and do not need to be observed by external systems, so we\n\t  // can wait until after paint.\n\t  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n\t  // currently schedule the callback in multiple places, will wait until those\n\t  // are consolidated.\n\n\n\t  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n\t    flushPassiveEffects();\n\t  } // Read this again, since a passive effect might have updated it\n\n\n\t  remainingLanes = root.pendingLanes;\n\n\t  if (includesSomeLane(remainingLanes, SyncLane)) {\n\t    {\n\t      markNestedUpdateScheduled();\n\t    } // Count the number of times the root synchronously re-renders without\n\t    // finishing. If there are too many, it indicates an infinite update loop.\n\n\n\t    if (root === rootWithNestedUpdates) {\n\t      nestedUpdateCount++;\n\t    } else {\n\t      nestedUpdateCount = 0;\n\t      rootWithNestedUpdates = root;\n\t    }\n\t  } else {\n\t    nestedUpdateCount = 0;\n\t  } // If layout work was scheduled, flush it now.\n\n\n\t  flushSyncCallbacks();\n\n\t  {\n\t    markCommitStopped();\n\t  }\n\n\t  return null;\n\t}\n\n\tfunction flushPassiveEffects() {\n\t  // Returns whether passive effects were flushed.\n\t  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n\t  // probably just combine the two functions. I believe they were only separate\n\t  // in the first place because we used to wrap it with\n\t  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n\t  // priority within React itself, so we can mutate the variable directly.\n\t  if (rootWithPendingPassiveEffects !== null) {\n\t    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n\t    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n\t    var prevTransition = ReactCurrentBatchConfig$2.transition;\n\t    var previousPriority = getCurrentUpdatePriority();\n\n\t    try {\n\t      ReactCurrentBatchConfig$2.transition = null;\n\t      setCurrentUpdatePriority(priority);\n\t      return flushPassiveEffectsImpl();\n\t    } finally {\n\t      setCurrentUpdatePriority(previousPriority);\n\t      ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\tfunction enqueuePendingPassiveProfilerEffect(fiber) {\n\t  {\n\t    pendingPassiveProfilerEffects.push(fiber);\n\n\t    if (!rootDoesHavePassiveEffects) {\n\t      rootDoesHavePassiveEffects = true;\n\t      scheduleCallback$1(NormalPriority, function () {\n\t        flushPassiveEffects();\n\t        return null;\n\t      });\n\t    }\n\t  }\n\t}\n\n\tfunction flushPassiveEffectsImpl() {\n\t  if (rootWithPendingPassiveEffects === null) {\n\t    return false;\n\t  } // Cache and clear the transitions flag\n\n\n\t  var transitions = pendingPassiveTransitions;\n\t  pendingPassiveTransitions = null;\n\t  var root = rootWithPendingPassiveEffects;\n\t  var lanes = pendingPassiveEffectsLanes;\n\t  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n\t  // Figure out why and fix it. It's not causing any known issues (probably\n\t  // because it's only used for profiling), but it's a refactor hazard.\n\n\t  pendingPassiveEffectsLanes = NoLanes;\n\n\t  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n\t    throw new Error('Cannot flush passive effects while already rendering.');\n\t  }\n\n\t  {\n\t    isFlushingPassiveEffects = true;\n\t    didScheduleUpdateDuringPassiveEffects = false;\n\t  }\n\n\t  {\n\t    markPassiveEffectsStarted(lanes);\n\t  }\n\n\t  var prevExecutionContext = executionContext;\n\t  executionContext |= CommitContext;\n\t  commitPassiveUnmountEffects(root.current);\n\t  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n\n\t  {\n\t    var profilerEffects = pendingPassiveProfilerEffects;\n\t    pendingPassiveProfilerEffects = [];\n\n\t    for (var i = 0; i < profilerEffects.length; i++) {\n\t      var _fiber = profilerEffects[i];\n\t      commitPassiveEffectDurations(root, _fiber);\n\t    }\n\t  }\n\n\t  {\n\t    markPassiveEffectsStopped();\n\t  }\n\n\t  {\n\t    commitDoubleInvokeEffectsInDEV(root.current, true);\n\t  }\n\n\t  executionContext = prevExecutionContext;\n\t  flushSyncCallbacks();\n\n\t  {\n\t    // If additional passive effects were scheduled, increment a counter. If this\n\t    // exceeds the limit, we'll fire a warning.\n\t    if (didScheduleUpdateDuringPassiveEffects) {\n\t      if (root === rootWithPassiveNestedUpdates) {\n\t        nestedPassiveUpdateCount++;\n\t      } else {\n\t        nestedPassiveUpdateCount = 0;\n\t        rootWithPassiveNestedUpdates = root;\n\t      }\n\t    } else {\n\t      nestedPassiveUpdateCount = 0;\n\t    }\n\n\t    isFlushingPassiveEffects = false;\n\t    didScheduleUpdateDuringPassiveEffects = false;\n\t  } // TODO: Move to commitPassiveMountEffects\n\n\n\t  onPostCommitRoot(root);\n\n\t  {\n\t    var stateNode = root.current.stateNode;\n\t    stateNode.effectDuration = 0;\n\t    stateNode.passiveEffectDuration = 0;\n\t  }\n\n\t  return true;\n\t}\n\n\tfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n\t  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n\t}\n\tfunction markLegacyErrorBoundaryAsFailed(instance) {\n\t  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n\t    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n\t  } else {\n\t    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n\t  }\n\t}\n\n\tfunction prepareToThrowUncaughtError(error) {\n\t  if (!hasUncaughtError) {\n\t    hasUncaughtError = true;\n\t    firstUncaughtError = error;\n\t  }\n\t}\n\n\tvar onUncaughtError = prepareToThrowUncaughtError;\n\n\tfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n\t  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n\t  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n\t  var root = enqueueUpdate(rootFiber, update, SyncLane);\n\t  var eventTime = requestEventTime();\n\n\t  if (root !== null) {\n\t    markRootUpdated(root, SyncLane, eventTime);\n\t    ensureRootIsScheduled(root, eventTime);\n\t  }\n\t}\n\n\tfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n\t  {\n\t    reportUncaughtErrorInDEV(error$1);\n\t    setIsRunningInsertionEffect(false);\n\t  }\n\n\t  if (sourceFiber.tag === HostRoot) {\n\t    // Error was thrown at the root. There is no parent, so the root\n\t    // itself should capture it.\n\t    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n\t    return;\n\t  }\n\n\t  var fiber = null;\n\n\t  {\n\t    fiber = nearestMountedAncestor;\n\t  }\n\n\t  while (fiber !== null) {\n\t    if (fiber.tag === HostRoot) {\n\t      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n\t      return;\n\t    } else if (fiber.tag === ClassComponent) {\n\t      var ctor = fiber.type;\n\t      var instance = fiber.stateNode;\n\n\t      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n\t        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n\t        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n\t        var root = enqueueUpdate(fiber, update, SyncLane);\n\t        var eventTime = requestEventTime();\n\n\t        if (root !== null) {\n\t          markRootUpdated(root, SyncLane, eventTime);\n\t          ensureRootIsScheduled(root, eventTime);\n\t        }\n\n\t        return;\n\t      }\n\t    }\n\n\t    fiber = fiber.return;\n\t  }\n\n\t  {\n\t    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n\t    // will fire for errors that are thrown by destroy functions inside deleted\n\t    // trees. What it should instead do is propagate the error to the parent of\n\t    // the deleted tree. In the meantime, do not add this warning to the\n\t    // allowlist; this is only for our internal use.\n\t    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n\t  }\n\t}\n\tfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n\t  var pingCache = root.pingCache;\n\n\t  if (pingCache !== null) {\n\t    // The wakeable resolved, so we no longer need to memoize, because it will\n\t    // never be thrown again.\n\t    pingCache.delete(wakeable);\n\t  }\n\n\t  var eventTime = requestEventTime();\n\t  markRootPinged(root, pingedLanes);\n\t  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n\t  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n\t    // Received a ping at the same priority level at which we're currently\n\t    // rendering. We might want to restart this render. This should mirror\n\t    // the logic of whether or not a root suspends once it completes.\n\t    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n\t    // we should probably never restart.\n\t    // If we're suspended with delay, or if it's a retry, we'll always suspend\n\t    // so we can always restart.\n\t    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n\t      // Restart from the root.\n\t      prepareFreshStack(root, NoLanes);\n\t    } else {\n\t      // Even though we can't restart right now, we might get an\n\t      // opportunity later. So we mark this render as having a ping.\n\t      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n\t    }\n\t  }\n\n\t  ensureRootIsScheduled(root, eventTime);\n\t}\n\n\tfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n\t  // The boundary fiber (a Suspense component or SuspenseList component)\n\t  // previously was rendered in its fallback state. One of the promises that\n\t  // suspended it has resolved, which means at least part of the tree was\n\t  // likely unblocked. Try rendering again, at a new lanes.\n\t  if (retryLane === NoLane) {\n\t    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n\t    // unnecessary entanglement?\n\t    retryLane = requestRetryLane(boundaryFiber);\n\t  } // TODO: Special case idle priority?\n\n\n\t  var eventTime = requestEventTime();\n\t  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n\n\t  if (root !== null) {\n\t    markRootUpdated(root, retryLane, eventTime);\n\t    ensureRootIsScheduled(root, eventTime);\n\t  }\n\t}\n\n\tfunction retryDehydratedSuspenseBoundary(boundaryFiber) {\n\t  var suspenseState = boundaryFiber.memoizedState;\n\t  var retryLane = NoLane;\n\n\t  if (suspenseState !== null) {\n\t    retryLane = suspenseState.retryLane;\n\t  }\n\n\t  retryTimedOutBoundary(boundaryFiber, retryLane);\n\t}\n\tfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n\t  var retryLane = NoLane; // Default\n\n\t  var retryCache;\n\n\t  switch (boundaryFiber.tag) {\n\t    case SuspenseComponent:\n\t      retryCache = boundaryFiber.stateNode;\n\t      var suspenseState = boundaryFiber.memoizedState;\n\n\t      if (suspenseState !== null) {\n\t        retryLane = suspenseState.retryLane;\n\t      }\n\n\t      break;\n\n\t    case SuspenseListComponent:\n\t      retryCache = boundaryFiber.stateNode;\n\t      break;\n\n\t    default:\n\t      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n\t  }\n\n\t  if (retryCache !== null) {\n\t    // The wakeable resolved, so we no longer need to memoize, because it will\n\t    // never be thrown again.\n\t    retryCache.delete(wakeable);\n\t  }\n\n\t  retryTimedOutBoundary(boundaryFiber, retryLane);\n\t} // Computes the next Just Noticeable Difference (JND) boundary.\n\t// The theory is that a person can't tell the difference between small differences in time.\n\t// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n\t// difference in the experience. However, waiting for longer might mean that we can avoid\n\t// showing an intermediate loading state. The longer we have already waited, the harder it\n\t// is to tell small differences in time. Therefore, the longer we've already waited,\n\t// the longer we can wait additionally. At some point we have to give up though.\n\t// We pick a train model where the next boundary commits at a consistent schedule.\n\t// These particular numbers are vague estimates. We expect to adjust them based on research.\n\n\tfunction jnd(timeElapsed) {\n\t  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n\t}\n\n\tfunction checkForNestedUpdates() {\n\t  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n\t    nestedUpdateCount = 0;\n\t    rootWithNestedUpdates = null;\n\t    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n\t  }\n\n\t  {\n\t    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n\t      nestedPassiveUpdateCount = 0;\n\t      rootWithPassiveNestedUpdates = null;\n\n\t      error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n\t    }\n\t  }\n\t}\n\n\tfunction flushRenderPhaseStrictModeWarningsInDEV() {\n\t  {\n\t    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n\t    {\n\t      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n\t    }\n\t  }\n\t}\n\n\tfunction commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n\t  {\n\t    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n\t    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n\t    // Maybe not a big deal since this is DEV only behavior.\n\t    setCurrentFiber(fiber);\n\t    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n\t    if (hasPassiveEffects) {\n\t      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n\t    }\n\n\t    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n\t    if (hasPassiveEffects) {\n\t      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n\t    }\n\n\t    resetCurrentFiber();\n\t  }\n\t}\n\n\tfunction invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n\t  {\n\t    // We don't need to re-check StrictEffectsMode here.\n\t    // This function is only called if that check has already passed.\n\t    var current = firstChild;\n\t    var subtreeRoot = null;\n\n\t    while (current !== null) {\n\t      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n\t      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n\t        current = current.child;\n\t      } else {\n\t        if ((current.flags & fiberFlags) !== NoFlags) {\n\t          invokeEffectFn(current);\n\t        }\n\n\t        if (current.sibling !== null) {\n\t          current = current.sibling;\n\t        } else {\n\t          current = subtreeRoot = current.return;\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar didWarnStateUpdateForNotYetMountedComponent = null;\n\tfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n\t  {\n\t    if ((executionContext & RenderContext) !== NoContext) {\n\t      // We let the other warning about render phase updates deal with this one.\n\t      return;\n\t    }\n\n\t    if (!(fiber.mode & ConcurrentMode)) {\n\t      return;\n\t    }\n\n\t    var tag = fiber.tag;\n\n\t    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n\t      // Only warn for user-defined components, not internal ones like Suspense.\n\t      return;\n\t    } // We show the whole stack but dedupe on the top component's name because\n\t    // the problematic code almost always lies inside that component.\n\n\n\t    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n\t    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n\t      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n\t        return;\n\t      }\n\n\t      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n\t    } else {\n\t      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n\t    }\n\n\t    var previousFiber = current;\n\n\t    try {\n\t      setCurrentFiber(fiber);\n\n\t      error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n\t    } finally {\n\t      if (previousFiber) {\n\t        setCurrentFiber(fiber);\n\t      } else {\n\t        resetCurrentFiber();\n\t      }\n\t    }\n\t  }\n\t}\n\tvar beginWork$1;\n\n\t{\n\t  var dummyFiber = null;\n\n\t  beginWork$1 = function (current, unitOfWork, lanes) {\n\t    // If a component throws an error, we replay it again in a synchronously\n\t    // dispatched event, so that the debugger will treat it as an uncaught\n\t    // error See ReactErrorUtils for more information.\n\t    // Before entering the begin phase, copy the work-in-progress onto a dummy\n\t    // fiber. If beginWork throws, we'll use this to reset the state.\n\t    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n\n\t    try {\n\t      return beginWork(current, unitOfWork, lanes);\n\t    } catch (originalError) {\n\t      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n\t        // Don't replay promises.\n\t        // Don't replay errors if we are hydrating and have already suspended or handled an error\n\t        throw originalError;\n\t      } // Keep this code in sync with handleError; any changes here must have\n\t      // corresponding changes there.\n\n\n\t      resetContextDependencies();\n\t      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n\t      // same fiber again.\n\t      // Unwind the failed stack frame\n\n\t      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n\t      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n\t      if ( unitOfWork.mode & ProfileMode) {\n\t        // Reset the profiler timer.\n\t        startProfilerTimer(unitOfWork);\n\t      } // Run beginWork again.\n\n\n\t      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n\n\t      if (hasCaughtError()) {\n\t        var replayError = clearCaughtError();\n\n\t        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n\t          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n\t          originalError._suppressLogging = true;\n\t        }\n\t      } // We always throw the original error in case the second render pass is not idempotent.\n\t      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n\n\t      throw originalError;\n\t    }\n\t  };\n\t}\n\n\tvar didWarnAboutUpdateInRender = false;\n\tvar didWarnAboutUpdateInRenderForAnotherComponent;\n\n\t{\n\t  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n\t}\n\n\tfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n\t  {\n\t    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n\t      switch (fiber.tag) {\n\t        case FunctionComponent:\n\t        case ForwardRef:\n\t        case SimpleMemoComponent:\n\t          {\n\t            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n\t            var dedupeKey = renderingComponentName;\n\n\t            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n\t              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n\t              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n\t              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n\t            }\n\n\t            break;\n\t          }\n\n\t        case ClassComponent:\n\t          {\n\t            if (!didWarnAboutUpdateInRender) {\n\t              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n\n\t              didWarnAboutUpdateInRender = true;\n\t            }\n\n\t            break;\n\t          }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction restorePendingUpdaters(root, lanes) {\n\t  {\n\t    if (isDevToolsPresent) {\n\t      var memoizedUpdaters = root.memoizedUpdaters;\n\t      memoizedUpdaters.forEach(function (schedulingFiber) {\n\t        addFiberToLanesMap(root, schedulingFiber, lanes);\n\t      }); // This function intentionally does not clear memoized updaters.\n\t      // Those may still be relevant to the current commit\n\t      // and a future one (e.g. Suspense).\n\t    }\n\t  }\n\t}\n\tvar fakeActCallbackNode = {};\n\n\tfunction scheduleCallback$1(priorityLevel, callback) {\n\t  {\n\t    // If we're currently inside an `act` scope, bypass Scheduler and push to\n\t    // the `act` queue instead.\n\t    var actQueue = ReactCurrentActQueue$1.current;\n\n\t    if (actQueue !== null) {\n\t      actQueue.push(callback);\n\t      return fakeActCallbackNode;\n\t    } else {\n\t      return scheduleCallback(priorityLevel, callback);\n\t    }\n\t  }\n\t}\n\n\tfunction cancelCallback$1(callbackNode) {\n\t  if ( callbackNode === fakeActCallbackNode) {\n\t    return;\n\t  } // In production, always call Scheduler. This function will be stripped out.\n\n\n\t  return cancelCallback(callbackNode);\n\t}\n\n\tfunction shouldForceFlushFallbacksInDEV() {\n\t  // Never force flush in production. This function should get stripped out.\n\t  return  ReactCurrentActQueue$1.current !== null;\n\t}\n\n\tfunction warnIfUpdatesNotWrappedWithActDEV(fiber) {\n\t  {\n\t    if (fiber.mode & ConcurrentMode) {\n\t      if (!isConcurrentActEnvironment()) {\n\t        // Not in an act environment. No need to warn.\n\t        return;\n\t      }\n\t    } else {\n\t      // Legacy mode has additional cases where we suppress a warning.\n\t      if (!isLegacyActEnvironment()) {\n\t        // Not in an act environment. No need to warn.\n\t        return;\n\t      }\n\n\t      if (executionContext !== NoContext) {\n\t        // Legacy mode doesn't warn if the update is batched, i.e.\n\t        // batchedUpdates or flushSync.\n\t        return;\n\t      }\n\n\t      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n\t        // For backwards compatibility with pre-hooks code, legacy mode only\n\t        // warns for updates that originate from a hook.\n\t        return;\n\t      }\n\t    }\n\n\t    if (ReactCurrentActQueue$1.current === null) {\n\t      var previousFiber = current;\n\n\t      try {\n\t        setCurrentFiber(fiber);\n\n\t        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n\t      } finally {\n\t        if (previousFiber) {\n\t          setCurrentFiber(fiber);\n\t        } else {\n\t          resetCurrentFiber();\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n\t  {\n\t    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n\t      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n\t    }\n\t  }\n\t}\n\n\tfunction setIsRunningInsertionEffect(isRunning) {\n\t  {\n\t    isRunningInsertionEffect = isRunning;\n\t  }\n\t}\n\n\t/* eslint-disable react-internal/prod-error-codes */\n\tvar resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\n\tvar failedBoundaries = null;\n\tvar setRefreshHandler = function (handler) {\n\t  {\n\t    resolveFamily = handler;\n\t  }\n\t};\n\tfunction resolveFunctionForHotReloading(type) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return type;\n\t    }\n\n\t    var family = resolveFamily(type);\n\n\t    if (family === undefined) {\n\t      return type;\n\t    } // Use the latest known implementation.\n\n\n\t    return family.current;\n\t  }\n\t}\n\tfunction resolveClassForHotReloading(type) {\n\t  // No implementation differences.\n\t  return resolveFunctionForHotReloading(type);\n\t}\n\tfunction resolveForwardRefForHotReloading(type) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return type;\n\t    }\n\n\t    var family = resolveFamily(type);\n\n\t    if (family === undefined) {\n\t      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n\t      if (type !== null && type !== undefined && typeof type.render === 'function') {\n\t        // ForwardRef is special because its resolved .type is an object,\n\t        // but it's possible that we only have its inner render function in the map.\n\t        // If that inner render function is different, we'll build a new forwardRef type.\n\t        var currentRender = resolveFunctionForHotReloading(type.render);\n\n\t        if (type.render !== currentRender) {\n\t          var syntheticType = {\n\t            $$typeof: REACT_FORWARD_REF_TYPE,\n\t            render: currentRender\n\t          };\n\n\t          if (type.displayName !== undefined) {\n\t            syntheticType.displayName = type.displayName;\n\t          }\n\n\t          return syntheticType;\n\t        }\n\t      }\n\n\t      return type;\n\t    } // Use the latest known implementation.\n\n\n\t    return family.current;\n\t  }\n\t}\n\tfunction isCompatibleFamilyForHotReloading(fiber, element) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return false;\n\t    }\n\n\t    var prevType = fiber.elementType;\n\t    var nextType = element.type; // If we got here, we know types aren't === equal.\n\n\t    var needsCompareFamilies = false;\n\t    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n\t    switch (fiber.tag) {\n\t      case ClassComponent:\n\t        {\n\t          if (typeof nextType === 'function') {\n\t            needsCompareFamilies = true;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case FunctionComponent:\n\t        {\n\t          if (typeof nextType === 'function') {\n\t            needsCompareFamilies = true;\n\t          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n\t            // We don't know the inner type yet.\n\t            // We're going to assume that the lazy inner type is stable,\n\t            // and so it is sufficient to avoid reconciling it away.\n\t            // We're not going to unwrap or actually use the new lazy type.\n\t            needsCompareFamilies = true;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case ForwardRef:\n\t        {\n\t          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n\t            needsCompareFamilies = true;\n\t          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n\t            needsCompareFamilies = true;\n\t          }\n\n\t          break;\n\t        }\n\n\t      case MemoComponent:\n\t      case SimpleMemoComponent:\n\t        {\n\t          if ($$typeofNextType === REACT_MEMO_TYPE) {\n\t            // TODO: if it was but can no longer be simple,\n\t            // we shouldn't set this.\n\t            needsCompareFamilies = true;\n\t          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n\t            needsCompareFamilies = true;\n\t          }\n\n\t          break;\n\t        }\n\n\t      default:\n\t        return false;\n\t    } // Check if both types have a family and it's the same one.\n\n\n\t    if (needsCompareFamilies) {\n\t      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n\t      // This means both of them need to be registered to preserve state.\n\t      // If we unwrapped and compared the inner types for wrappers instead,\n\t      // then we would risk falsely saying two separate memo(Foo)\n\t      // calls are equivalent because they wrap the same Foo function.\n\t      var prevFamily = resolveFamily(prevType);\n\n\t      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n\t        return true;\n\t      }\n\t    }\n\n\t    return false;\n\t  }\n\t}\n\tfunction markFailedErrorBoundaryForHotReloading(fiber) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return;\n\t    }\n\n\t    if (typeof WeakSet !== 'function') {\n\t      return;\n\t    }\n\n\t    if (failedBoundaries === null) {\n\t      failedBoundaries = new WeakSet();\n\t    }\n\n\t    failedBoundaries.add(fiber);\n\t  }\n\t}\n\tvar scheduleRefresh = function (root, update) {\n\t  {\n\t    if (resolveFamily === null) {\n\t      // Hot reloading is disabled.\n\t      return;\n\t    }\n\n\t    var staleFamilies = update.staleFamilies,\n\t        updatedFamilies = update.updatedFamilies;\n\t    flushPassiveEffects();\n\t    flushSync(function () {\n\t      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n\t    });\n\t  }\n\t};\n\tvar scheduleRoot = function (root, element) {\n\t  {\n\t    if (root.context !== emptyContextObject) {\n\t      // Super edge case: root has a legacy _renderSubtree context\n\t      // but we don't know the parentComponent so we can't pass it.\n\t      // Just ignore. We'll delete this with _renderSubtree code path later.\n\t      return;\n\t    }\n\n\t    flushPassiveEffects();\n\t    flushSync(function () {\n\t      updateContainer(element, root, null, null);\n\t    });\n\t  }\n\t};\n\n\tfunction scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n\t  {\n\t    var alternate = fiber.alternate,\n\t        child = fiber.child,\n\t        sibling = fiber.sibling,\n\t        tag = fiber.tag,\n\t        type = fiber.type;\n\t    var candidateType = null;\n\n\t    switch (tag) {\n\t      case FunctionComponent:\n\t      case SimpleMemoComponent:\n\t      case ClassComponent:\n\t        candidateType = type;\n\t        break;\n\n\t      case ForwardRef:\n\t        candidateType = type.render;\n\t        break;\n\t    }\n\n\t    if (resolveFamily === null) {\n\t      throw new Error('Expected resolveFamily to be set during hot reload.');\n\t    }\n\n\t    var needsRender = false;\n\t    var needsRemount = false;\n\n\t    if (candidateType !== null) {\n\t      var family = resolveFamily(candidateType);\n\n\t      if (family !== undefined) {\n\t        if (staleFamilies.has(family)) {\n\t          needsRemount = true;\n\t        } else if (updatedFamilies.has(family)) {\n\t          if (tag === ClassComponent) {\n\t            needsRemount = true;\n\t          } else {\n\t            needsRender = true;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    if (failedBoundaries !== null) {\n\t      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n\t        needsRemount = true;\n\t      }\n\t    }\n\n\t    if (needsRemount) {\n\t      fiber._debugNeedsRemount = true;\n\t    }\n\n\t    if (needsRemount || needsRender) {\n\t      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t      if (_root !== null) {\n\t        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);\n\t      }\n\t    }\n\n\t    if (child !== null && !needsRemount) {\n\t      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n\t    }\n\n\t    if (sibling !== null) {\n\t      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n\t    }\n\t  }\n\t}\n\n\tvar findHostInstancesForRefresh = function (root, families) {\n\t  {\n\t    var hostInstances = new Set();\n\t    var types = new Set(families.map(function (family) {\n\t      return family.current;\n\t    }));\n\t    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n\t    return hostInstances;\n\t  }\n\t};\n\n\tfunction findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n\t  {\n\t    var child = fiber.child,\n\t        sibling = fiber.sibling,\n\t        tag = fiber.tag,\n\t        type = fiber.type;\n\t    var candidateType = null;\n\n\t    switch (tag) {\n\t      case FunctionComponent:\n\t      case SimpleMemoComponent:\n\t      case ClassComponent:\n\t        candidateType = type;\n\t        break;\n\n\t      case ForwardRef:\n\t        candidateType = type.render;\n\t        break;\n\t    }\n\n\t    var didMatch = false;\n\n\t    if (candidateType !== null) {\n\t      if (types.has(candidateType)) {\n\t        didMatch = true;\n\t      }\n\t    }\n\n\t    if (didMatch) {\n\t      // We have a match. This only drills down to the closest host components.\n\t      // There's no need to search deeper because for the purpose of giving\n\t      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n\t      findHostInstancesForFiberShallowly(fiber, hostInstances);\n\t    } else {\n\t      // If there's no match, maybe there will be one further down in the child tree.\n\t      if (child !== null) {\n\t        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n\t      }\n\t    }\n\n\t    if (sibling !== null) {\n\t      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n\t    }\n\t  }\n\t}\n\n\tfunction findHostInstancesForFiberShallowly(fiber, hostInstances) {\n\t  {\n\t    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n\t    if (foundHostInstances) {\n\t      return;\n\t    } // If we didn't find any host children, fallback to closest host parent.\n\n\n\t    var node = fiber;\n\n\t    while (true) {\n\t      switch (node.tag) {\n\t        case HostComponent:\n\t          hostInstances.add(node.stateNode);\n\t          return;\n\n\t        case HostPortal:\n\t          hostInstances.add(node.stateNode.containerInfo);\n\t          return;\n\n\t        case HostRoot:\n\t          hostInstances.add(node.stateNode.containerInfo);\n\t          return;\n\t      }\n\n\t      if (node.return === null) {\n\t        throw new Error('Expected to reach root first.');\n\t      }\n\n\t      node = node.return;\n\t    }\n\t  }\n\t}\n\n\tfunction findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n\t  {\n\t    var node = fiber;\n\t    var foundHostInstances = false;\n\n\t    while (true) {\n\t      if (node.tag === HostComponent) {\n\t        // We got a match.\n\t        foundHostInstances = true;\n\t        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n\t      } else if (node.child !== null) {\n\t        node.child.return = node;\n\t        node = node.child;\n\t        continue;\n\t      }\n\n\t      if (node === fiber) {\n\t        return foundHostInstances;\n\t      }\n\n\t      while (node.sibling === null) {\n\t        if (node.return === null || node.return === fiber) {\n\t          return foundHostInstances;\n\t        }\n\n\t        node = node.return;\n\t      }\n\n\t      node.sibling.return = node.return;\n\t      node = node.sibling;\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\n\tvar hasBadMapPolyfill;\n\n\t{\n\t  hasBadMapPolyfill = false;\n\n\t  try {\n\t    var nonExtensibleObject = Object.preventExtensions({});\n\t    /* eslint-disable no-new */\n\n\t    new Map([[nonExtensibleObject, null]]);\n\t    new Set([nonExtensibleObject]);\n\t    /* eslint-enable no-new */\n\t  } catch (e) {\n\t    // TODO: Consider warning about bad polyfills\n\t    hasBadMapPolyfill = true;\n\t  }\n\t}\n\n\tfunction FiberNode(tag, pendingProps, key, mode) {\n\t  // Instance\n\t  this.tag = tag;\n\t  this.key = key;\n\t  this.elementType = null;\n\t  this.type = null;\n\t  this.stateNode = null; // Fiber\n\n\t  this.return = null;\n\t  this.child = null;\n\t  this.sibling = null;\n\t  this.index = 0;\n\t  this.ref = null;\n\t  this.pendingProps = pendingProps;\n\t  this.memoizedProps = null;\n\t  this.updateQueue = null;\n\t  this.memoizedState = null;\n\t  this.dependencies = null;\n\t  this.mode = mode; // Effects\n\n\t  this.flags = NoFlags;\n\t  this.subtreeFlags = NoFlags;\n\t  this.deletions = null;\n\t  this.lanes = NoLanes;\n\t  this.childLanes = NoLanes;\n\t  this.alternate = null;\n\n\t  {\n\t    // Note: The following is done to avoid a v8 performance cliff.\n\t    //\n\t    // Initializing the fields below to smis and later updating them with\n\t    // double values will cause Fibers to end up having separate shapes.\n\t    // This behavior/bug has something to do with Object.preventExtension().\n\t    // Fortunately this only impacts DEV builds.\n\t    // Unfortunately it makes React unusably slow for some applications.\n\t    // To work around this, initialize the fields below with doubles.\n\t    //\n\t    // Learn more about this here:\n\t    // https://github.com/facebook/react/issues/14365\n\t    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n\t    this.actualDuration = Number.NaN;\n\t    this.actualStartTime = Number.NaN;\n\t    this.selfBaseDuration = Number.NaN;\n\t    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n\t    // This won't trigger the performance cliff mentioned above,\n\t    // and it simplifies other profiler code (including DevTools).\n\n\t    this.actualDuration = 0;\n\t    this.actualStartTime = -1;\n\t    this.selfBaseDuration = 0;\n\t    this.treeBaseDuration = 0;\n\t  }\n\n\t  {\n\t    // This isn't directly used but is handy for debugging internals:\n\t    this._debugSource = null;\n\t    this._debugOwner = null;\n\t    this._debugNeedsRemount = false;\n\t    this._debugHookTypes = null;\n\n\t    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n\t      Object.preventExtensions(this);\n\t    }\n\t  }\n\t} // This is a constructor function, rather than a POJO constructor, still\n\t// please ensure we do the following:\n\t// 1) Nobody should add any instance methods on this. Instance methods can be\n\t//    more difficult to predict when they get optimized and they are almost\n\t//    never inlined properly in static compilers.\n\t// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n\t//    always know when it is a fiber.\n\t// 3) We might want to experiment with using numeric keys since they are easier\n\t//    to optimize in a non-JIT environment.\n\t// 4) We can easily go from a constructor to a createFiber object literal if that\n\t//    is faster.\n\t// 5) It should be easy to port this to a C struct and keep a C implementation\n\t//    compatible.\n\n\n\tvar createFiber = function (tag, pendingProps, key, mode) {\n\t  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n\t  return new FiberNode(tag, pendingProps, key, mode);\n\t};\n\n\tfunction shouldConstruct$1(Component) {\n\t  var prototype = Component.prototype;\n\t  return !!(prototype && prototype.isReactComponent);\n\t}\n\n\tfunction isSimpleFunctionComponent(type) {\n\t  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n\t}\n\tfunction resolveLazyComponentTag(Component) {\n\t  if (typeof Component === 'function') {\n\t    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n\t  } else if (Component !== undefined && Component !== null) {\n\t    var $$typeof = Component.$$typeof;\n\n\t    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n\t      return ForwardRef;\n\t    }\n\n\t    if ($$typeof === REACT_MEMO_TYPE) {\n\t      return MemoComponent;\n\t    }\n\t  }\n\n\t  return IndeterminateComponent;\n\t} // This is used to create an alternate fiber to do work on.\n\n\tfunction createWorkInProgress(current, pendingProps) {\n\t  var workInProgress = current.alternate;\n\n\t  if (workInProgress === null) {\n\t    // We use a double buffering pooling technique because we know that we'll\n\t    // only ever need at most two versions of a tree. We pool the \"other\" unused\n\t    // node that we're free to reuse. This is lazily created to avoid allocating\n\t    // extra objects for things that are never updated. It also allow us to\n\t    // reclaim the extra memory if needed.\n\t    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n\t    workInProgress.elementType = current.elementType;\n\t    workInProgress.type = current.type;\n\t    workInProgress.stateNode = current.stateNode;\n\n\t    {\n\t      // DEV-only fields\n\t      workInProgress._debugSource = current._debugSource;\n\t      workInProgress._debugOwner = current._debugOwner;\n\t      workInProgress._debugHookTypes = current._debugHookTypes;\n\t    }\n\n\t    workInProgress.alternate = current;\n\t    current.alternate = workInProgress;\n\t  } else {\n\t    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n\t    workInProgress.type = current.type; // We already have an alternate.\n\t    // Reset the effect tag.\n\n\t    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n\t    workInProgress.subtreeFlags = NoFlags;\n\t    workInProgress.deletions = null;\n\n\t    {\n\t      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n\t      // This prevents time from endlessly accumulating in new commits.\n\t      // This has the downside of resetting values for different priority renders,\n\t      // But works for yielding (the common case) and should support resuming.\n\t      workInProgress.actualDuration = 0;\n\t      workInProgress.actualStartTime = -1;\n\t    }\n\t  } // Reset all effects except static ones.\n\t  // Static effects are not specific to a render.\n\n\n\t  workInProgress.flags = current.flags & StaticMask;\n\t  workInProgress.childLanes = current.childLanes;\n\t  workInProgress.lanes = current.lanes;\n\t  workInProgress.child = current.child;\n\t  workInProgress.memoizedProps = current.memoizedProps;\n\t  workInProgress.memoizedState = current.memoizedState;\n\t  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n\t  // it cannot be shared with the current fiber.\n\n\t  var currentDependencies = current.dependencies;\n\t  workInProgress.dependencies = currentDependencies === null ? null : {\n\t    lanes: currentDependencies.lanes,\n\t    firstContext: currentDependencies.firstContext\n\t  }; // These will be overridden during the parent's reconciliation\n\n\t  workInProgress.sibling = current.sibling;\n\t  workInProgress.index = current.index;\n\t  workInProgress.ref = current.ref;\n\n\t  {\n\t    workInProgress.selfBaseDuration = current.selfBaseDuration;\n\t    workInProgress.treeBaseDuration = current.treeBaseDuration;\n\t  }\n\n\t  {\n\t    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n\t    switch (workInProgress.tag) {\n\t      case IndeterminateComponent:\n\t      case FunctionComponent:\n\t      case SimpleMemoComponent:\n\t        workInProgress.type = resolveFunctionForHotReloading(current.type);\n\t        break;\n\n\t      case ClassComponent:\n\t        workInProgress.type = resolveClassForHotReloading(current.type);\n\t        break;\n\n\t      case ForwardRef:\n\t        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n\t        break;\n\t    }\n\t  }\n\n\t  return workInProgress;\n\t} // Used to reuse a Fiber for a second pass.\n\n\tfunction resetWorkInProgress(workInProgress, renderLanes) {\n\t  // This resets the Fiber to what createFiber or createWorkInProgress would\n\t  // have set the values to before during the first pass. Ideally this wouldn't\n\t  // be necessary but unfortunately many code paths reads from the workInProgress\n\t  // when they should be reading from current and writing to workInProgress.\n\t  // We assume pendingProps, index, key, ref, return are still untouched to\n\t  // avoid doing another reconciliation.\n\t  // Reset the effect flags but keep any Placement tags, since that's something\n\t  // that child fiber is setting, not the reconciliation.\n\t  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n\t  var current = workInProgress.alternate;\n\n\t  if (current === null) {\n\t    // Reset to createFiber's initial values.\n\t    workInProgress.childLanes = NoLanes;\n\t    workInProgress.lanes = renderLanes;\n\t    workInProgress.child = null;\n\t    workInProgress.subtreeFlags = NoFlags;\n\t    workInProgress.memoizedProps = null;\n\t    workInProgress.memoizedState = null;\n\t    workInProgress.updateQueue = null;\n\t    workInProgress.dependencies = null;\n\t    workInProgress.stateNode = null;\n\n\t    {\n\t      // Note: We don't reset the actualTime counts. It's useful to accumulate\n\t      // actual time across multiple render passes.\n\t      workInProgress.selfBaseDuration = 0;\n\t      workInProgress.treeBaseDuration = 0;\n\t    }\n\t  } else {\n\t    // Reset to the cloned values that createWorkInProgress would've.\n\t    workInProgress.childLanes = current.childLanes;\n\t    workInProgress.lanes = current.lanes;\n\t    workInProgress.child = current.child;\n\t    workInProgress.subtreeFlags = NoFlags;\n\t    workInProgress.deletions = null;\n\t    workInProgress.memoizedProps = current.memoizedProps;\n\t    workInProgress.memoizedState = current.memoizedState;\n\t    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n\t    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n\t    // it cannot be shared with the current fiber.\n\n\t    var currentDependencies = current.dependencies;\n\t    workInProgress.dependencies = currentDependencies === null ? null : {\n\t      lanes: currentDependencies.lanes,\n\t      firstContext: currentDependencies.firstContext\n\t    };\n\n\t    {\n\t      // Note: We don't reset the actualTime counts. It's useful to accumulate\n\t      // actual time across multiple render passes.\n\t      workInProgress.selfBaseDuration = current.selfBaseDuration;\n\t      workInProgress.treeBaseDuration = current.treeBaseDuration;\n\t    }\n\t  }\n\n\t  return workInProgress;\n\t}\n\tfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n\t  var mode;\n\n\t  if (tag === ConcurrentRoot) {\n\t    mode = ConcurrentMode;\n\n\t    if (isStrictMode === true) {\n\t      mode |= StrictLegacyMode;\n\n\t      {\n\t        mode |= StrictEffectsMode;\n\t      }\n\t    }\n\t  } else {\n\t    mode = NoMode;\n\t  }\n\n\t  if ( isDevToolsPresent) {\n\t    // Always collect profile timings when DevTools are present.\n\t    // This enables DevTools to start capturing timing at any point–\n\t    // Without some nodes in the tree having empty base times.\n\t    mode |= ProfileMode;\n\t  }\n\n\t  return createFiber(HostRoot, null, null, mode);\n\t}\n\tfunction createFiberFromTypeAndProps(type, // React$ElementType\n\tkey, pendingProps, owner, mode, lanes) {\n\t  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n\t  var resolvedType = type;\n\n\t  if (typeof type === 'function') {\n\t    if (shouldConstruct$1(type)) {\n\t      fiberTag = ClassComponent;\n\n\t      {\n\t        resolvedType = resolveClassForHotReloading(resolvedType);\n\t      }\n\t    } else {\n\t      {\n\t        resolvedType = resolveFunctionForHotReloading(resolvedType);\n\t      }\n\t    }\n\t  } else if (typeof type === 'string') {\n\t    fiberTag = HostComponent;\n\t  } else {\n\t    getTag: switch (type) {\n\t      case REACT_FRAGMENT_TYPE:\n\t        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n\t      case REACT_STRICT_MODE_TYPE:\n\t        fiberTag = Mode;\n\t        mode |= StrictLegacyMode;\n\n\t        if ( (mode & ConcurrentMode) !== NoMode) {\n\t          // Strict effects should never run on legacy roots\n\t          mode |= StrictEffectsMode;\n\t        }\n\n\t        break;\n\n\t      case REACT_PROFILER_TYPE:\n\t        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n\t      case REACT_SUSPENSE_TYPE:\n\t        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n\t      case REACT_SUSPENSE_LIST_TYPE:\n\t        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n\t      case REACT_OFFSCREEN_TYPE:\n\t        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n\t      case REACT_LEGACY_HIDDEN_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      case REACT_SCOPE_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      case REACT_CACHE_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      case REACT_TRACING_MARKER_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      case REACT_DEBUG_TRACING_MODE_TYPE:\n\n\t      // eslint-disable-next-line no-fallthrough\n\n\t      default:\n\t        {\n\t          if (typeof type === 'object' && type !== null) {\n\t            switch (type.$$typeof) {\n\t              case REACT_PROVIDER_TYPE:\n\t                fiberTag = ContextProvider;\n\t                break getTag;\n\n\t              case REACT_CONTEXT_TYPE:\n\t                // This is a consumer\n\t                fiberTag = ContextConsumer;\n\t                break getTag;\n\n\t              case REACT_FORWARD_REF_TYPE:\n\t                fiberTag = ForwardRef;\n\n\t                {\n\t                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n\t                }\n\n\t                break getTag;\n\n\t              case REACT_MEMO_TYPE:\n\t                fiberTag = MemoComponent;\n\t                break getTag;\n\n\t              case REACT_LAZY_TYPE:\n\t                fiberTag = LazyComponent;\n\t                resolvedType = null;\n\t                break getTag;\n\t            }\n\t          }\n\n\t          var info = '';\n\n\t          {\n\t            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n\t              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n\t            }\n\n\t            var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n\t            if (ownerName) {\n\t              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n\t            }\n\t          }\n\n\t          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n\t        }\n\t    }\n\t  }\n\n\t  var fiber = createFiber(fiberTag, pendingProps, key, mode);\n\t  fiber.elementType = type;\n\t  fiber.type = resolvedType;\n\t  fiber.lanes = lanes;\n\n\t  {\n\t    fiber._debugOwner = owner;\n\t  }\n\n\t  return fiber;\n\t}\n\tfunction createFiberFromElement(element, mode, lanes) {\n\t  var owner = null;\n\n\t  {\n\t    owner = element._owner;\n\t  }\n\n\t  var type = element.type;\n\t  var key = element.key;\n\t  var pendingProps = element.props;\n\t  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n\t  {\n\t    fiber._debugSource = element._source;\n\t    fiber._debugOwner = element._owner;\n\t  }\n\n\t  return fiber;\n\t}\n\tfunction createFiberFromFragment(elements, mode, lanes, key) {\n\t  var fiber = createFiber(Fragment, elements, key, mode);\n\t  fiber.lanes = lanes;\n\t  return fiber;\n\t}\n\n\tfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n\t  {\n\t    if (typeof pendingProps.id !== 'string') {\n\t      error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n\t    }\n\t  }\n\n\t  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n\t  fiber.elementType = REACT_PROFILER_TYPE;\n\t  fiber.lanes = lanes;\n\n\t  {\n\t    fiber.stateNode = {\n\t      effectDuration: 0,\n\t      passiveEffectDuration: 0\n\t    };\n\t  }\n\n\t  return fiber;\n\t}\n\n\tfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n\t  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n\t  fiber.elementType = REACT_SUSPENSE_TYPE;\n\t  fiber.lanes = lanes;\n\t  return fiber;\n\t}\n\tfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n\t  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n\t  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n\t  fiber.lanes = lanes;\n\t  return fiber;\n\t}\n\tfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n\t  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n\t  fiber.elementType = REACT_OFFSCREEN_TYPE;\n\t  fiber.lanes = lanes;\n\t  var primaryChildInstance = {\n\t    isHidden: false\n\t  };\n\t  fiber.stateNode = primaryChildInstance;\n\t  return fiber;\n\t}\n\tfunction createFiberFromText(content, mode, lanes) {\n\t  var fiber = createFiber(HostText, content, null, mode);\n\t  fiber.lanes = lanes;\n\t  return fiber;\n\t}\n\tfunction createFiberFromHostInstanceForDeletion() {\n\t  var fiber = createFiber(HostComponent, null, null, NoMode);\n\t  fiber.elementType = 'DELETED';\n\t  return fiber;\n\t}\n\tfunction createFiberFromDehydratedFragment(dehydratedNode) {\n\t  var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n\t  fiber.stateNode = dehydratedNode;\n\t  return fiber;\n\t}\n\tfunction createFiberFromPortal(portal, mode, lanes) {\n\t  var pendingProps = portal.children !== null ? portal.children : [];\n\t  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n\t  fiber.lanes = lanes;\n\t  fiber.stateNode = {\n\t    containerInfo: portal.containerInfo,\n\t    pendingChildren: null,\n\t    // Used by persistent updates\n\t    implementation: portal.implementation\n\t  };\n\t  return fiber;\n\t} // Used for stashing WIP properties to replay failed work in DEV.\n\n\tfunction assignFiberPropertiesInDEV(target, source) {\n\t  if (target === null) {\n\t    // This Fiber's initial properties will always be overwritten.\n\t    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n\t    target = createFiber(IndeterminateComponent, null, null, NoMode);\n\t  } // This is intentionally written as a list of all properties.\n\t  // We tried to use Object.assign() instead but this is called in\n\t  // the hottest path, and Object.assign() was too slow:\n\t  // https://github.com/facebook/react/issues/12502\n\t  // This code is DEV-only so size is not a concern.\n\n\n\t  target.tag = source.tag;\n\t  target.key = source.key;\n\t  target.elementType = source.elementType;\n\t  target.type = source.type;\n\t  target.stateNode = source.stateNode;\n\t  target.return = source.return;\n\t  target.child = source.child;\n\t  target.sibling = source.sibling;\n\t  target.index = source.index;\n\t  target.ref = source.ref;\n\t  target.pendingProps = source.pendingProps;\n\t  target.memoizedProps = source.memoizedProps;\n\t  target.updateQueue = source.updateQueue;\n\t  target.memoizedState = source.memoizedState;\n\t  target.dependencies = source.dependencies;\n\t  target.mode = source.mode;\n\t  target.flags = source.flags;\n\t  target.subtreeFlags = source.subtreeFlags;\n\t  target.deletions = source.deletions;\n\t  target.lanes = source.lanes;\n\t  target.childLanes = source.childLanes;\n\t  target.alternate = source.alternate;\n\n\t  {\n\t    target.actualDuration = source.actualDuration;\n\t    target.actualStartTime = source.actualStartTime;\n\t    target.selfBaseDuration = source.selfBaseDuration;\n\t    target.treeBaseDuration = source.treeBaseDuration;\n\t  }\n\n\t  target._debugSource = source._debugSource;\n\t  target._debugOwner = source._debugOwner;\n\t  target._debugNeedsRemount = source._debugNeedsRemount;\n\t  target._debugHookTypes = source._debugHookTypes;\n\t  return target;\n\t}\n\n\tfunction FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n\t  this.tag = tag;\n\t  this.containerInfo = containerInfo;\n\t  this.pendingChildren = null;\n\t  this.current = null;\n\t  this.pingCache = null;\n\t  this.finishedWork = null;\n\t  this.timeoutHandle = noTimeout;\n\t  this.context = null;\n\t  this.pendingContext = null;\n\t  this.callbackNode = null;\n\t  this.callbackPriority = NoLane;\n\t  this.eventTimes = createLaneMap(NoLanes);\n\t  this.expirationTimes = createLaneMap(NoTimestamp);\n\t  this.pendingLanes = NoLanes;\n\t  this.suspendedLanes = NoLanes;\n\t  this.pingedLanes = NoLanes;\n\t  this.expiredLanes = NoLanes;\n\t  this.mutableReadLanes = NoLanes;\n\t  this.finishedLanes = NoLanes;\n\t  this.entangledLanes = NoLanes;\n\t  this.entanglements = createLaneMap(NoLanes);\n\t  this.identifierPrefix = identifierPrefix;\n\t  this.onRecoverableError = onRecoverableError;\n\n\t  if (supportsHydration) {\n\t    this.mutableSourceEagerHydrationData = null;\n\t  }\n\n\t  {\n\t    this.effectDuration = 0;\n\t    this.passiveEffectDuration = 0;\n\t  }\n\n\t  {\n\t    this.memoizedUpdaters = new Set();\n\t    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n\n\t    for (var _i = 0; _i < TotalLanes; _i++) {\n\t      pendingUpdatersLaneMap.push(new Set());\n\t    }\n\t  }\n\n\t  {\n\t    switch (tag) {\n\t      case ConcurrentRoot:\n\t        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n\t        break;\n\n\t      case LegacyRoot:\n\t        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n\t        break;\n\t    }\n\t  }\n\t}\n\n\tfunction createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n\t// host config, but because they are passed in at runtime, we have to thread\n\t// them through the root constructor. Perhaps we should put them all into a\n\t// single type, like a DynamicHostConfig that is defined by the renderer.\n\tidentifierPrefix, onRecoverableError, transitionCallbacks) {\n\t  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n\t  // stateNode is any.\n\n\n\t  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n\t  root.current = uninitializedFiber;\n\t  uninitializedFiber.stateNode = root;\n\n\t  {\n\t    var _initialState = {\n\t      element: initialChildren,\n\t      isDehydrated: hydrate,\n\t      cache: null,\n\t      // not enabled yet\n\t      transitions: null,\n\t      pendingSuspenseBoundaries: null\n\t    };\n\t    uninitializedFiber.memoizedState = _initialState;\n\t  }\n\n\t  initializeUpdateQueue(uninitializedFiber);\n\t  return root;\n\t}\n\n\tvar ReactVersion = '18.2.0';\n\n\tfunction createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\n\timplementation) {\n\t  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n\t  {\n\t    checkKeyStringCoercion(key);\n\t  }\n\n\t  return {\n\t    // This tag allow us to uniquely identify this as a React Portal\n\t    $$typeof: REACT_PORTAL_TYPE,\n\t    key: key == null ? null : '' + key,\n\t    children: children,\n\t    containerInfo: containerInfo,\n\t    implementation: implementation\n\t  };\n\t}\n\n\tvar didWarnAboutNestedUpdates;\n\tvar didWarnAboutFindNodeInStrictMode;\n\n\t{\n\t  didWarnAboutNestedUpdates = false;\n\t  didWarnAboutFindNodeInStrictMode = {};\n\t}\n\n\tfunction getContextForSubtree(parentComponent) {\n\t  if (!parentComponent) {\n\t    return emptyContextObject;\n\t  }\n\n\t  var fiber = get(parentComponent);\n\t  var parentContext = findCurrentUnmaskedContext(fiber);\n\n\t  if (fiber.tag === ClassComponent) {\n\t    var Component = fiber.type;\n\n\t    if (isContextProvider(Component)) {\n\t      return processChildContext(fiber, Component, parentContext);\n\t    }\n\t  }\n\n\t  return parentContext;\n\t}\n\n\tfunction findHostInstance(component) {\n\t  var fiber = get(component);\n\n\t  if (fiber === undefined) {\n\t    if (typeof component.render === 'function') {\n\t      throw new Error('Unable to find node on an unmounted component.');\n\t    } else {\n\t      var keys = Object.keys(component).join(',');\n\t      throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n\t    }\n\t  }\n\n\t  var hostFiber = findCurrentHostFiber(fiber);\n\n\t  if (hostFiber === null) {\n\t    return null;\n\t  }\n\n\t  return hostFiber.stateNode;\n\t}\n\n\tfunction findHostInstanceWithWarning(component, methodName) {\n\t  {\n\t    var fiber = get(component);\n\n\t    if (fiber === undefined) {\n\t      if (typeof component.render === 'function') {\n\t        throw new Error('Unable to find node on an unmounted component.');\n\t      } else {\n\t        var keys = Object.keys(component).join(',');\n\t        throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n\t      }\n\t    }\n\n\t    var hostFiber = findCurrentHostFiber(fiber);\n\n\t    if (hostFiber === null) {\n\t      return null;\n\t    }\n\n\t    if (hostFiber.mode & StrictLegacyMode) {\n\t      var componentName = getComponentNameFromFiber(fiber) || 'Component';\n\n\t      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n\t        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\t        var previousFiber = current;\n\n\t        try {\n\t          setCurrentFiber(hostFiber);\n\n\t          if (fiber.mode & StrictLegacyMode) {\n\t            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n\t          } else {\n\t            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n\t          }\n\t        } finally {\n\t          // Ideally this should reset to previous but this shouldn't be called in\n\t          // render and there's another warning for that anyway.\n\t          if (previousFiber) {\n\t            setCurrentFiber(previousFiber);\n\t          } else {\n\t            resetCurrentFiber();\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    return hostFiber.stateNode;\n\t  }\n\t}\n\n\tfunction createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n\t  var hydrate = false;\n\t  var initialChildren = null;\n\t  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n\t}\n\tfunction createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\n\tcallback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n\t  var hydrate = true;\n\t  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n\t  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n\t  // a regular update because the initial render must match was was rendered\n\t  // on the server.\n\t  // NOTE: This update intentionally doesn't have a payload. We're only using\n\t  // the update to schedule work on the root fiber (and, for legacy roots, to\n\t  // enqueue the callback if one is provided).\n\n\t  var current = root.current;\n\t  var eventTime = requestEventTime();\n\t  var lane = requestUpdateLane(current);\n\t  var update = createUpdate(eventTime, lane);\n\t  update.callback = callback !== undefined && callback !== null ? callback : null;\n\t  enqueueUpdate(current, update, lane);\n\t  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n\t  return root;\n\t}\n\tfunction updateContainer(element, container, parentComponent, callback) {\n\t  {\n\t    onScheduleRoot(container, element);\n\t  }\n\n\t  var current$1 = container.current;\n\t  var eventTime = requestEventTime();\n\t  var lane = requestUpdateLane(current$1);\n\n\t  {\n\t    markRenderScheduled(lane);\n\t  }\n\n\t  var context = getContextForSubtree(parentComponent);\n\n\t  if (container.context === null) {\n\t    container.context = context;\n\t  } else {\n\t    container.pendingContext = context;\n\t  }\n\n\t  {\n\t    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n\t      didWarnAboutNestedUpdates = true;\n\n\t      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n\t    }\n\t  }\n\n\t  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n\t  // being called \"element\".\n\n\t  update.payload = {\n\t    element: element\n\t  };\n\t  callback = callback === undefined ? null : callback;\n\n\t  if (callback !== null) {\n\t    {\n\t      if (typeof callback !== 'function') {\n\t        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n\t      }\n\t    }\n\n\t    update.callback = callback;\n\t  }\n\n\t  var root = enqueueUpdate(current$1, update, lane);\n\n\t  if (root !== null) {\n\t    scheduleUpdateOnFiber(root, current$1, lane, eventTime);\n\t    entangleTransitions(root, current$1, lane);\n\t  }\n\n\t  return lane;\n\t}\n\tfunction getPublicRootInstance(container) {\n\t  var containerFiber = container.current;\n\n\t  if (!containerFiber.child) {\n\t    return null;\n\t  }\n\n\t  switch (containerFiber.child.tag) {\n\t    case HostComponent:\n\t      return getPublicInstance(containerFiber.child.stateNode);\n\n\t    default:\n\t      return containerFiber.child.stateNode;\n\t  }\n\t}\n\tfunction attemptSynchronousHydration(fiber) {\n\t  switch (fiber.tag) {\n\t    case HostRoot:\n\t      {\n\t        var root = fiber.stateNode;\n\n\t        if (isRootDehydrated(root)) {\n\t          // Flush the first scheduled \"update\".\n\t          var lanes = getHighestPriorityPendingLanes(root);\n\t          flushRoot(root, lanes);\n\t        }\n\n\t        break;\n\t      }\n\n\t    case SuspenseComponent:\n\t      {\n\t        flushSync(function () {\n\t          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t          if (root !== null) {\n\t            var eventTime = requestEventTime();\n\t            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n\t          }\n\t        }); // If we're still blocked after this, we need to increase\n\t        // the priority of any promises resolving within this\n\t        // boundary so that they next attempt also has higher pri.\n\n\t        var retryLane = SyncLane;\n\t        markRetryLaneIfNotHydrated(fiber, retryLane);\n\t        break;\n\t      }\n\t  }\n\t}\n\n\tfunction markRetryLaneImpl(fiber, retryLane) {\n\t  var suspenseState = fiber.memoizedState;\n\n\t  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n\t    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n\t  }\n\t} // Increases the priority of thenables when they resolve within this boundary.\n\n\n\tfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n\t  markRetryLaneImpl(fiber, retryLane);\n\t  var alternate = fiber.alternate;\n\n\t  if (alternate) {\n\t    markRetryLaneImpl(alternate, retryLane);\n\t  }\n\t}\n\n\tfunction attemptDiscreteHydration(fiber) {\n\t  if (fiber.tag !== SuspenseComponent) {\n\t    // We ignore HostRoots here because we can't increase\n\t    // their priority and they should not suspend on I/O,\n\t    // since you have to wrap anything that might suspend in\n\t    // Suspense.\n\t    return;\n\t  }\n\n\t  var lane = SyncLane;\n\t  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n\t  if (root !== null) {\n\t    var eventTime = requestEventTime();\n\t    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t  }\n\n\t  markRetryLaneIfNotHydrated(fiber, lane);\n\t}\n\tfunction attemptContinuousHydration(fiber) {\n\t  if (fiber.tag !== SuspenseComponent) {\n\t    // We ignore HostRoots here because we can't increase\n\t    // their priority and they should not suspend on I/O,\n\t    // since you have to wrap anything that might suspend in\n\t    // Suspense.\n\t    return;\n\t  }\n\n\t  var lane = SelectiveHydrationLane;\n\t  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n\t  if (root !== null) {\n\t    var eventTime = requestEventTime();\n\t    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t  }\n\n\t  markRetryLaneIfNotHydrated(fiber, lane);\n\t}\n\tfunction attemptHydrationAtCurrentPriority(fiber) {\n\t  if (fiber.tag !== SuspenseComponent) {\n\t    // We ignore HostRoots here because we can't increase\n\t    // their priority other than synchronously flush it.\n\t    return;\n\t  }\n\n\t  var lane = requestUpdateLane(fiber);\n\t  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n\t  if (root !== null) {\n\t    var eventTime = requestEventTime();\n\t    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n\t  }\n\n\t  markRetryLaneIfNotHydrated(fiber, lane);\n\t}\n\tfunction findHostInstanceWithNoPortals(fiber) {\n\t  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n\t  if (hostFiber === null) {\n\t    return null;\n\t  }\n\n\t  return hostFiber.stateNode;\n\t}\n\n\tvar shouldErrorImpl = function (fiber) {\n\t  return null;\n\t};\n\n\tfunction shouldError(fiber) {\n\t  return shouldErrorImpl(fiber);\n\t}\n\n\tvar shouldSuspendImpl = function (fiber) {\n\t  return false;\n\t};\n\n\tfunction shouldSuspend(fiber) {\n\t  return shouldSuspendImpl(fiber);\n\t}\n\tvar overrideHookState = null;\n\tvar overrideHookStateDeletePath = null;\n\tvar overrideHookStateRenamePath = null;\n\tvar overrideProps = null;\n\tvar overridePropsDeletePath = null;\n\tvar overridePropsRenamePath = null;\n\tvar scheduleUpdate = null;\n\tvar setErrorHandler = null;\n\tvar setSuspenseHandler = null;\n\n\t{\n\t  var copyWithDeleteImpl = function (obj, path, index) {\n\t    var key = path[index];\n\t    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n\t    if (index + 1 === path.length) {\n\t      if (isArray(updated)) {\n\t        updated.splice(key, 1);\n\t      } else {\n\t        delete updated[key];\n\t      }\n\n\t      return updated;\n\t    } // $FlowFixMe number or string is fine here\n\n\n\t    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n\t    return updated;\n\t  };\n\n\t  var copyWithDelete = function (obj, path) {\n\t    return copyWithDeleteImpl(obj, path, 0);\n\t  };\n\n\t  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n\t    var oldKey = oldPath[index];\n\t    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n\t    if (index + 1 === oldPath.length) {\n\t      var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n\t      updated[newKey] = updated[oldKey];\n\n\t      if (isArray(updated)) {\n\t        updated.splice(oldKey, 1);\n\t      } else {\n\t        delete updated[oldKey];\n\t      }\n\t    } else {\n\t      // $FlowFixMe number or string is fine here\n\t      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n\t      obj[oldKey], oldPath, newPath, index + 1);\n\t    }\n\n\t    return updated;\n\t  };\n\n\t  var copyWithRename = function (obj, oldPath, newPath) {\n\t    if (oldPath.length !== newPath.length) {\n\t      warn('copyWithRename() expects paths of the same length');\n\n\t      return;\n\t    } else {\n\t      for (var i = 0; i < newPath.length - 1; i++) {\n\t        if (oldPath[i] !== newPath[i]) {\n\t          warn('copyWithRename() expects paths to be the same except for the deepest key');\n\n\t          return;\n\t        }\n\t      }\n\t    }\n\n\t    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n\t  };\n\n\t  var copyWithSetImpl = function (obj, path, index, value) {\n\t    if (index >= path.length) {\n\t      return value;\n\t    }\n\n\t    var key = path[index];\n\t    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n\t    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n\t    return updated;\n\t  };\n\n\t  var copyWithSet = function (obj, path, value) {\n\t    return copyWithSetImpl(obj, path, 0, value);\n\t  };\n\n\t  var findHook = function (fiber, id) {\n\t    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n\t    // This may change in the future with e.g. nested hooks.\n\t    var currentHook = fiber.memoizedState;\n\n\t    while (currentHook !== null && id > 0) {\n\t      currentHook = currentHook.next;\n\t      id--;\n\t    }\n\n\t    return currentHook;\n\t  }; // Support DevTools editable values for useState and useReducer.\n\n\n\t  overrideHookState = function (fiber, id, path, value) {\n\t    var hook = findHook(fiber, id);\n\n\t    if (hook !== null) {\n\t      var newState = copyWithSet(hook.memoizedState, path, value);\n\t      hook.memoizedState = newState;\n\t      hook.baseState = newState; // We aren't actually adding an update to the queue,\n\t      // because there is no update we can add for useReducer hooks that won't trigger an error.\n\t      // (There's no appropriate action type for DevTools overrides.)\n\t      // As a result though, React will see the scheduled update as a noop and bailout.\n\t      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n\t      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n\t      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t      if (root !== null) {\n\t        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t      }\n\t    }\n\t  };\n\n\t  overrideHookStateDeletePath = function (fiber, id, path) {\n\t    var hook = findHook(fiber, id);\n\n\t    if (hook !== null) {\n\t      var newState = copyWithDelete(hook.memoizedState, path);\n\t      hook.memoizedState = newState;\n\t      hook.baseState = newState; // We aren't actually adding an update to the queue,\n\t      // because there is no update we can add for useReducer hooks that won't trigger an error.\n\t      // (There's no appropriate action type for DevTools overrides.)\n\t      // As a result though, React will see the scheduled update as a noop and bailout.\n\t      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n\t      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n\t      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t      if (root !== null) {\n\t        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t      }\n\t    }\n\t  };\n\n\t  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n\t    var hook = findHook(fiber, id);\n\n\t    if (hook !== null) {\n\t      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n\t      hook.memoizedState = newState;\n\t      hook.baseState = newState; // We aren't actually adding an update to the queue,\n\t      // because there is no update we can add for useReducer hooks that won't trigger an error.\n\t      // (There's no appropriate action type for DevTools overrides.)\n\t      // As a result though, React will see the scheduled update as a noop and bailout.\n\t      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n\t      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n\t      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t      if (root !== null) {\n\t        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t      }\n\t    }\n\t  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n\t  overrideProps = function (fiber, path, value) {\n\t    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n\t    if (fiber.alternate) {\n\t      fiber.alternate.pendingProps = fiber.pendingProps;\n\t    }\n\n\t    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t    }\n\t  };\n\n\t  overridePropsDeletePath = function (fiber, path) {\n\t    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n\t    if (fiber.alternate) {\n\t      fiber.alternate.pendingProps = fiber.pendingProps;\n\t    }\n\n\t    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t    }\n\t  };\n\n\t  overridePropsRenamePath = function (fiber, oldPath, newPath) {\n\t    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n\t    if (fiber.alternate) {\n\t      fiber.alternate.pendingProps = fiber.pendingProps;\n\t    }\n\n\t    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t    }\n\t  };\n\n\t  scheduleUpdate = function (fiber) {\n\t    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n\t    if (root !== null) {\n\t      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n\t    }\n\t  };\n\n\t  setErrorHandler = function (newShouldErrorImpl) {\n\t    shouldErrorImpl = newShouldErrorImpl;\n\t  };\n\n\t  setSuspenseHandler = function (newShouldSuspendImpl) {\n\t    shouldSuspendImpl = newShouldSuspendImpl;\n\t  };\n\t}\n\n\tfunction findHostInstanceByFiber(fiber) {\n\t  var hostFiber = findCurrentHostFiber(fiber);\n\n\t  if (hostFiber === null) {\n\t    return null;\n\t  }\n\n\t  return hostFiber.stateNode;\n\t}\n\n\tfunction emptyFindFiberByHostInstance(instance) {\n\t  return null;\n\t}\n\n\tfunction getCurrentFiberForDevTools() {\n\t  return current;\n\t}\n\n\tfunction injectIntoDevTools(devToolsConfig) {\n\t  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n\t  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n\t  return injectInternals({\n\t    bundleType: devToolsConfig.bundleType,\n\t    version: devToolsConfig.version,\n\t    rendererPackageName: devToolsConfig.rendererPackageName,\n\t    rendererConfig: devToolsConfig.rendererConfig,\n\t    overrideHookState: overrideHookState,\n\t    overrideHookStateDeletePath: overrideHookStateDeletePath,\n\t    overrideHookStateRenamePath: overrideHookStateRenamePath,\n\t    overrideProps: overrideProps,\n\t    overridePropsDeletePath: overridePropsDeletePath,\n\t    overridePropsRenamePath: overridePropsRenamePath,\n\t    setErrorHandler: setErrorHandler,\n\t    setSuspenseHandler: setSuspenseHandler,\n\t    scheduleUpdate: scheduleUpdate,\n\t    currentDispatcherRef: ReactCurrentDispatcher,\n\t    findHostInstanceByFiber: findHostInstanceByFiber,\n\t    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n\t    // React Refresh\n\t    findHostInstancesForRefresh:  findHostInstancesForRefresh ,\n\t    scheduleRefresh:  scheduleRefresh ,\n\t    scheduleRoot:  scheduleRoot ,\n\t    setRefreshHandler:  setRefreshHandler ,\n\t    // Enables DevTools to append owner stacks to error messages in DEV mode.\n\t    getCurrentFiber:  getCurrentFiberForDevTools ,\n\t    // Enables DevTools to detect reconciler version rather than renderer version\n\t    // which may not match for third party renderers.\n\t    reconcilerVersion: ReactVersion\n\t  });\n\t}\n\n\texports.attemptContinuousHydration = attemptContinuousHydration;\n\texports.attemptDiscreteHydration = attemptDiscreteHydration;\n\texports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\n\texports.attemptSynchronousHydration = attemptSynchronousHydration;\n\texports.batchedUpdates = batchedUpdates;\n\texports.createComponentSelector = createComponentSelector;\n\texports.createContainer = createContainer;\n\texports.createHasPseudoClassSelector = createHasPseudoClassSelector;\n\texports.createHydrationContainer = createHydrationContainer;\n\texports.createPortal = createPortal;\n\texports.createRoleSelector = createRoleSelector;\n\texports.createTestNameSelector = createTestNameSelector;\n\texports.createTextSelector = createTextSelector;\n\texports.deferredUpdates = deferredUpdates;\n\texports.discreteUpdates = discreteUpdates;\n\texports.findAllNodes = findAllNodes;\n\texports.findBoundingRects = findBoundingRects;\n\texports.findHostInstance = findHostInstance;\n\texports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\n\texports.findHostInstanceWithWarning = findHostInstanceWithWarning;\n\texports.flushControlled = flushControlled;\n\texports.flushPassiveEffects = flushPassiveEffects;\n\texports.flushSync = flushSync;\n\texports.focusWithin = focusWithin;\n\texports.getCurrentUpdatePriority = getCurrentUpdatePriority;\n\texports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\n\texports.getPublicRootInstance = getPublicRootInstance;\n\texports.injectIntoDevTools = injectIntoDevTools;\n\texports.isAlreadyRendering = isAlreadyRendering;\n\texports.observeVisibleRects = observeVisibleRects;\n\texports.registerMutableSourceForHydration = registerMutableSourceForHydration;\n\texports.runWithPriority = runWithPriority;\n\texports.shouldError = shouldError;\n\texports.shouldSuspend = shouldSuspend;\n\texports.updateContainer = updateContainer;\n\t    return exports;\n\t  };\n\t}\n\treturn reactReconciler_developmentExports;\n}\n\n(function (module) {\n\n\t{\n\t  module.exports = requireReactReconciler_development();\n\t}\n} (reactReconciler));\n\nvar Reconciler = /*@__PURE__*/getDefaultExportFromCjs(reactReconcilerExports);\n\nvar name = \"root\";\nvar workspaces = [\n\t\"packages/*\"\n];\nvar scripts = {\n\tbuild: \"nx run-many --target=build --all --parallel\",\n\t\"build:force\": \"nx run-many --target=build --all --parallel --skip-nx-cache\",\n\t\"build:docs\": \"nx run @pixi/react-docs:deploy\",\n\tclean: \"rimraf packages/*/dist packages/*/build\",\n\tlint: \"eslint .\",\n\tprepare: \"husky install\",\n\tprerelease: \"./scripts/checkReleaseBranch.mjs && npm run lint && npm run test:force && npm run build:force\",\n\trelease: \"lerna publish --no-private\",\n\ttest: \"nx run-many --target=test --all --parallel\",\n\t\"test:force\": \"nx run-many --target=test --all --parallel --skip-nx-cache\",\n\t\"test:types\": \"nx run-many --target=test:types --all --parallel\",\n\t\"test:types:force\": \"nx run-many --target=test:types --all --parallel --skip-nx-cache\"\n};\nvar husky = {\n\thooks: {\n\t\t\"pre-commit\": \"lint-staged\"\n\t}\n};\nvar resolutions = {\n\t\"get-pkg-repo\": \"4.1.1\",\n\t\"hosted-git-info\": \"^2.1.4\"\n};\nvar dependencies = {\n\t\"@babel/runtime\": \"^7.14.8\",\n\t\"@pixi/app\": \"^7.1.1\",\n\t\"@pixi/constants\": \"^7.1.1\",\n\t\"@pixi/core\": \"^7.1.1\",\n\t\"@pixi/display\": \"^7.1.1\",\n\t\"@pixi/extensions\": \"^7.1.1\",\n\t\"@pixi/graphics\": \"^7.1.1\",\n\t\"@pixi/math\": \"^7.1.1\",\n\t\"@pixi/mesh\": \"^7.1.1\",\n\t\"@pixi/mesh-extras\": \"^7.1.1\",\n\t\"@pixi/particle-container\": \"^7.1.1\",\n\t\"@pixi/sprite\": \"^7.1.1\",\n\t\"@pixi/sprite-animated\": \"^7.1.1\",\n\t\"@pixi/sprite-tiling\": \"^7.1.1\",\n\t\"@pixi/text\": \"^7.1.1\",\n\t\"@pixi/text-bitmap\": \"^7.1.1\",\n\t\"@pixi/ticker\": \"^7.1.1\",\n\t\"@react-spring/animated\": \"^9.6.1\",\n\t\"@react-spring/types\": \"^9.6.1\",\n\treact: \"^18.0.0\",\n\t\"react-dom\": \"^18.0.0\",\n\t\"react-reconciler\": \"0.29.0\",\n\t\"react-spring\": \"^9.6.1\"\n};\nvar devDependencies = {\n\t\"@babel/cli\": \"^7.20.7\",\n\t\"@babel/core\": \"^7.20.7\",\n\t\"@babel/eslint-parser\": \"^7.19.1\",\n\t\"@babel/plugin-transform-runtime\": \"^7.19.6\",\n\t\"@babel/preset-env\": \"^7.20.2\",\n\t\"@babel/preset-react\": \"^7.18.6\",\n\t\"@nrwl/nx-cloud\": \"latest\",\n\t\"@pixi/eslint-config\": \"^4.0.1\",\n\t\"@rollup/plugin-alias\": \"^4.0.2\",\n\t\"@rollup/plugin-babel\": \"^6.0.3\",\n\t\"@rollup/plugin-commonjs\": \"^24.0.0\",\n\t\"@rollup/plugin-json\": \"^6.0.0\",\n\t\"@rollup/plugin-node-resolve\": \"^15.0.1\",\n\t\"@rollup/plugin-replace\": \"^5.0.2\",\n\t\"@rollup/plugin-terser\": \"^0.2.1\",\n\t\"@rollup/plugin-typescript\": \"^10.0.1\",\n\t\"@types/jest\": \"^29.2.4\",\n\t\"@types/react\": \"17.0.15\",\n\t\"@types/react-dom\": \"17.0.9\",\n\t\"@types/react-reconciler\": \"0.28.2\",\n\t\"babel-jest\": \"^29.3.1\",\n\t\"babel-plugin-module-resolver\": \"4.1.0\",\n\t\"cross-env\": \"^7.0.3\",\n\teslint: \"^8.29.0\",\n\t\"eslint-plugin-react\": \"^7.31.11\",\n\thusky: \"^8.0.2\",\n\tjest: \"^29.3.1\",\n\t\"jest-environment-jsdom\": \"^29.3.1\",\n\t\"jest-extended\": \"^3.2.0\",\n\t\"jest-watch-typeahead\": \"^2.2.1\",\n\tlerna: \"^6.0.3\",\n\t\"lint-staged\": \"^13.1.0\",\n\tnx: \"15.3.0\",\n\trimraf: \"^3.0.2\",\n\trollup: \"^3.7.0\",\n\t\"rollup-plugin-filesize\": \"^9.1.2\",\n\t\"rollup-plugin-visualizer\": \"^5.9.0\",\n\t\"ts-jest\": \"^29.0.3\",\n\t\"ts-node\": \"^10.9.1\",\n\ttypescript: \"^4.9.4\"\n};\nvar pkg = {\n\tname: name,\n\t\"private\": true,\n\tworkspaces: workspaces,\n\tscripts: scripts,\n\thusky: husky,\n\t\"lint-staged\": {\n\t\"*.{ts,js,mjs}\": [\n\t\t\"eslint --cache --fix\"\n\t]\n},\n\tresolutions: resolutions,\n\tdependencies: dependencies,\n\tdevDependencies: devDependencies\n};\n\nvar performanceNowExports = {};\nvar performanceNow = {\n  get exports(){ return performanceNowExports; },\n  set exports(v){ performanceNowExports = v; },\n};\n\n// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    performanceNow.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    performanceNow.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    performanceNow.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    performanceNow.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(commonjsGlobal);\n\nvar constantsExports = {};\nvar constants = {\n  get exports(){ return constantsExports; },\n  set exports(v){ constantsExports = v; },\n};\n\nvar reactReconcilerConstants_development = {};\n\n/**\n * @license React\n * react-reconciler-constants.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredReactReconcilerConstants_development;\n\nfunction requireReactReconcilerConstants_development () {\n\tif (hasRequiredReactReconcilerConstants_development) return reactReconcilerConstants_development;\n\thasRequiredReactReconcilerConstants_development = 1;\n\n\t{\n\t  (function() {\n\n\tvar SyncLane =\n\t/*                        */\n\t1;\n\tvar InputContinuousLane =\n\t/*             */\n\t4;\n\tvar DefaultLane =\n\t/*                     */\n\t16;\n\tvar IdleLane =\n\t/*                        */\n\t536870912;\n\n\tvar DiscreteEventPriority = SyncLane;\n\tvar ContinuousEventPriority = InputContinuousLane;\n\tvar DefaultEventPriority = DefaultLane;\n\tvar IdleEventPriority = IdleLane;\n\n\tvar LegacyRoot = 0;\n\tvar ConcurrentRoot = 1;\n\n\treactReconcilerConstants_development.ConcurrentRoot = ConcurrentRoot;\n\treactReconcilerConstants_development.ContinuousEventPriority = ContinuousEventPriority;\n\treactReconcilerConstants_development.DefaultEventPriority = DefaultEventPriority;\n\treactReconcilerConstants_development.DiscreteEventPriority = DiscreteEventPriority;\n\treactReconcilerConstants_development.IdleEventPriority = IdleEventPriority;\n\treactReconcilerConstants_development.LegacyRoot = LegacyRoot;\n\t  })();\n\t}\n\treturn reactReconcilerConstants_development;\n}\n\n(function (module) {\n\n\t{\n\t  module.exports = requireReactReconcilerConstants_development();\n\t}\n} (constants));\n\nvar NO_CONTEXT = {};\nfunction getEventPriority() {\n  var _window, _window$event;\n  if (typeof window === 'undefined') {\n    return constantsExports.DefaultEventPriority;\n  }\n  var name = (_window = window) === null || _window === void 0 ? void 0 : (_window$event = _window.event) === null || _window$event === void 0 ? void 0 : _window$event.type;\n  switch (name) {\n    case 'click':\n    case 'contextmenu':\n    case 'dblclick':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointerup':\n      return constantsExports.DiscreteEventPriority;\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerenter':\n    case 'pointerleave':\n    case 'wheel':\n      return constantsExports.ContinuousEventPriority;\n    default:\n      return constantsExports.DefaultEventPriority;\n  }\n}\nfunction _appendChild(parent, child) {\n  if (parent.addChild) {\n    parent.addChild(child);\n    if (typeof child.didMount === 'function') {\n      child.didMount(child, parent);\n    }\n  }\n}\nfunction willUnmountRecursive(child, parent) {\n  var _child$willUnmount, _child$config, _child$children;\n  (_child$willUnmount = child.willUnmount) === null || _child$willUnmount === void 0 ? void 0 : _child$willUnmount.call(child, child, parent);\n\n  // ensure willUnmount is called on children, but don't actually destroy them\n  if (((_child$config = child.config) === null || _child$config === void 0 ? void 0 : _child$config.destroyChildren) !== false && (_child$children = child.children) !== null && _child$children !== void 0 && _child$children.length) {\n    _toConsumableArray(child.children).forEach(function (c) {\n      // TODO: should we call willUnmount anyway irrespective of whether destroyChildren is true?\n      willUnmountRecursive(c, child);\n    });\n  }\n}\nfunction _removeChild(parent, child) {\n  var _child$config2;\n  // call willUnmount on child and iteratively on its descendants\n  willUnmountRecursive(child, parent);\n  parent.removeChild(child);\n  var _ref = (_child$config2 = child.config) !== null && _child$config2 !== void 0 ? _child$config2 : {},\n    _ref$destroy = _ref.destroy,\n    destroy = _ref$destroy === void 0 ? true : _ref$destroy,\n    _ref$destroyChildren = _ref.destroyChildren,\n    destroyChildren = _ref$destroyChildren === void 0 ? true : _ref$destroyChildren,\n    _ref$destroyTexture = _ref.destroyTexture,\n    destroyTexture = _ref$destroyTexture === void 0 ? false : _ref$destroyTexture,\n    _ref$destroyBaseTextu = _ref.destroyBaseTexture,\n    destroyBaseTexture = _ref$destroyBaseTextu === void 0 ? false : _ref$destroyBaseTextu;\n  if (destroy) {\n    // defer to PIXI to actually destroy children\n    child.destroy({\n      children: destroyChildren,\n      texture: destroyTexture,\n      baseTexture: destroyBaseTexture\n    });\n  }\n}\nfunction insertBefore(parent, child, beforeChild) {\n  invariant(child !== beforeChild, 'pixi-react: PixiFiber cannot insert node before itself');\n  var childExists = parent.children.indexOf(child) !== -1;\n  if (childExists) {\n    parent.removeChild(child);\n  }\n  var index = parent.getChildIndex(beforeChild);\n  parent.addChildAt(child, index);\n}\n\n// get diff between 2 objects\n// https://github.com/facebook/react/blob/97e2911/packages/react-dom/src/client/ReactDOMFiberComponent.js#L546\nfunction diffProperties(pixiElement, type, lastProps, nextProps) {\n  var updatePayload = null;\n  for (var propKey in lastProps) {\n    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] === null) {\n      continue;\n    }\n    if (propKey === CHILDREN) ; else {\n      // For all other deleted properties we add it to the queue. We use\n      // the whitelist in the commit phase instead.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n      updatePayload.push(propKey, null);\n    }\n  }\n  for (var _propKey in nextProps) {\n    var nextProp = nextProps[_propKey];\n    var lastProp = lastProps !== null ? lastProps[_propKey] : undefined;\n    if (!nextProps.hasOwnProperty(_propKey) || nextProp === lastProp || nextProp === null && lastProp === null) {\n      continue;\n    }\n    if (_propKey === CHILDREN) ; else {\n      // For any other property we always add it to the queue and then we\n      // filter it out using the whitelist during the commit.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n      updatePayload.push(_propKey, nextProp);\n    }\n  }\n  return updatePayload;\n}\nvar prepareChanged = null;\nvar HostConfig = {\n  getRootHostContext: function getRootHostContext() {\n    return NO_CONTEXT;\n  },\n  getChildHostContext: function getChildHostContext(parentHostContext) {\n    return parentHostContext;\n  },\n  getChildHostContextForEventComponent: function getChildHostContextForEventComponent(parentHostContext) {\n    return parentHostContext;\n  },\n  getPublicInstance: function getPublicInstance(instance) {\n    return instance;\n  },\n  // TODO: Implement a proper version of getCurrentEventPriority\n  getCurrentEventPriority: function getCurrentEventPriority() {\n    return getEventPriority();\n  },\n  prepareForCommit: function prepareForCommit() {\n    // noop\n    return null;\n  },\n  resetAfterCommit: function resetAfterCommit() {\n    // noop\n  },\n  createInstance: createElement,\n  hideInstance: function hideInstance(instance) {\n    instance.visible = false;\n  },\n  unhideInstance: function unhideInstance(instance, props) {\n    var visible = props !== undefined && props !== null && props.hasOwnProperty('visible') ? props.visible : true;\n    instance.visible = visible;\n  },\n  finalizeInitialChildren: function finalizeInitialChildren(wordElement, type, props) {\n    return false;\n  },\n  prepareUpdate: function prepareUpdate(pixiElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\n    prepareChanged = diffProperties(pixiElement, type, oldProps, newProps);\n    return prepareChanged;\n  },\n  shouldSetTextContent: function shouldSetTextContent(type, props) {\n    return false;\n  },\n  shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {\n    var isAlphaVisible = typeof props.alpha === 'undefined' || props.alpha > 0;\n    var isRenderable = typeof props.renderable === 'undefined' || props.renderable === true;\n    var isVisible = typeof props.visible === 'undefined' || props.visible === true;\n    return !(isAlphaVisible && isRenderable && isVisible);\n  },\n  createTextInstance: function createTextInstance(text, rootContainerInstance, internalInstanceHandler) {\n    invariant(false, \"pixi-react: Error trying to add text node \\\"\".concat(text, \"\\\"\"), 'PixiFiber does not support text nodes as children of a Pixi component. ' + 'To pass a string value to your component, use a property other than children. ' + 'If you wish to display some text, you can use &lt;Text text={string} /&gt; instead.');\n  },\n  unhideTextInstance: function unhideTextInstance(textInstance, text) {\n    // noop\n  },\n  mountEventComponent: function mountEventComponent() {\n    // noop\n  },\n  updateEventComponent: function updateEventComponent() {\n    // noop\n  },\n  handleEventTarget: function handleEventTarget() {\n    // noop\n  },\n  scheduleTimeout: setTimeout,\n  cancelTimeout: clearTimeout,\n  noTimeout: -1,\n  warnsIfNotActing: false,\n  now: performanceNowExports,\n  isPrimaryRenderer: false,\n  supportsMutation: true,\n  supportsPersistence: false,\n  supportsHydration: false,\n  supportsMicrotasks: true,\n  scheduleMicrotask: queueMicrotask,\n  /**\n  * -------------------------------------------\n  * Mutation\n  * -------------------------------------------\n  */\n  appendInitialChild: function appendInitialChild() {\n    var _args$0$__reactpixi, _args$0$__reactpixi$r;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var res = _appendChild.apply(null, args);\n    (_args$0$__reactpixi = args[0].__reactpixi) === null || _args$0$__reactpixi === void 0 ? void 0 : (_args$0$__reactpixi$r = _args$0$__reactpixi.root) === null || _args$0$__reactpixi$r === void 0 ? void 0 : _args$0$__reactpixi$r.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'appendInitialChild'\n    });\n    return res;\n  },\n  appendChild: function appendChild() {\n    var _args$0$__reactpixi2, _args$0$__reactpixi2$;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    var res = _appendChild.apply(null, args);\n    (_args$0$__reactpixi2 = args[0].__reactpixi) === null || _args$0$__reactpixi2 === void 0 ? void 0 : (_args$0$__reactpixi2$ = _args$0$__reactpixi2.root) === null || _args$0$__reactpixi2$ === void 0 ? void 0 : _args$0$__reactpixi2$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'appendChild'\n    });\n    return res;\n  },\n  appendChildToContainer: function appendChildToContainer() {\n    var _args$0$__reactpixi3, _args$0$__reactpixi3$;\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    var res = _appendChild.apply(null, args);\n    (_args$0$__reactpixi3 = args[0].__reactpixi) === null || _args$0$__reactpixi3 === void 0 ? void 0 : (_args$0$__reactpixi3$ = _args$0$__reactpixi3.root) === null || _args$0$__reactpixi3$ === void 0 ? void 0 : _args$0$__reactpixi3$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'appendChildToContainer'\n    });\n    return res;\n  },\n  removeChild: function removeChild() {\n    var _args$0$__reactpixi4, _args$0$__reactpixi4$;\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    var res = _removeChild.apply(null, args);\n    (_args$0$__reactpixi4 = args[0].__reactpixi) === null || _args$0$__reactpixi4 === void 0 ? void 0 : (_args$0$__reactpixi4$ = _args$0$__reactpixi4.root) === null || _args$0$__reactpixi4$ === void 0 ? void 0 : _args$0$__reactpixi4$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'removeChild'\n    });\n    return res;\n  },\n  removeChildFromContainer: function removeChildFromContainer() {\n    var _args$0$__reactpixi5, _args$0$__reactpixi5$;\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    var res = _removeChild.apply(null, args);\n    (_args$0$__reactpixi5 = args[0].__reactpixi) === null || _args$0$__reactpixi5 === void 0 ? void 0 : (_args$0$__reactpixi5$ = _args$0$__reactpixi5.root) === null || _args$0$__reactpixi5$ === void 0 ? void 0 : _args$0$__reactpixi5$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'removeChildFromContainer'\n    });\n    return res;\n  },\n  insertBefore: insertBefore,\n  insertInContainerBefore: function insertInContainerBefore() {\n    var _args$0$__reactpixi6, _args$0$__reactpixi6$;\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    var res = insertBefore.apply(null, args);\n    (_args$0$__reactpixi6 = args[0].__reactpixi) === null || _args$0$__reactpixi6 === void 0 ? void 0 : (_args$0$__reactpixi6$ = _args$0$__reactpixi6.root) === null || _args$0$__reactpixi6$ === void 0 ? void 0 : _args$0$__reactpixi6$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'insertInContainerBefore'\n    });\n    return res;\n  },\n  commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n    var applyProps = instance && instance.applyProps;\n    if (typeof applyProps !== 'function') {\n      applyProps = applyDefaultProps;\n    }\n    var changed = applyProps(instance, oldProps, newProps);\n    if (changed || prepareChanged) {\n      var _instance$__reactpixi, _instance$__reactpixi2;\n      (_instance$__reactpixi = instance.__reactpixi) === null || _instance$__reactpixi === void 0 ? void 0 : (_instance$__reactpixi2 = _instance$__reactpixi.root) === null || _instance$__reactpixi2 === void 0 ? void 0 : _instance$__reactpixi2.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n        detail: 'commitUpdate'\n      });\n    }\n  },\n  commitMount: function commitMount(instance, updatePayload, type, oldProps, newProps) {\n    // noop\n  },\n  commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {\n    // noop\n  },\n  resetTextContent: function resetTextContent(pixiElement) {\n    // noop\n  },\n  clearContainer: function clearContainer(container) {\n    // TODO implement this\n  },\n  getFundamentalComponentInstance: function getFundamentalComponentInstance(fundamentalInstance) {\n    throw new Error('Not yet implemented.');\n  },\n  mountFundamentalComponent: function mountFundamentalComponent(fundamentalInstance) {\n    throw new Error('Not yet implemented.');\n  },\n  shouldUpdateFundamentalComponent: function shouldUpdateFundamentalComponent(fundamentalInstance) {\n    throw new Error('Not yet implemented.');\n  },\n  unmountFundamentalComponent: function unmountFundamentalComponent(fundamentalInstance) {\n    throw new Error('Not yet implemented.');\n  },\n  getInstanceFromNode: function getInstanceFromNode(node) {\n    throw new Error('Not yet implemented.');\n  },\n  isOpaqueHydratingObject: function isOpaqueHydratingObject(value) {\n    throw new Error('Not yet implemented');\n  },\n  makeOpaqueHydratingObject: function makeOpaqueHydratingObject(attemptToReadValue) {\n    throw new Error('Not yet implemented.');\n  },\n  makeClientIdInDEV: function makeClientIdInDEV(warnOnAccessInDEV) {\n    throw new Error('Not yet implemented');\n  },\n  beforeActiveInstanceBlur: function beforeActiveInstanceBlur(internalInstanceHandle) {\n    // noop\n  },\n  afterActiveInstanceBlur: function afterActiveInstanceBlur() {\n    // noop\n  },\n  detachDeletedInstance: function detachDeletedInstance() {\n    // noop\n  },\n  preparePortalMount: function preparePortalMount(portalInstance) {\n    // noop\n  }\n};\nvar hostconfig = HostConfig;\n\nvar PixiFiber = Reconciler(hostconfig);\nvar REACT_DOM_VERSION = pkg.dependencies['react-dom'].replace(/[^0-9.]/g, '');\nvar PACKAGE_NAME = pkg.name;\nPixiFiber.injectIntoDevTools({\n  bundleType: 1 ,\n  version: REACT_DOM_VERSION,\n  rendererPackageName: PACKAGE_NAME,\n  findHostInstanceByFiber: PixiFiber.findHostInstance\n});\n\n// cache both root PixiFiber containers and React roots\nvar roots = new Map();\n\n/**\n * @param {Container} container\n */\nfunction unmountComponent(container) {\n  invariant(_pixi_display__WEBPACK_IMPORTED_MODULE_1__.Container.prototype.isPrototypeOf(container), 'Invalid argument `container`, expected instance of `PIXI.Container`.');\n  if (roots.has(container)) {\n    var _roots$get = roots.get(container),\n      pixiFiberContainer = _roots$get.pixiFiberContainer;\n\n    // unmount component\n    PixiFiber.updateContainer(null, pixiFiberContainer, undefined, function () {\n      roots.delete(container);\n    });\n  }\n}\n\n/**\n * Custom Renderer with react 18 API\n * Use this without React-DOM\n *\n * @param {Container} container\n * @returns {{ render: Function, unmount: Function}}\n */\nfunction createRoot(container) {\n  invariant(_pixi_display__WEBPACK_IMPORTED_MODULE_1__.Container.prototype.isPrototypeOf(container), 'Invalid argument `container`, expected instance of `PIXI.Container`.');\n  var root = roots.get(container);\n  invariant(!root, 'Pixi React: createRoot should only be called once');\n  if (!root) {\n    var pixiFiberContainer = PixiFiber.createContainer(container);\n    var reactRoot = {\n      render: function render(element) {\n        // schedules a top level update\n        PixiFiber.updateContainer(element, pixiFiberContainer, undefined);\n        return PixiFiber.getPublicRootInstance(pixiFiberContainer);\n      },\n      unmount: function unmount() {\n        unmountComponent(container);\n        roots.delete(container);\n      }\n    };\n    root = {\n      pixiFiberContainer: pixiFiberContainer,\n      reactRoot: reactRoot\n    };\n    roots.set(container, root);\n  }\n  return root.reactRoot;\n}\n\n/**\n * Custom Renderer\n * Use this without React-DOM\n *\n * @deprecated use createRoot instead\n *\n * @param {React.ReactNode} element\n * @param {Container} container (i.e. the Stage)\n * @param {Function} callback\n */\nfunction render(element, container, callback) {\n  console.warn('Pixi React Deprecation Warning: render is deprecated, use createRoot instead');\n  if (callback !== undefined) {\n    console.warn('Pixi React Deprecation Warning: render callback no longer exists in React 18');\n  }\n  var reactRoot;\n  if (roots.has(container)) {\n    var _roots$get2 = roots.get(container);\n    reactRoot = _roots$get2.reactRoot;\n  } else {\n    reactRoot = createRoot(container);\n  }\n  return reactRoot.render(element);\n}\n\n/**\n * @deprecated use root.unmount() instead\n * @param {Container} container\n */\nfunction unmountComponentAtNode(container) {\n  unmountComponent(container);\n}\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar Context = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_12___default().createContext(null);\nvar AppProvider = Context.Provider;\nvar AppConsumer = Context.Consumer;\nvar withPixiApp = function withPixiApp(BaseComponent) {\n  var wrapper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_12___default().forwardRef(function (props, ref) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_12___default().createElement(AppConsumer, null, function (app) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_12___default().createElement(BaseComponent, _extends({}, props, {\n        ref: ref,\n        app: app\n      }));\n    });\n  });\n  wrapper.displayName = \"withPIXIApp(\".concat(BaseComponent.displayName || BaseComponent.name, \")\");\n  return wrapper;\n};\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$1() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar noop = function noop() {};\n\n/**\n * -------------------------------------------\n * Stage React Component (use this in react-dom)\n *\n * @usage\n *\n * const App = () => (\n *   <Stage\n *     width={500}\n *     height={500}\n *     options={ backgroundColor: 0xff0000 }\n *     onMount={( renderer, canvas ) => {\n *       console.log('PIXI renderer: ', renderer)\n *       console.log('Canvas element: ', canvas)\n *     }}>\n * );\n *\n * -------------------------------------------\n */\n\nvar propTypes = {\n  // dimensions\n  width: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().number),\n  height: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().number),\n  // will return renderer\n  onMount: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().func),\n  onUnmount: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().func),\n  // run ticker at start?\n  raf: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n  // render component on component lifecycle changes?\n  renderOnComponentChange: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n  children: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().node),\n  // PIXI options, see https://pixijs.download/dev/docs/PIXI.Application.html\n  options: prop_types__WEBPACK_IMPORTED_MODULE_15___default().shape({\n    autoStart: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    width: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().number),\n    height: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().number),\n    useContextAlpha: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    backgroundAlpha: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().number),\n    autoDensity: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    antialias: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    preserveDrawingBuffer: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    resolution: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().number),\n    forceCanvas: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    backgroundColor: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().number),\n    clearBeforeRender: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    powerPreference: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().string),\n    sharedTicker: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    sharedLoader: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().bool),\n    // resizeTo needs to be a window or HTMLElement\n    resizeTo: function resizeTo(props, propName) {\n      var el = props[propName];\n      el && invariant(el === window || el instanceof HTMLElement, \"Invalid prop `resizeTo` of type \".concat(_typeof(el), \", expect `window` or an `HTMLElement`.\"));\n    },\n    // view is optional, use if provided\n    view: function view(props, propName, componentName) {\n      var el = props[propName];\n      el && invariant(el instanceof HTMLCanvasElement, \"Invalid prop `view` of type \".concat(_typeof(el), \", supplied to \").concat(componentName, \", expected `<canvas> Element`\"));\n    }\n  })\n};\nvar defaultProps = {\n  width: 800,\n  height: 600,\n  onMount: noop,\n  onUnmount: noop,\n  raf: true,\n  renderOnComponentChange: true\n};\nfunction getCanvasProps(props) {\n  var reserved = [].concat(_toConsumableArray(Object.keys(propTypes)), _toConsumableArray(Object.keys(PROPS_DISPLAY_OBJECT)));\n  return Object.keys(props).filter(function (p) {\n    return !reserved.includes(p);\n  }).reduce(function (all, prop) {\n    return _objectSpread$1(_objectSpread$1({}, all), {}, _defineProperty({}, prop, props[prop]));\n  }, {});\n}\nvar Stage = /*#__PURE__*/function (_React$Component) {\n  _inherits(Stage, _React$Component);\n  var _super = _createSuper(Stage);\n  function Stage() {\n    var _this;\n    _classCallCheck(this, Stage);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"_canvas\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_mediaQuery\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_ticker\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_needsUpdate\", true);\n    _defineProperty(_assertThisInitialized(_this), \"app\", null);\n    _defineProperty(_assertThisInitialized(_this), \"updateSize\", function () {\n      var _this$props = _this.props,\n        width = _this$props.width,\n        height = _this$props.height,\n        options = _this$props.options;\n      if (!(options !== null && options !== void 0 && options.resolution)) {\n        _this.app.renderer.resolution = window.devicePixelRatio;\n        _this.resetInteractionManager();\n      }\n      _this.app.renderer.resize(width, height);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"needsRenderUpdate\", function () {\n      _this._needsUpdate = true;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderStage\", function () {\n      var _this$props2 = _this.props,\n        renderOnComponentChange = _this$props2.renderOnComponentChange,\n        raf = _this$props2.raf;\n      if (!raf && renderOnComponentChange && _this._needsUpdate) {\n        _this._needsUpdate = false;\n        _this.app.renderer.render(_this.app.stage);\n      }\n    });\n    return _this;\n  }\n  _createClass(Stage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props3 = this.props,\n        onMount = _this$props3.onMount,\n        width = _this$props3.width,\n        height = _this$props3.height,\n        options = _this$props3.options,\n        raf = _this$props3.raf,\n        renderOnComponentChange = _this$props3.renderOnComponentChange;\n      this.app = new _pixi_app__WEBPACK_IMPORTED_MODULE_13__.Application(_objectSpread$1(_objectSpread$1({\n        width: width,\n        height: height,\n        view: this._canvas\n      }, options), {}, {\n        autoDensity: (options === null || options === void 0 ? void 0 : options.autoDensity) !== false\n      }));\n      {\n        // workaround for React 18 Strict Mode unmount causing canvas\n        // context to be lost\n        this.app.renderer.context.extensions.loseContext = null;\n      }\n      this.app.ticker.autoStart = false;\n      this.app.ticker[raf ? 'start' : 'stop']();\n      this.app.stage.__reactpixi = {\n        root: this.app.stage\n      };\n      this.mountNode = PixiFiber.createContainer(this.app.stage);\n      PixiFiber.updateContainer(this.getChildren(), this.mountNode, this);\n      onMount(this.app);\n\n      // update size on media query resolution change?\n      // only if autoDensity = true\n      if (options !== null && options !== void 0 && options.autoDensity && window.matchMedia && (options === null || options === void 0 ? void 0 : options.resolution) === undefined) {\n        this._mediaQuery = window.matchMedia(\"(-webkit-min-device-pixel-ratio: 1.3), (min-resolution: 120dpi)\");\n        this._mediaQuery.addListener(this.updateSize);\n      }\n\n      // listen for reconciler changes\n      if (renderOnComponentChange && !raf) {\n        this._ticker = new _pixi_ticker__WEBPACK_IMPORTED_MODULE_14__.Ticker();\n        this._ticker.autoStart = true;\n        this._ticker.add(this.renderStage);\n        this.app.stage.on('__REACT_PIXI_REQUEST_RENDER__', this.needsRenderUpdate);\n      }\n      this.updateSize();\n      this.renderStage();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, prevContext) {\n      var _prevProps$options;\n      var _this$props4 = this.props,\n        width = _this$props4.width,\n        height = _this$props4.height,\n        raf = _this$props4.raf,\n        renderOnComponentChange = _this$props4.renderOnComponentChange,\n        options = _this$props4.options;\n\n      // update resolution\n      if ((options === null || options === void 0 ? void 0 : options.resolution) !== undefined && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.options.resolution) !== (options === null || options === void 0 ? void 0 : options.resolution)) {\n        this.app.renderer.resolution = options.resolution;\n        this.resetInteractionManager();\n      }\n\n      // update size\n      if (prevProps.height !== height || prevProps.width !== width || ((_prevProps$options = prevProps.options) === null || _prevProps$options === void 0 ? void 0 : _prevProps$options.resolution) !== (options === null || options === void 0 ? void 0 : options.resolution)) {\n        this.updateSize();\n      }\n\n      // handle raf change\n      if (prevProps.raf !== raf) {\n        this.app.ticker[raf ? 'start' : 'stop']();\n      }\n\n      // flush fiber\n      PixiFiber.updateContainer(this.getChildren(), this.mountNode, this);\n      if (prevProps.width !== width || prevProps.height !== height || prevProps.raf !== raf || prevProps.renderOnComponentChange !== renderOnComponentChange || prevProps.options !== options) {\n        this._needsUpdate = true;\n        this.renderStage();\n      }\n    }\n  }, {\n    key: \"resetInteractionManager\",\n    value:\n    // provide support for Pixi v6 still\n    function resetInteractionManager() {\n      // `interaction` property is absent in Pixi v7 and in v6 if user has installed Federated Events API plugin.\n      // https://api.pixijs.io/@pixi/events.html\n      // in v7 however, there's a stub object which displays a deprecation warning, so also check the resolution property:\n      var maybeInteraction = this.app.renderer.plugins.interaction;\n      if (maybeInteraction !== null && maybeInteraction !== void 0 && maybeInteraction.resolution) {\n        maybeInteraction.resolution = this.app.renderer.resolution;\n      }\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      var children = this.props.children;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_12___default().createElement(AppProvider, {\n        value: this.app\n      }, children);\n    }\n  }, {\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(error, errorInfo) {\n      console.error(\"Error occurred in `Stage`.\");\n      console.error(error);\n      console.error(errorInfo);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onUnmount(this.app);\n      if (this._ticker) {\n        this._ticker.remove(this.renderStage);\n        this._ticker.destroy();\n      }\n      this.app.stage.off('__REACT_PIXI_REQUEST_RENDER__', this.needsRenderUpdate);\n      PixiFiber.updateContainer(null, this.mountNode, this);\n      if (this._mediaQuery) {\n        this._mediaQuery.removeListener(this.updateSize);\n        this._mediaQuery = null;\n      }\n      this.app.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var options = this.props.options;\n      if (options && options.view) {\n        invariant(options.view instanceof HTMLCanvasElement, 'options.view needs to be a `HTMLCanvasElement`');\n        return null;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_12___default().createElement(\"canvas\", _extends({}, getCanvasProps(this.props), {\n        ref: function ref(c) {\n          return _this2._canvas = c;\n        }\n      }));\n    }\n  }]);\n  return Stage;\n}((react__WEBPACK_IMPORTED_MODULE_12___default().Component));\nStage.propTypes = propTypes;\nStage.defaultProps = defaultProps;\nvar Stage$1 = Stage;\n\nfunction useApp() {\n  var app = (0,react__WEBPACK_IMPORTED_MODULE_12__.useContext)(Context);\n  invariant(app instanceof _pixi_app__WEBPACK_IMPORTED_MODULE_13__.Application, 'No Context found with `%s`. Make sure to wrap component with `%s`', 'PIXI.Application', 'AppProvider');\n  return app;\n}\n\nfunction useTick(callback) {\n  var enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var app = useApp();\n  invariant(typeof callback === 'function', '`useTick` needs a callback function.');\n  invariant(app instanceof _pixi_app__WEBPACK_IMPORTED_MODULE_13__.Application, 'No Context found with `%s`. Make sure to wrap component with `%s`', 'PIXI.Application', 'AppProvider');\n  var savedRef = (0,react__WEBPACK_IMPORTED_MODULE_12__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_12__.useEffect)(function () {\n    savedRef.current = callback;\n  }, [callback]);\n\n  // eslint-disable-next-line consistent-return\n  (0,react__WEBPACK_IMPORTED_MODULE_12__.useEffect)(function () {\n    if (enabled) {\n      var tick = function tick(delta) {\n        return savedRef.current.apply(app.ticker, [delta, app.ticker]);\n      };\n      app.ticker.add(tick);\n      return function () {\n        if (app.ticker) {\n          app.ticker.remove(tick);\n        }\n      };\n    }\n  }, [enabled]);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\n\nvar _excluded = [\"children\", \"apply\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar withFilters = function withFilters(WrapperComponent, filters) {\n  invariant(_typeof(filters) === 'object', 'Second argument needs to be an indexed object with { prop: Filter }');\n  var keys = Object.keys(filters);\n  var Wrapper = function Wrapper(_ref) {\n    var children = _ref.children,\n      apply = _ref.apply,\n      props = _objectWithoutProperties(_ref, _excluded);\n    // create filters\n    var filterList = (0,react__WEBPACK_IMPORTED_MODULE_12__.useRef)((0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {\n      return keys.map(function (prop) {\n        var _props$prop;\n        var constructorArgs = (props === null || props === void 0 ? void 0 : (_props$prop = props[prop]) === null || _props$prop === void 0 ? void 0 : _props$prop.construct) || [];\n        return _construct(filters[prop], _toConsumableArray(constructorArgs));\n      });\n    }, [keys]));\n    var filterObj = (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {\n      return keys.reduce(function (all, c, i) {\n        return _objectSpread(_objectSpread({}, all), {}, _defineProperty({}, c, filterList.current[i]));\n      }, {});\n    }, [keys]);\n\n    // get rest props\n    var restProps = (0,react__WEBPACK_IMPORTED_MODULE_12__.useMemo)(function () {\n      return Object.keys(props).filter(not(hasKey(keys))).reduce(function (all, c) {\n        return _objectSpread(_objectSpread({}, all), {}, _defineProperty({}, c, props[c]));\n      }, {});\n    }, [props, keys]);\n\n    // update filter params\n    keys.forEach(function (k, i) {\n      return Object.assign(filterList.current[i], props[k]);\n    });\n\n    // use apply ?\n    if (apply && isFunction(apply)) {\n      apply.call(WrapperComponent, filterObj);\n    }\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_12___default().createElement(WrapperComponent, _extends({}, restProps, {\n      filters: filterList.current\n    }), children);\n  };\n  Wrapper.displayName = 'FilterWrapper';\n  Wrapper.propTypes = {\n    children: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().node),\n    apply: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().func)\n  };\n  return Wrapper;\n};\n\nvar BitmapText = TYPES.BitmapText;\nvar Container = TYPES.Container;\nvar Graphics = TYPES.Graphics;\nvar NineSlicePlane = TYPES.NineSlicePlane;\nvar ParticleContainer = TYPES.ParticleContainer;\nvar Sprite = TYPES.Sprite;\nvar AnimatedSprite = TYPES.AnimatedSprite;\nvar Text = TYPES.Text;\nvar TilingSprite = TYPES.TilingSprite;\nvar SimpleMesh = TYPES.SimpleMesh;\nvar SimpleRope = TYPES.SimpleRope;\n\n\n//# sourceMappingURL=index.es-dev.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@pixi/react/dist/index.es-dev.js\n"));

/***/ }),

/***/ "./node_modules/@pixi/react/module.js":
/*!********************************************!*\
  !*** ./node_modules/@pixi/react/module.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* eslint-disable global-require */\nif (true)\n{\n    module.exports = __webpack_require__(/*! ./dist/index.es-dev */ \"./node_modules/@pixi/react/dist/index.es-dev.js\");\n}\nelse\n{}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHBpeGkvcmVhY3QvbW9kdWxlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsSUFBSSxJQUFzQztBQUMxQztBQUNBLElBQUksa0hBQStDO0FBQ25EO0FBQ0E7QUFDQSxFQUVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcGl4aS9yZWFjdC9tb2R1bGUuanM/ZDhiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBnbG9iYWwtcmVxdWlyZSAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKVxue1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2luZGV4LmVzLWRldicpO1xufVxuZWxzZVxue1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2luZGV4LmVzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@pixi/react/module.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/object-assign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object-assign.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar assign = Object.assign.bind(Object);\nmodule.exports = assign;\nmodule.exports[\"default\"] = module.exports;\n\n//# sourceMappingURL=object-assign.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9vYmplY3QtYXNzaWduLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLHlCQUFzQjs7QUFFdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9wb2x5ZmlsbHMvb2JqZWN0LWFzc2lnbi5qcz9lN2QxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24uYmluZChPYmplY3QpO1xubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ247XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC1hc3NpZ24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/polyfills/object-assign.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar ref, ref1;\nmodule.exports = ((ref = __webpack_require__.g.process) == null ? void 0 : ref.env) && typeof ((ref1 = __webpack_require__.g.process) == null ? void 0 : ref1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! ../../compiled/process */ \"./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSx5QkFBeUIscUJBQU0seURBQXlELHFCQUFNLHNEQUFzRCxxQkFBTSxXQUFXLG1CQUFPLENBQUMsb0ZBQXdCOztBQUVyTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzP2NhNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcmVmLCByZWYxO1xubW9kdWxlLmV4cG9ydHMgPSAoKHJlZiA9IGdsb2JhbC5wcm9jZXNzKSA9PSBudWxsID8gdm9pZCAwIDogcmVmLmVudikgJiYgdHlwZW9mICgocmVmMSA9IGdsb2JhbC5wcm9jZXNzKSA9PSBudWxsID8gdm9pZCAwIDogcmVmMS5lbnYpID09PSBcIm9iamVjdFwiID8gZ2xvYmFsLnByb2Nlc3MgOiByZXF1aXJlKFwiLi4vLi4vY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "./src/components/canvas/Scene.tsx":
/*!*****************************************!*\
  !*** ./src/components/canvas/Scene.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Scene\": function() { return /* binding */ Scene; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pixi_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pixi/react */ \"./node_modules/@pixi/react/module.js\");\n/* harmony import */ var _pixi_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_pixi_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nconst Scene = (param)=>{\n    let { width , height  } = param;\n    const onDragStart = (event)=>{\n        const sprite = event.currentTarget;\n        sprite.alpha = 0.5;\n        sprite.data = event.data;\n        sprite.dragging = true;\n    };\n    const onDragEnd = (event)=>{\n        const sprite = event.currentTarget;\n        sprite.alpha = 1;\n        sprite.dragging = false;\n        sprite.data = null;\n    };\n    const onDragMove = (event)=>{\n        const sprite = event.currentTarget;\n        if (sprite.dragging) {\n            const newPosition = sprite.data.getLocalPosition(sprite.parent);\n            sprite.x = newPosition.x;\n            sprite.y = newPosition.y;\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_pixi_react__WEBPACK_IMPORTED_MODULE_2__.Stage, {\n        width: width,\n        height: height,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_pixi_react__WEBPACK_IMPORTED_MODULE_2__.Sprite, {\n            image: \"./img/nike.png\",\n            x: 100,\n            y: 100,\n            anchor: 0.5,\n            interactive: true,\n            buttonMode: true,\n            pointerdown: onDragStart,\n            pointerup: onDragEnd,\n            pointerupoutside: onDragEnd,\n            pointermove: onDragMove\n        }, void 0, false, {\n            fileName: \"/Users/sejinoh/Documents/GitHub/PixiJS-Test/client/src/components/canvas/Scene.tsx\",\n            lineNumber: 35,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/sejinoh/Documents/GitHub/PixiJS-Test/client/src/components/canvas/Scene.tsx\",\n        lineNumber: 34,\n        columnNumber: 5\n    }, undefined);\n};\n_c = Scene;\nvar _c;\n$RefreshReg$(_c, \"Scene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9jYW52YXMvU2NlbmUudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUE2RDtBQUNuQztBQU9uQixNQUFNRyxRQUFRLFNBQXVCO1FBQXRCLEVBQUVDLE1BQUssRUFBRUMsT0FBTSxFQUFFO0lBQ3JDLE1BQU1DLGNBQWMsQ0FBQ0MsUUFBaUM7UUFDcEQsTUFBTUMsU0FBU0QsTUFBTUUsYUFBYTtRQUNsQ0QsT0FBT0UsS0FBSyxHQUFHO1FBQ2ZGLE9BQU9HLElBQUksR0FBR0osTUFBTUksSUFBSTtRQUN4QkgsT0FBT0ksUUFBUSxHQUFHLElBQUk7SUFDeEI7SUFFQSxNQUFNQyxZQUFZLENBQUNOLFFBQWlDO1FBQ2xELE1BQU1DLFNBQVNELE1BQU1FLGFBQWE7UUFDbENELE9BQU9FLEtBQUssR0FBRztRQUNmRixPQUFPSSxRQUFRLEdBQUcsS0FBSztRQUN2QkosT0FBT0csSUFBSSxHQUFHLElBQUk7SUFDcEI7SUFFQSxNQUFNRyxhQUFhLENBQUNQLFFBQWlDO1FBQ25ELE1BQU1DLFNBQVNELE1BQU1FLGFBQWE7UUFDbEMsSUFBSUQsT0FBT0ksUUFBUSxFQUFFO1lBQ25CLE1BQU1HLGNBQWNQLE9BQU9HLElBQUksQ0FBRUssZ0JBQWdCLENBQUNSLE9BQU9TLE1BQU07WUFDL0RULE9BQU9VLENBQUMsR0FBR0gsWUFBWUcsQ0FBQztZQUN4QlYsT0FBT1csQ0FBQyxHQUFHSixZQUFZSSxDQUFDO1FBQzFCLENBQUM7SUFDSDtJQUVBLHFCQUNFLDhEQUFDbkIsOENBQUtBO1FBQUNJLE9BQU9BO1FBQU9DLFFBQVFBO2tCQUMzQiw0RUFBQ0osK0NBQU1BO1lBQ0xtQixPQUFNO1lBQ05GLEdBQUc7WUFDSEMsR0FBRztZQUNIRSxRQUFRO1lBQ1JDLFdBQVc7WUFDWEMsVUFBVTtZQUNWQyxhQUFhbEI7WUFDYm1CLFdBQVdaO1lBQ1hhLGtCQUFrQmI7WUFDbEJjLGFBQWFiOzs7Ozs7Ozs7OztBQVdyQixFQUFFO0tBL0NXWCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9jYW52YXMvU2NlbmUudHN4P2E4NDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhZ2UsIENvbnRhaW5lciwgU3ByaXRlLCBUZXh0IH0gZnJvbSBcIkBwaXhpL3JlYWN0XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmludGVyZmFjZSBEcmFnZ2FibGUgZXh0ZW5kcyBQSVhJLkRpc3BsYXlPYmplY3Qge1xuICBkYXRhOiBQSVhJLkludGVyYWN0aW9uRGF0YSB8IG51bGw7XG4gIGRyYWdnaW5nOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgU2NlbmUgPSAoeyB3aWR0aCwgaGVpZ2h0IH0pID0+IHtcbiAgY29uc3Qgb25EcmFnU3RhcnQgPSAoZXZlbnQ6IFBJWEkuSW50ZXJhY3Rpb25FdmVudCkgPT4ge1xuICAgIGNvbnN0IHNwcml0ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgRHJhZ2dhYmxlO1xuICAgIHNwcml0ZS5hbHBoYSA9IDAuNTtcbiAgICBzcHJpdGUuZGF0YSA9IGV2ZW50LmRhdGE7XG4gICAgc3ByaXRlLmRyYWdnaW5nID0gdHJ1ZTtcbiAgfTtcblxuICBjb25zdCBvbkRyYWdFbmQgPSAoZXZlbnQ6IFBJWEkuSW50ZXJhY3Rpb25FdmVudCkgPT4ge1xuICAgIGNvbnN0IHNwcml0ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgRHJhZ2dhYmxlO1xuICAgIHNwcml0ZS5hbHBoYSA9IDE7XG4gICAgc3ByaXRlLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgc3ByaXRlLmRhdGEgPSBudWxsO1xuICB9O1xuXG4gIGNvbnN0IG9uRHJhZ01vdmUgPSAoZXZlbnQ6IFBJWEkuSW50ZXJhY3Rpb25FdmVudCkgPT4ge1xuICAgIGNvbnN0IHNwcml0ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgRHJhZ2dhYmxlO1xuICAgIGlmIChzcHJpdGUuZHJhZ2dpbmcpIHtcbiAgICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gc3ByaXRlLmRhdGEhLmdldExvY2FsUG9zaXRpb24oc3ByaXRlLnBhcmVudCk7XG4gICAgICBzcHJpdGUueCA9IG5ld1Bvc2l0aW9uLng7XG4gICAgICBzcHJpdGUueSA9IG5ld1Bvc2l0aW9uLnk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPFN0YWdlIHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9PlxuICAgICAgPFNwcml0ZVxuICAgICAgICBpbWFnZT1cIi4vaW1nL25pa2UucG5nXCJcbiAgICAgICAgeD17MTAwfVxuICAgICAgICB5PXsxMDB9XG4gICAgICAgIGFuY2hvcj17MC41fVxuICAgICAgICBpbnRlcmFjdGl2ZVxuICAgICAgICBidXR0b25Nb2RlXG4gICAgICAgIHBvaW50ZXJkb3duPXtvbkRyYWdTdGFydH1cbiAgICAgICAgcG9pbnRlcnVwPXtvbkRyYWdFbmR9XG4gICAgICAgIHBvaW50ZXJ1cG91dHNpZGU9e29uRHJhZ0VuZH1cbiAgICAgICAgcG9pbnRlcm1vdmU9e29uRHJhZ01vdmV9XG4gICAgICAvPlxuICAgICAgey8qIDxTcHJpdGVcbiAgICAgICAgaW1hZ2U9XCIuL2ltZy9uaWtlLnBuZ1wiXG4gICAgICAgIHNjYWxlPXswLjJ9XG4gICAgICAgIHg9e3dpZHRoIC8gMn1cbiAgICAgICAgeT17aGVpZ2h0IC8gMn1cbiAgICAgICAgYW5jaG9yPXt7IHg6IDAuNSwgeTogMC41IH19XG4gICAgICAvPiAqL31cbiAgICA8L1N0YWdlPlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJTdGFnZSIsIlNwcml0ZSIsIlJlYWN0IiwiU2NlbmUiLCJ3aWR0aCIsImhlaWdodCIsIm9uRHJhZ1N0YXJ0IiwiZXZlbnQiLCJzcHJpdGUiLCJjdXJyZW50VGFyZ2V0IiwiYWxwaGEiLCJkYXRhIiwiZHJhZ2dpbmciLCJvbkRyYWdFbmQiLCJvbkRyYWdNb3ZlIiwibmV3UG9zaXRpb24iLCJnZXRMb2NhbFBvc2l0aW9uIiwicGFyZW50IiwieCIsInkiLCJpbWFnZSIsImFuY2hvciIsImludGVyYWN0aXZlIiwiYnV0dG9uTW9kZSIsInBvaW50ZXJkb3duIiwicG9pbnRlcnVwIiwicG9pbnRlcnVwb3V0c2lkZSIsInBvaW50ZXJtb3ZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/canvas/Scene.tsx\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxPQUFPLGdCQUFnQixtQkFBbUIsTUFBTSxNQUFNLDRCQUE0QixtREFBbUQsK0JBQStCLHFEQUFxRCxZQUFZLElBQUksbUNBQW1DLGFBQWEsS0FBSyxvQkFBb0IsU0FBUyxtQkFBbUIsSUFBSSxxQ0FBcUMsZUFBZSxLQUFLLHVCQUF1QixTQUFTLHVCQUF1QixJQUFJLHVCQUF1QixtQkFBbUIsdUJBQXVCLDJDQUEyQyxhQUFhLHVCQUF1QixJQUFJLGNBQWMsU0FBUyxJQUFJLHdCQUF3QixTQUFTLDBCQUEwQiw0QkFBNEIscUJBQXFCLHVCQUF1QixnREFBZ0QsZUFBZSx1QkFBdUIsSUFBSSxZQUFZLFNBQVMsSUFBSSxzQkFBc0IsU0FBUyx3QkFBd0IsU0FBUyxZQUFZLE1BQU0sU0FBUywyQkFBMkIsV0FBVyxPQUFPLFFBQVEsYUFBYSxjQUFjLEtBQUssS0FBSyxhQUFhLGNBQWMsc0JBQXNCLE1BQU0sT0FBTyxrQ0FBa0MsT0FBTyxlQUFlLFNBQVMsSUFBSSxLQUFLLGFBQWEsTUFBTSxZQUFZLEtBQUssV0FBVyxPQUFPLFFBQVEsbUJBQW1CLHVCQUF1QixvQ0FBb0MsdUJBQXVCLFlBQVksbUJBQW1CLEtBQUsscUJBQXFCLHNCQUFzQixxQkFBcUIseUJBQXlCLG1CQUFtQixXQUFXLGFBQWEsOEJBQThCLGlDQUFpQyxrQkFBa0IsZUFBZSxTQUFTLFVBQVUsYUFBYSxjQUFjLGlCQUFpQixVQUFVLG1CQUFtQixZQUFZLFdBQVcsc0JBQXNCLDBCQUEwQixZQUFZLHVCQUF1QiwyQkFBMkIsd0JBQXdCLFVBQVUsc0JBQXNCLHFEQUFxRCxpQkFBaUIsV0FBVyxvQkFBb0IsbURBQW1ELG1CQUFtQixZQUFZLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzL2Jyb3dzZXIuanM/MWIxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXt2YXIgZT17MjI5OmZ1bmN0aW9uKGUpe3ZhciB0PWUuZXhwb3J0cz17fTt2YXIgcjt2YXIgbjtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PVwiZnVuY3Rpb25cIil7cj1zZXRUaW1lb3V0fWVsc2V7cj1kZWZhdWx0U2V0VGltb3V0fX1jYXRjaChlKXtyPWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2lmKHR5cGVvZiBjbGVhclRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe249Y2xlYXJUaW1lb3V0fWVsc2V7bj1kZWZhdWx0Q2xlYXJUaW1lb3V0fX1jYXRjaChlKXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fSkoKTtmdW5jdGlvbiBydW5UaW1lb3V0KGUpe2lmKHI9PT1zZXRUaW1lb3V0KXtyZXR1cm4gc2V0VGltZW91dChlLDApfWlmKChyPT09ZGVmYXVsdFNldFRpbW91dHx8IXIpJiZzZXRUaW1lb3V0KXtyPXNldFRpbWVvdXQ7cmV0dXJuIHNldFRpbWVvdXQoZSwwKX10cnl7cmV0dXJuIHIoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIHIuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIHIuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQoZSl7aWYobj09PWNsZWFyVGltZW91dCl7cmV0dXJuIGNsZWFyVGltZW91dChlKX1pZigobj09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFuKSYmY2xlYXJUaW1lb3V0KXtuPWNsZWFyVGltZW91dDtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfXRyeXtyZXR1cm4gbihlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIG4uY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBuLmNhbGwodGhpcyxlKX19fXZhciBpPVtdO3ZhciBvPWZhbHNlO3ZhciB1O3ZhciBhPS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2lmKCFvfHwhdSl7cmV0dXJufW89ZmFsc2U7aWYodS5sZW5ndGgpe2k9dS5jb25jYXQoaSl9ZWxzZXthPS0xfWlmKGkubGVuZ3RoKXtkcmFpblF1ZXVlKCl9fWZ1bmN0aW9uIGRyYWluUXVldWUoKXtpZihvKXtyZXR1cm59dmFyIGU9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO289dHJ1ZTt2YXIgdD1pLmxlbmd0aDt3aGlsZSh0KXt1PWk7aT1bXTt3aGlsZSgrK2E8dCl7aWYodSl7dVthXS5ydW4oKX19YT0tMTt0PWkubGVuZ3RofXU9bnVsbDtvPWZhbHNlO3J1bkNsZWFyVGltZW91dChlKX10Lm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dFtyLTFdPWFyZ3VtZW50c1tyXX19aS5wdXNoKG5ldyBJdGVtKGUsdCkpO2lmKGkubGVuZ3RoPT09MSYmIW8pe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSl9fTtmdW5jdGlvbiBJdGVtKGUsdCl7dGhpcy5mdW49ZTt0aGlzLmFycmF5PXR9SXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX07dC50aXRsZT1cImJyb3dzZXJcIjt0LmJyb3dzZXI9dHJ1ZTt0LmVudj17fTt0LmFyZ3Y9W107dC52ZXJzaW9uPVwiXCI7dC52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXQub249bm9vcDt0LmFkZExpc3RlbmVyPW5vb3A7dC5vbmNlPW5vb3A7dC5vZmY9bm9vcDt0LnJlbW92ZUxpc3RlbmVyPW5vb3A7dC5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDt0LmVtaXQ9bm9vcDt0LnByZXBlbmRMaXN0ZW5lcj1ub29wO3QucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3QubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybltdfTt0LmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9O3QuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfTt0LnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fX07dmFyIHQ9e307ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhyKXt2YXIgbj10W3JdO2lmKG4hPT11bmRlZmluZWQpe3JldHVybiBuLmV4cG9ydHN9dmFyIGk9dFtyXT17ZXhwb3J0czp7fX07dmFyIG89dHJ1ZTt0cnl7ZVtyXShpLGkuZXhwb3J0cyxfX25jY3dwY2tfcmVxdWlyZV9fKTtvPWZhbHNlfWZpbmFsbHl7aWYobylkZWxldGUgdFtyXX1yZXR1cm4gaS5leHBvcnRzfWlmKHR5cGVvZiBfX25jY3dwY2tfcmVxdWlyZV9fIT09XCJ1bmRlZmluZWRcIilfX25jY3dwY2tfcmVxdWlyZV9fLmFiPV9fZGlybmFtZStcIi9cIjt2YXIgcj1fX25jY3dwY2tfcmVxdWlyZV9fKDIyOSk7bW9kdWxlLmV4cG9ydHM9cn0pKCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar printWarning = function() {};\n\nif (true) {\n  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n  var loggedTypeFailures = {};\n  var has = __webpack_require__(/*! ./lib/has */ \"./node_modules/prop-types/lib/has.js\");\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) { /**/ }\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +\n              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (true) {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7O0FBRUEsSUFBSSxJQUFxQztBQUN6Qyw2QkFBNkIsbUJBQU8sQ0FBQyx5RkFBNEI7QUFDakU7QUFDQSxZQUFZLG1CQUFPLENBQUMsdURBQVc7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxZQUFZO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLE1BQU0sSUFBcUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZHQUE2RztBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxJQUFxQztBQUMzQztBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanM/MjYyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vbGliL2hhcycpO1xuXG4gIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgdGV4dDtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7IC8qKi8gfVxuICB9O1xufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSB2YWx1ZXMgbWF0Y2ggd2l0aCB0aGUgdHlwZSBzcGVjcy5cbiAqIEVycm9yIG1lc3NhZ2VzIGFyZSBtZW1vcml6ZWQgYW5kIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eXBlU3BlY3MgTWFwIG9mIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIFJ1bnRpbWUgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSB0eXBlLWNoZWNrZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0gez9GdW5jdGlvbn0gZ2V0U3RhY2sgUmV0dXJucyB0aGUgY29tcG9uZW50IHN0YWNrLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBnZXRTdGFjaykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICAgIGlmIChoYXModHlwZVNwZWNzLCB0eXBlU3BlY05hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAgIGlmICh0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcihcbiAgICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiAnICsgbG9jYXRpb24gKyAnIHR5cGUgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyAnICtcbiAgICAgICAgICAgICAgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICsgJ2AuJyArXG4gICAgICAgICAgICAgICdUaGlzIG9mdGVuIGhhcHBlbnMgYmVjYXVzZSBvZiB0eXBvcyBzdWNoIGFzIGBQcm9wVHlwZXMuZnVuY3Rpb25gIGluc3RlYWQgb2YgYFByb3BUeXBlcy5mdW5jYC4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgJiYgIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICcgK1xuICAgICAgICAgICAgbG9jYXRpb24gKyAnIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAnICsgdHlwZW9mIGVycm9yICsgJy4gJyArXG4gICAgICAgICAgICAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArXG4gICAgICAgICAgICAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICtcbiAgICAgICAgICAgICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiAnJztcblxuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdGYWlsZWQgJyArIGxvY2F0aW9uICsgJyB0eXBlOiAnICsgZXJyb3IubWVzc2FnZSArIChzdGFjayAhPSBudWxsID8gc3RhY2sgOiAnJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVzZXRzIHdhcm5pbmcgY2FjaGUgd2hlbiB0ZXN0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlID0gZnVuY3Rpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1Byb3BUeXBlcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/prop-types/checkPropTypes.js\n"));

/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactIs = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\nvar assign = __webpack_require__(/*! object-assign */ \"./node_modules/next/dist/build/polyfills/object-assign.js\");\n\nvar ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\nvar has = __webpack_require__(/*! ./lib/has */ \"./node_modules/prop-types/lib/has.js\");\nvar checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n\nvar printWarning = function() {};\n\nif (true) {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bigint: createPrimitiveTypeChecker('bigint'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message, data) {\n    this.message = message;\n    this.data = data && typeof data === 'object' ? data: {};\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (true) {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if ( true && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError(\n          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),\n          {expectedType: expectedType}\n        );\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!ReactIs.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (true) {\n        if (arguments.length > 1) {\n          printWarning(\n            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n          );\n        } else {\n          printWarning('Invalid argument supplied to oneOf, expected an array.');\n        }\n      }\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n        if (type === 'symbol') {\n          return String(value);\n        }\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var expectedTypes = [];\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);\n        if (checkerResult == null) {\n          return null;\n        }\n        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {\n          expectedTypes.push(checkerResult.data.expectedType);\n        }\n      }\n      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function invalidValidatorError(componentName, location, propFullName, key, type) {\n    return new PropTypeError(\n      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +\n      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'\n    );\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (typeof checker !== 'function') {\n          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (has(shapeTypes, key) && typeof checker !== 'function') {\n          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n        }\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // falsy value can't be a Symbol\n    if (!propValue) {\n      return false;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prop-types/factoryWithTypeCheckers.js\n"));

/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (true) {\n  var ReactIs = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ \"./node_modules/prop-types/factoryWithTypeCheckers.js\")(ReactIs.isElement, throwOnDirectAccess);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxJQUFxQztBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxrREFBVTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsdUZBQTJCO0FBQ3RELEVBQUUsS0FBSyxFQUlOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzP2JkZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prop-types/index.js\n"));

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz9lMDk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prop-types/lib/ReactPropTypesSecret.js\n"));

/***/ }),

/***/ "./node_modules/prop-types/lib/has.js":
/*!********************************************!*\
  !*** ./node_modules/prop-types/lib/has.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = Function.call.bind(Object.prototype.hasOwnProperty);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvaGFzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9oYXMuanM/ZTQ3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/prop-types/lib/has.js\n"));

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-is/cjs/react-is.development.js\n"));

/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"./node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLGdJQUF5RDtBQUMzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/YjMxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-is/index.js\n"));

/***/ })

});